// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MJBloodRiverMessage.proto

package com.ourgame.mahjong.bloodriver.message;

public final class MJBloodRiverMessage {
  private MJBloodRiverMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code com.ourgame.mahjong.bloodriver.message.MeldType}
   *
   * <pre>
   * 一副牌的成牌类型
   * </pre>
   */
  public enum MeldType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MELD_PAIR = 1;</code>
     *
     * <pre>
     *对子，将牌或7对
     * </pre>
     */
    MELD_PAIR(0, 1),
    /**
     * <code>MELD_CHI = 2;</code>
     *
     * <pre>
     *吃牌
     * </pre>
     */
    MELD_CHI(1, 2),
    /**
     * <code>MELD_PENG = 3;</code>
     *
     * <pre>
     *碰牌
     * </pre>
     */
    MELD_PENG(2, 3),
    /**
     * <code>MELD_MING_GANG = 4;</code>
     *
     * <pre>
     *普通明杠，手里三种，别人打出一张
     * </pre>
     */
    MELD_MING_GANG(3, 4),
    /**
     * <code>MELD_BU_GANG = 5;</code>
     *
     * <pre>
     *补杠，先碰，再抓到一张
     * </pre>
     */
    MELD_BU_GANG(4, 5),
    /**
     * <code>MELD_AN_GANG = 6;</code>
     *
     * <pre>
     *暗杠
     * </pre>
     */
    MELD_AN_GANG(5, 6),
    /**
     * <code>MELD_IN_HAND_SHUN = 7;</code>
     *
     * <pre>
     *手中的成牌，顺牌
     * </pre>
     */
    MELD_IN_HAND_SHUN(6, 7),
    /**
     * <code>MELD_IN_HAND_KE = 8;</code>
     *
     * <pre>
     *手中的成牌，刻牌
     * </pre>
     */
    MELD_IN_HAND_KE(7, 8),
    ;

    /**
     * <code>MELD_PAIR = 1;</code>
     *
     * <pre>
     *对子，将牌或7对
     * </pre>
     */
    public static final int MELD_PAIR_VALUE = 1;
    /**
     * <code>MELD_CHI = 2;</code>
     *
     * <pre>
     *吃牌
     * </pre>
     */
    public static final int MELD_CHI_VALUE = 2;
    /**
     * <code>MELD_PENG = 3;</code>
     *
     * <pre>
     *碰牌
     * </pre>
     */
    public static final int MELD_PENG_VALUE = 3;
    /**
     * <code>MELD_MING_GANG = 4;</code>
     *
     * <pre>
     *普通明杠，手里三种，别人打出一张
     * </pre>
     */
    public static final int MELD_MING_GANG_VALUE = 4;
    /**
     * <code>MELD_BU_GANG = 5;</code>
     *
     * <pre>
     *补杠，先碰，再抓到一张
     * </pre>
     */
    public static final int MELD_BU_GANG_VALUE = 5;
    /**
     * <code>MELD_AN_GANG = 6;</code>
     *
     * <pre>
     *暗杠
     * </pre>
     */
    public static final int MELD_AN_GANG_VALUE = 6;
    /**
     * <code>MELD_IN_HAND_SHUN = 7;</code>
     *
     * <pre>
     *手中的成牌，顺牌
     * </pre>
     */
    public static final int MELD_IN_HAND_SHUN_VALUE = 7;
    /**
     * <code>MELD_IN_HAND_KE = 8;</code>
     *
     * <pre>
     *手中的成牌，刻牌
     * </pre>
     */
    public static final int MELD_IN_HAND_KE_VALUE = 8;


    public final int getNumber() { return value; }

    public static MeldType valueOf(int value) {
      switch (value) {
        case 1: return MELD_PAIR;
        case 2: return MELD_CHI;
        case 3: return MELD_PENG;
        case 4: return MELD_MING_GANG;
        case 5: return MELD_BU_GANG;
        case 6: return MELD_AN_GANG;
        case 7: return MELD_IN_HAND_SHUN;
        case 8: return MELD_IN_HAND_KE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MeldType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MeldType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MeldType>() {
            public MeldType findValueByNumber(int number) {
              return MeldType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.getDescriptor().getEnumTypes().get(0);
    }

    private static final MeldType[] VALUES = values();

    public static MeldType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MeldType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.ourgame.mahjong.bloodriver.message.MeldType)
  }

  /**
   * Protobuf enum {@code com.ourgame.mahjong.bloodriver.message.ActionType}
   *
   * <pre>
   * 动作
   * </pre>
   */
  public enum ActionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ACT_GIVEUP = 0;</code>
     *
     * <pre>
     *放弃
     * </pre>
     */
    ACT_GIVEUP(0, 0),
    /**
     * <code>ACT_DISCARD = 1;</code>
     *
     * <pre>
     *打出一张牌
     * </pre>
     */
    ACT_DISCARD(1, 1),
    /**
     * <code>ACT_CHI = 2;</code>
     *
     * <pre>
     *吃牌
     * </pre>
     */
    ACT_CHI(2, 2),
    /**
     * <code>ACT_PENG = 4;</code>
     *
     * <pre>
     *碰牌
     * </pre>
     */
    ACT_PENG(3, 4),
    /**
     * <code>ACT_GANG = 8;</code>
     *
     * <pre>
     *杠牌
     * </pre>
     */
    ACT_GANG(4, 8),
    /**
     * <code>ACT_BUGANG = 16;</code>
     *
     * <pre>
     *补杠
     * </pre>
     */
    ACT_BUGANG(5, 16),
    /**
     * <code>ACT_ANGANG = 32;</code>
     *
     * <pre>
     *暗杠
     * </pre>
     */
    ACT_ANGANG(6, 32),
    /**
     * <code>ACT_WIN = 64;</code>
     *
     * <pre>
     *和牌
     * </pre>
     */
    ACT_WIN(7, 64),
    /**
     * <code>ACT_TING = 128;</code>
     *
     * <pre>
     *听牌
     * </pre>
     */
    ACT_TING(8, 128),
    /**
     * <code>ACT_SHOW = 256;</code>
     *
     * <pre>
     *明牌
     * </pre>
     */
    ACT_SHOW(9, 256),
    ;

    /**
     * <code>ACT_GIVEUP = 0;</code>
     *
     * <pre>
     *放弃
     * </pre>
     */
    public static final int ACT_GIVEUP_VALUE = 0;
    /**
     * <code>ACT_DISCARD = 1;</code>
     *
     * <pre>
     *打出一张牌
     * </pre>
     */
    public static final int ACT_DISCARD_VALUE = 1;
    /**
     * <code>ACT_CHI = 2;</code>
     *
     * <pre>
     *吃牌
     * </pre>
     */
    public static final int ACT_CHI_VALUE = 2;
    /**
     * <code>ACT_PENG = 4;</code>
     *
     * <pre>
     *碰牌
     * </pre>
     */
    public static final int ACT_PENG_VALUE = 4;
    /**
     * <code>ACT_GANG = 8;</code>
     *
     * <pre>
     *杠牌
     * </pre>
     */
    public static final int ACT_GANG_VALUE = 8;
    /**
     * <code>ACT_BUGANG = 16;</code>
     *
     * <pre>
     *补杠
     * </pre>
     */
    public static final int ACT_BUGANG_VALUE = 16;
    /**
     * <code>ACT_ANGANG = 32;</code>
     *
     * <pre>
     *暗杠
     * </pre>
     */
    public static final int ACT_ANGANG_VALUE = 32;
    /**
     * <code>ACT_WIN = 64;</code>
     *
     * <pre>
     *和牌
     * </pre>
     */
    public static final int ACT_WIN_VALUE = 64;
    /**
     * <code>ACT_TING = 128;</code>
     *
     * <pre>
     *听牌
     * </pre>
     */
    public static final int ACT_TING_VALUE = 128;
    /**
     * <code>ACT_SHOW = 256;</code>
     *
     * <pre>
     *明牌
     * </pre>
     */
    public static final int ACT_SHOW_VALUE = 256;


    public final int getNumber() { return value; }

    public static ActionType valueOf(int value) {
      switch (value) {
        case 0: return ACT_GIVEUP;
        case 1: return ACT_DISCARD;
        case 2: return ACT_CHI;
        case 4: return ACT_PENG;
        case 8: return ACT_GANG;
        case 16: return ACT_BUGANG;
        case 32: return ACT_ANGANG;
        case 64: return ACT_WIN;
        case 128: return ACT_TING;
        case 256: return ACT_SHOW;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ActionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ActionType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ActionType>() {
            public ActionType findValueByNumber(int number) {
              return ActionType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.getDescriptor().getEnumTypes().get(1);
    }

    private static final ActionType[] VALUES = values();

    public static ActionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ActionType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.ourgame.mahjong.bloodriver.message.ActionType)
  }

  public interface MeldOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 meldType = 1;
    /**
     * <code>required uint32 meldType = 1;</code>
     *
     * <pre>
     *类型
     * </pre>
     */
    boolean hasMeldType();
    /**
     * <code>required uint32 meldType = 1;</code>
     *
     * <pre>
     *类型
     * </pre>
     */
    int getMeldType();

    // required uint32 provider = 2;
    /**
     * <code>required uint32 provider = 2;</code>
     *
     * <pre>
     *打出最后一张牌的玩家座位号
     * </pre>
     */
    boolean hasProvider();
    /**
     * <code>required uint32 provider = 2;</code>
     *
     * <pre>
     *打出最后一张牌的玩家座位号
     * </pre>
     */
    int getProvider();

    // required uint32 lastTile = 3;
    /**
     * <code>required uint32 lastTile = 3;</code>
     *
     * <pre>
     *最后一张牌
     * </pre>
     */
    boolean hasLastTile();
    /**
     * <code>required uint32 lastTile = 3;</code>
     *
     * <pre>
     *最后一张牌
     * </pre>
     */
    int getLastTile();

    // repeated uint32 rootTile = 4;
    /**
     * <code>repeated uint32 rootTile = 4;</code>
     *
     * <pre>
     *手中牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getRootTileList();
    /**
     * <code>repeated uint32 rootTile = 4;</code>
     *
     * <pre>
     *手中牌
     * </pre>
     */
    int getRootTileCount();
    /**
     * <code>repeated uint32 rootTile = 4;</code>
     *
     * <pre>
     *手中牌
     * </pre>
     */
    int getRootTile(int index);
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.Meld}
   *
   * <pre>
   * 一副牌，吃碰杠
   * </pre>
   */
  public static final class Meld extends
      com.google.protobuf.GeneratedMessage
      implements MeldOrBuilder {
    // Use Meld.newBuilder() to construct.
    private Meld(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Meld(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Meld defaultInstance;
    public static Meld getDefaultInstance() {
      return defaultInstance;
    }

    public Meld getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Meld(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              meldType_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              provider_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              lastTile_ = input.readUInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                rootTile_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              rootTile_.add(input.readUInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                rootTile_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                rootTile_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          rootTile_ = java.util.Collections.unmodifiableList(rootTile_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Meld_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Meld_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder.class);
    }

    public static com.google.protobuf.Parser<Meld> PARSER =
        new com.google.protobuf.AbstractParser<Meld>() {
      public Meld parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Meld(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Meld> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 meldType = 1;
    public static final int MELDTYPE_FIELD_NUMBER = 1;
    private int meldType_;
    /**
     * <code>required uint32 meldType = 1;</code>
     *
     * <pre>
     *类型
     * </pre>
     */
    public boolean hasMeldType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 meldType = 1;</code>
     *
     * <pre>
     *类型
     * </pre>
     */
    public int getMeldType() {
      return meldType_;
    }

    // required uint32 provider = 2;
    public static final int PROVIDER_FIELD_NUMBER = 2;
    private int provider_;
    /**
     * <code>required uint32 provider = 2;</code>
     *
     * <pre>
     *打出最后一张牌的玩家座位号
     * </pre>
     */
    public boolean hasProvider() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 provider = 2;</code>
     *
     * <pre>
     *打出最后一张牌的玩家座位号
     * </pre>
     */
    public int getProvider() {
      return provider_;
    }

    // required uint32 lastTile = 3;
    public static final int LASTTILE_FIELD_NUMBER = 3;
    private int lastTile_;
    /**
     * <code>required uint32 lastTile = 3;</code>
     *
     * <pre>
     *最后一张牌
     * </pre>
     */
    public boolean hasLastTile() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 lastTile = 3;</code>
     *
     * <pre>
     *最后一张牌
     * </pre>
     */
    public int getLastTile() {
      return lastTile_;
    }

    // repeated uint32 rootTile = 4;
    public static final int ROOTTILE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> rootTile_;
    /**
     * <code>repeated uint32 rootTile = 4;</code>
     *
     * <pre>
     *手中牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRootTileList() {
      return rootTile_;
    }
    /**
     * <code>repeated uint32 rootTile = 4;</code>
     *
     * <pre>
     *手中牌
     * </pre>
     */
    public int getRootTileCount() {
      return rootTile_.size();
    }
    /**
     * <code>repeated uint32 rootTile = 4;</code>
     *
     * <pre>
     *手中牌
     * </pre>
     */
    public int getRootTile(int index) {
      return rootTile_.get(index);
    }

    private void initFields() {
      meldType_ = 0;
      provider_ = 0;
      lastTile_ = 0;
      rootTile_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasMeldType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasProvider()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLastTile()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, meldType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, provider_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, lastTile_);
      }
      for (int i = 0; i < rootTile_.size(); i++) {
        output.writeUInt32(4, rootTile_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, meldType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, provider_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, lastTile_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < rootTile_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(rootTile_.get(i));
        }
        size += dataSize;
        size += 1 * getRootTileList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.Meld}
     *
     * <pre>
     * 一副牌，吃碰杠
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Meld_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Meld_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        meldType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        provider_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        lastTile_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        rootTile_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Meld_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.meldType_ = meldType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.provider_ = provider_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.lastTile_ = lastTile_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          rootTile_ = java.util.Collections.unmodifiableList(rootTile_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.rootTile_ = rootTile_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.getDefaultInstance()) return this;
        if (other.hasMeldType()) {
          setMeldType(other.getMeldType());
        }
        if (other.hasProvider()) {
          setProvider(other.getProvider());
        }
        if (other.hasLastTile()) {
          setLastTile(other.getLastTile());
        }
        if (!other.rootTile_.isEmpty()) {
          if (rootTile_.isEmpty()) {
            rootTile_ = other.rootTile_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureRootTileIsMutable();
            rootTile_.addAll(other.rootTile_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMeldType()) {
          
          return false;
        }
        if (!hasProvider()) {
          
          return false;
        }
        if (!hasLastTile()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 meldType = 1;
      private int meldType_ ;
      /**
       * <code>required uint32 meldType = 1;</code>
       *
       * <pre>
       *类型
       * </pre>
       */
      public boolean hasMeldType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 meldType = 1;</code>
       *
       * <pre>
       *类型
       * </pre>
       */
      public int getMeldType() {
        return meldType_;
      }
      /**
       * <code>required uint32 meldType = 1;</code>
       *
       * <pre>
       *类型
       * </pre>
       */
      public Builder setMeldType(int value) {
        bitField0_ |= 0x00000001;
        meldType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 meldType = 1;</code>
       *
       * <pre>
       *类型
       * </pre>
       */
      public Builder clearMeldType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        meldType_ = 0;
        onChanged();
        return this;
      }

      // required uint32 provider = 2;
      private int provider_ ;
      /**
       * <code>required uint32 provider = 2;</code>
       *
       * <pre>
       *打出最后一张牌的玩家座位号
       * </pre>
       */
      public boolean hasProvider() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 provider = 2;</code>
       *
       * <pre>
       *打出最后一张牌的玩家座位号
       * </pre>
       */
      public int getProvider() {
        return provider_;
      }
      /**
       * <code>required uint32 provider = 2;</code>
       *
       * <pre>
       *打出最后一张牌的玩家座位号
       * </pre>
       */
      public Builder setProvider(int value) {
        bitField0_ |= 0x00000002;
        provider_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 provider = 2;</code>
       *
       * <pre>
       *打出最后一张牌的玩家座位号
       * </pre>
       */
      public Builder clearProvider() {
        bitField0_ = (bitField0_ & ~0x00000002);
        provider_ = 0;
        onChanged();
        return this;
      }

      // required uint32 lastTile = 3;
      private int lastTile_ ;
      /**
       * <code>required uint32 lastTile = 3;</code>
       *
       * <pre>
       *最后一张牌
       * </pre>
       */
      public boolean hasLastTile() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 lastTile = 3;</code>
       *
       * <pre>
       *最后一张牌
       * </pre>
       */
      public int getLastTile() {
        return lastTile_;
      }
      /**
       * <code>required uint32 lastTile = 3;</code>
       *
       * <pre>
       *最后一张牌
       * </pre>
       */
      public Builder setLastTile(int value) {
        bitField0_ |= 0x00000004;
        lastTile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 lastTile = 3;</code>
       *
       * <pre>
       *最后一张牌
       * </pre>
       */
      public Builder clearLastTile() {
        bitField0_ = (bitField0_ & ~0x00000004);
        lastTile_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 rootTile = 4;
      private java.util.List<java.lang.Integer> rootTile_ = java.util.Collections.emptyList();
      private void ensureRootTileIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          rootTile_ = new java.util.ArrayList<java.lang.Integer>(rootTile_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated uint32 rootTile = 4;</code>
       *
       * <pre>
       *手中牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRootTileList() {
        return java.util.Collections.unmodifiableList(rootTile_);
      }
      /**
       * <code>repeated uint32 rootTile = 4;</code>
       *
       * <pre>
       *手中牌
       * </pre>
       */
      public int getRootTileCount() {
        return rootTile_.size();
      }
      /**
       * <code>repeated uint32 rootTile = 4;</code>
       *
       * <pre>
       *手中牌
       * </pre>
       */
      public int getRootTile(int index) {
        return rootTile_.get(index);
      }
      /**
       * <code>repeated uint32 rootTile = 4;</code>
       *
       * <pre>
       *手中牌
       * </pre>
       */
      public Builder setRootTile(
          int index, int value) {
        ensureRootTileIsMutable();
        rootTile_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 rootTile = 4;</code>
       *
       * <pre>
       *手中牌
       * </pre>
       */
      public Builder addRootTile(int value) {
        ensureRootTileIsMutable();
        rootTile_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 rootTile = 4;</code>
       *
       * <pre>
       *手中牌
       * </pre>
       */
      public Builder addAllRootTile(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRootTileIsMutable();
        super.addAll(values, rootTile_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 rootTile = 4;</code>
       *
       * <pre>
       *手中牌
       * </pre>
       */
      public Builder clearRootTile() {
        rootTile_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.Meld)
    }

    static {
      defaultInstance = new Meld(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.Meld)
  }

  public interface SetOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 seat = 1;
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    boolean hasSeat();
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    int getSeat();

    // required uint32 winType = 2;
    /**
     * <code>required uint32 winType = 2;</code>
     *
     * <pre>
     *和牌方式，游戏自己定义
     * </pre>
     */
    boolean hasWinType();
    /**
     * <code>required uint32 winType = 2;</code>
     *
     * <pre>
     *和牌方式，游戏自己定义
     * </pre>
     */
    int getWinType();

    // repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
     *
     * <pre>
     *牌
     * </pre>
     */
    java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld> 
        getMeldsList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
     *
     * <pre>
     *牌
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld getMelds(int index);
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
     *
     * <pre>
     *牌
     * </pre>
     */
    int getMeldsCount();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
     *
     * <pre>
     *牌
     * </pre>
     */
    java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder> 
        getMeldsOrBuilderList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
     *
     * <pre>
     *牌
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder getMeldsOrBuilder(
        int index);

    // required uint32 winUnits = 4;
    /**
     * <code>required uint32 winUnits = 4;</code>
     *
     * <pre>
     *总番数
     * </pre>
     */
    boolean hasWinUnits();
    /**
     * <code>required uint32 winUnits = 4;</code>
     *
     * <pre>
     *总番数
     * </pre>
     */
    int getWinUnits();

    // repeated uint32 fanTypes = 5;
    /**
     * <code>repeated uint32 fanTypes = 5;</code>
     *
     * <pre>
     *番型
     * </pre>
     */
    java.util.List<java.lang.Integer> getFanTypesList();
    /**
     * <code>repeated uint32 fanTypes = 5;</code>
     *
     * <pre>
     *番型
     * </pre>
     */
    int getFanTypesCount();
    /**
     * <code>repeated uint32 fanTypes = 5;</code>
     *
     * <pre>
     *番型
     * </pre>
     */
    int getFanTypes(int index);

    // optional uint32 params = 6;
    /**
     * <code>optional uint32 params = 6;</code>
     *
     * <pre>
     *其他参数，抢杠，海底捞，绝张等
     * </pre>
     */
    boolean hasParams();
    /**
     * <code>optional uint32 params = 6;</code>
     *
     * <pre>
     *其他参数，抢杠，海底捞，绝张等
     * </pre>
     */
    int getParams();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.Set}
   *
   * <pre>
   * 和牌时的牌
   * </pre>
   */
  public static final class Set extends
      com.google.protobuf.GeneratedMessage
      implements SetOrBuilder {
    // Use Set.newBuilder() to construct.
    private Set(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Set(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Set defaultInstance;
    public static Set getDefaultInstance() {
      return defaultInstance;
    }

    public Set getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Set(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seat_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              winType_ = input.readUInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                melds_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld>();
                mutable_bitField0_ |= 0x00000004;
              }
              melds_.add(input.readMessage(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              winUnits_ = input.readUInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                fanTypes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              fanTypes_.add(input.readUInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                fanTypes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                fanTypes_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              params_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          melds_ = java.util.Collections.unmodifiableList(melds_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          fanTypes_ = java.util.Collections.unmodifiableList(fanTypes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Set_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Set_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set.Builder.class);
    }

    public static com.google.protobuf.Parser<Set> PARSER =
        new com.google.protobuf.AbstractParser<Set>() {
      public Set parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Set(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Set> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private int seat_;
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public boolean hasSeat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public int getSeat() {
      return seat_;
    }

    // required uint32 winType = 2;
    public static final int WINTYPE_FIELD_NUMBER = 2;
    private int winType_;
    /**
     * <code>required uint32 winType = 2;</code>
     *
     * <pre>
     *和牌方式，游戏自己定义
     * </pre>
     */
    public boolean hasWinType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 winType = 2;</code>
     *
     * <pre>
     *和牌方式，游戏自己定义
     * </pre>
     */
    public int getWinType() {
      return winType_;
    }

    // repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;
    public static final int MELDS_FIELD_NUMBER = 3;
    private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld> melds_;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
     *
     * <pre>
     *牌
     * </pre>
     */
    public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld> getMeldsList() {
      return melds_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
     *
     * <pre>
     *牌
     * </pre>
     */
    public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder> 
        getMeldsOrBuilderList() {
      return melds_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
     *
     * <pre>
     *牌
     * </pre>
     */
    public int getMeldsCount() {
      return melds_.size();
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
     *
     * <pre>
     *牌
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld getMelds(int index) {
      return melds_.get(index);
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
     *
     * <pre>
     *牌
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder getMeldsOrBuilder(
        int index) {
      return melds_.get(index);
    }

    // required uint32 winUnits = 4;
    public static final int WINUNITS_FIELD_NUMBER = 4;
    private int winUnits_;
    /**
     * <code>required uint32 winUnits = 4;</code>
     *
     * <pre>
     *总番数
     * </pre>
     */
    public boolean hasWinUnits() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 winUnits = 4;</code>
     *
     * <pre>
     *总番数
     * </pre>
     */
    public int getWinUnits() {
      return winUnits_;
    }

    // repeated uint32 fanTypes = 5;
    public static final int FANTYPES_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> fanTypes_;
    /**
     * <code>repeated uint32 fanTypes = 5;</code>
     *
     * <pre>
     *番型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getFanTypesList() {
      return fanTypes_;
    }
    /**
     * <code>repeated uint32 fanTypes = 5;</code>
     *
     * <pre>
     *番型
     * </pre>
     */
    public int getFanTypesCount() {
      return fanTypes_.size();
    }
    /**
     * <code>repeated uint32 fanTypes = 5;</code>
     *
     * <pre>
     *番型
     * </pre>
     */
    public int getFanTypes(int index) {
      return fanTypes_.get(index);
    }

    // optional uint32 params = 6;
    public static final int PARAMS_FIELD_NUMBER = 6;
    private int params_;
    /**
     * <code>optional uint32 params = 6;</code>
     *
     * <pre>
     *其他参数，抢杠，海底捞，绝张等
     * </pre>
     */
    public boolean hasParams() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 params = 6;</code>
     *
     * <pre>
     *其他参数，抢杠，海底捞，绝张等
     * </pre>
     */
    public int getParams() {
      return params_;
    }

    private void initFields() {
      seat_ = 0;
      winType_ = 0;
      melds_ = java.util.Collections.emptyList();
      winUnits_ = 0;
      fanTypes_ = java.util.Collections.emptyList();
      params_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWinType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWinUnits()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getMeldsCount(); i++) {
        if (!getMelds(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, winType_);
      }
      for (int i = 0; i < melds_.size(); i++) {
        output.writeMessage(3, melds_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(4, winUnits_);
      }
      for (int i = 0; i < fanTypes_.size(); i++) {
        output.writeUInt32(5, fanTypes_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(6, params_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, winType_);
      }
      for (int i = 0; i < melds_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, melds_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, winUnits_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < fanTypes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(fanTypes_.get(i));
        }
        size += dataSize;
        size += 1 * getFanTypesList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, params_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.Set}
     *
     * <pre>
     * 和牌时的牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Set_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Set_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMeldsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        winType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (meldsBuilder_ == null) {
          melds_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          meldsBuilder_.clear();
        }
        winUnits_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        fanTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        params_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Set_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seat_ = seat_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.winType_ = winType_;
        if (meldsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            melds_ = java.util.Collections.unmodifiableList(melds_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.melds_ = melds_;
        } else {
          result.melds_ = meldsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.winUnits_ = winUnits_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          fanTypes_ = java.util.Collections.unmodifiableList(fanTypes_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.fanTypes_ = fanTypes_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.params_ = params_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasWinType()) {
          setWinType(other.getWinType());
        }
        if (meldsBuilder_ == null) {
          if (!other.melds_.isEmpty()) {
            if (melds_.isEmpty()) {
              melds_ = other.melds_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureMeldsIsMutable();
              melds_.addAll(other.melds_);
            }
            onChanged();
          }
        } else {
          if (!other.melds_.isEmpty()) {
            if (meldsBuilder_.isEmpty()) {
              meldsBuilder_.dispose();
              meldsBuilder_ = null;
              melds_ = other.melds_;
              bitField0_ = (bitField0_ & ~0x00000004);
              meldsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMeldsFieldBuilder() : null;
            } else {
              meldsBuilder_.addAllMessages(other.melds_);
            }
          }
        }
        if (other.hasWinUnits()) {
          setWinUnits(other.getWinUnits());
        }
        if (!other.fanTypes_.isEmpty()) {
          if (fanTypes_.isEmpty()) {
            fanTypes_ = other.fanTypes_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureFanTypesIsMutable();
            fanTypes_.addAll(other.fanTypes_);
          }
          onChanged();
        }
        if (other.hasParams()) {
          setParams(other.getParams());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSeat()) {
          
          return false;
        }
        if (!hasWinType()) {
          
          return false;
        }
        if (!hasWinUnits()) {
          
          return false;
        }
        for (int i = 0; i < getMeldsCount(); i++) {
          if (!getMelds(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Set) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 seat = 1;
      private int seat_ ;
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public int getSeat() {
        return seat_;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder setSeat(int value) {
        bitField0_ |= 0x00000001;
        seat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder clearSeat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seat_ = 0;
        onChanged();
        return this;
      }

      // required uint32 winType = 2;
      private int winType_ ;
      /**
       * <code>required uint32 winType = 2;</code>
       *
       * <pre>
       *和牌方式，游戏自己定义
       * </pre>
       */
      public boolean hasWinType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 winType = 2;</code>
       *
       * <pre>
       *和牌方式，游戏自己定义
       * </pre>
       */
      public int getWinType() {
        return winType_;
      }
      /**
       * <code>required uint32 winType = 2;</code>
       *
       * <pre>
       *和牌方式，游戏自己定义
       * </pre>
       */
      public Builder setWinType(int value) {
        bitField0_ |= 0x00000002;
        winType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 winType = 2;</code>
       *
       * <pre>
       *和牌方式，游戏自己定义
       * </pre>
       */
      public Builder clearWinType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        winType_ = 0;
        onChanged();
        return this;
      }

      // repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;
      private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld> melds_ =
        java.util.Collections.emptyList();
      private void ensureMeldsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          melds_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld>(melds_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder> meldsBuilder_;

      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld> getMeldsList() {
        if (meldsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(melds_);
        } else {
          return meldsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public int getMeldsCount() {
        if (meldsBuilder_ == null) {
          return melds_.size();
        } else {
          return meldsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld getMelds(int index) {
        if (meldsBuilder_ == null) {
          return melds_.get(index);
        } else {
          return meldsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public Builder setMelds(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld value) {
        if (meldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMeldsIsMutable();
          melds_.set(index, value);
          onChanged();
        } else {
          meldsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public Builder setMelds(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder builderForValue) {
        if (meldsBuilder_ == null) {
          ensureMeldsIsMutable();
          melds_.set(index, builderForValue.build());
          onChanged();
        } else {
          meldsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public Builder addMelds(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld value) {
        if (meldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMeldsIsMutable();
          melds_.add(value);
          onChanged();
        } else {
          meldsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public Builder addMelds(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld value) {
        if (meldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMeldsIsMutable();
          melds_.add(index, value);
          onChanged();
        } else {
          meldsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public Builder addMelds(
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder builderForValue) {
        if (meldsBuilder_ == null) {
          ensureMeldsIsMutable();
          melds_.add(builderForValue.build());
          onChanged();
        } else {
          meldsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public Builder addMelds(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder builderForValue) {
        if (meldsBuilder_ == null) {
          ensureMeldsIsMutable();
          melds_.add(index, builderForValue.build());
          onChanged();
        } else {
          meldsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public Builder addAllMelds(
          java.lang.Iterable<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld> values) {
        if (meldsBuilder_ == null) {
          ensureMeldsIsMutable();
          super.addAll(values, melds_);
          onChanged();
        } else {
          meldsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public Builder clearMelds() {
        if (meldsBuilder_ == null) {
          melds_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          meldsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public Builder removeMelds(int index) {
        if (meldsBuilder_ == null) {
          ensureMeldsIsMutable();
          melds_.remove(index);
          onChanged();
        } else {
          meldsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder getMeldsBuilder(
          int index) {
        return getMeldsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder getMeldsOrBuilder(
          int index) {
        if (meldsBuilder_ == null) {
          return melds_.get(index);  } else {
          return meldsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder> 
           getMeldsOrBuilderList() {
        if (meldsBuilder_ != null) {
          return meldsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(melds_);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder addMeldsBuilder() {
        return getMeldsFieldBuilder().addBuilder(
            com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder addMeldsBuilder(
          int index) {
        return getMeldsFieldBuilder().addBuilder(
            index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld melds = 3;</code>
       *
       * <pre>
       *牌
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder> 
           getMeldsBuilderList() {
        return getMeldsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder> 
          getMeldsFieldBuilder() {
        if (meldsBuilder_ == null) {
          meldsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder>(
                  melds_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          melds_ = null;
        }
        return meldsBuilder_;
      }

      // required uint32 winUnits = 4;
      private int winUnits_ ;
      /**
       * <code>required uint32 winUnits = 4;</code>
       *
       * <pre>
       *总番数
       * </pre>
       */
      public boolean hasWinUnits() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 winUnits = 4;</code>
       *
       * <pre>
       *总番数
       * </pre>
       */
      public int getWinUnits() {
        return winUnits_;
      }
      /**
       * <code>required uint32 winUnits = 4;</code>
       *
       * <pre>
       *总番数
       * </pre>
       */
      public Builder setWinUnits(int value) {
        bitField0_ |= 0x00000008;
        winUnits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 winUnits = 4;</code>
       *
       * <pre>
       *总番数
       * </pre>
       */
      public Builder clearWinUnits() {
        bitField0_ = (bitField0_ & ~0x00000008);
        winUnits_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 fanTypes = 5;
      private java.util.List<java.lang.Integer> fanTypes_ = java.util.Collections.emptyList();
      private void ensureFanTypesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          fanTypes_ = new java.util.ArrayList<java.lang.Integer>(fanTypes_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated uint32 fanTypes = 5;</code>
       *
       * <pre>
       *番型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getFanTypesList() {
        return java.util.Collections.unmodifiableList(fanTypes_);
      }
      /**
       * <code>repeated uint32 fanTypes = 5;</code>
       *
       * <pre>
       *番型
       * </pre>
       */
      public int getFanTypesCount() {
        return fanTypes_.size();
      }
      /**
       * <code>repeated uint32 fanTypes = 5;</code>
       *
       * <pre>
       *番型
       * </pre>
       */
      public int getFanTypes(int index) {
        return fanTypes_.get(index);
      }
      /**
       * <code>repeated uint32 fanTypes = 5;</code>
       *
       * <pre>
       *番型
       * </pre>
       */
      public Builder setFanTypes(
          int index, int value) {
        ensureFanTypesIsMutable();
        fanTypes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 fanTypes = 5;</code>
       *
       * <pre>
       *番型
       * </pre>
       */
      public Builder addFanTypes(int value) {
        ensureFanTypesIsMutable();
        fanTypes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 fanTypes = 5;</code>
       *
       * <pre>
       *番型
       * </pre>
       */
      public Builder addAllFanTypes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFanTypesIsMutable();
        super.addAll(values, fanTypes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 fanTypes = 5;</code>
       *
       * <pre>
       *番型
       * </pre>
       */
      public Builder clearFanTypes() {
        fanTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // optional uint32 params = 6;
      private int params_ ;
      /**
       * <code>optional uint32 params = 6;</code>
       *
       * <pre>
       *其他参数，抢杠，海底捞，绝张等
       * </pre>
       */
      public boolean hasParams() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 params = 6;</code>
       *
       * <pre>
       *其他参数，抢杠，海底捞，绝张等
       * </pre>
       */
      public int getParams() {
        return params_;
      }
      /**
       * <code>optional uint32 params = 6;</code>
       *
       * <pre>
       *其他参数，抢杠，海底捞，绝张等
       * </pre>
       */
      public Builder setParams(int value) {
        bitField0_ |= 0x00000020;
        params_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 params = 6;</code>
       *
       * <pre>
       *其他参数，抢杠，海底捞，绝张等
       * </pre>
       */
      public Builder clearParams() {
        bitField0_ = (bitField0_ & ~0x00000020);
        params_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.Set)
    }

    static {
      defaultInstance = new Set(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.Set)
  }

  public interface PlayerOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 id = 1;
    /**
     * <code>required uint64 id = 1;</code>
     *
     * <pre>
     *id
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint64 id = 1;</code>
     *
     * <pre>
     *id
     * </pre>
     */
    long getId();

    // required string name = 2;
    /**
     * <code>required string name = 2;</code>
     *
     * <pre>
     *名字
     * </pre>
     */
    boolean hasName();
    /**
     * <code>required string name = 2;</code>
     *
     * <pre>
     *名字
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 2;</code>
     *
     * <pre>
     *名字
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // required uint32 score = 3;
    /**
     * <code>required uint32 score = 3;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    boolean hasScore();
    /**
     * <code>required uint32 score = 3;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    int getScore();

    // optional uint32 seat = 4;
    /**
     * <code>optional uint32 seat = 4;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    boolean hasSeat();
    /**
     * <code>optional uint32 seat = 4;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    int getSeat();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.Player}
   *
   * <pre>
   * 玩家信息
   * </pre>
   */
  public static final class Player extends
      com.google.protobuf.GeneratedMessage
      implements PlayerOrBuilder {
    // Use Player.newBuilder() to construct.
    private Player(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Player(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Player defaultInstance;
    public static Player getDefaultInstance() {
      return defaultInstance;
    }

    public Player getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Player(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              name_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              score_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              seat_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Player_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Player_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder.class);
    }

    public static com.google.protobuf.Parser<Player> PARSER =
        new com.google.protobuf.AbstractParser<Player>() {
      public Player parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Player(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Player> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private long id_;
    /**
     * <code>required uint64 id = 1;</code>
     *
     * <pre>
     *id
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 id = 1;</code>
     *
     * <pre>
     *id
     * </pre>
     */
    public long getId() {
      return id_;
    }

    // required string name = 2;
    public static final int NAME_FIELD_NUMBER = 2;
    private java.lang.Object name_;
    /**
     * <code>required string name = 2;</code>
     *
     * <pre>
     *名字
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string name = 2;</code>
     *
     * <pre>
     *名字
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 2;</code>
     *
     * <pre>
     *名字
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required uint32 score = 3;
    public static final int SCORE_FIELD_NUMBER = 3;
    private int score_;
    /**
     * <code>required uint32 score = 3;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 score = 3;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public int getScore() {
      return score_;
    }

    // optional uint32 seat = 4;
    public static final int SEAT_FIELD_NUMBER = 4;
    private int seat_;
    /**
     * <code>optional uint32 seat = 4;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public boolean hasSeat() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 seat = 4;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public int getSeat() {
      return seat_;
    }

    private void initFields() {
      id_ = 0L;
      name_ = "";
      score_ = 0;
      seat_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, score_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, seat_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, score_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, seat_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.Player}
     *
     * <pre>
     * 玩家信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Player_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Player_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        seat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_Player_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.seat_ = seat_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000002;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasName()) {
          
          return false;
        }
        if (!hasScore()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 id = 1;
      private long id_ ;
      /**
       * <code>required uint64 id = 1;</code>
       *
       * <pre>
       *id
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 id = 1;</code>
       *
       * <pre>
       *id
       * </pre>
       */
      public long getId() {
        return id_;
      }
      /**
       * <code>required uint64 id = 1;</code>
       *
       * <pre>
       *id
       * </pre>
       */
      public Builder setId(long value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 id = 1;</code>
       *
       * <pre>
       *id
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0L;
        onChanged();
        return this;
      }

      // required string name = 2;
      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 2;</code>
       *
       * <pre>
       *名字
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string name = 2;</code>
       *
       * <pre>
       *名字
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 2;</code>
       *
       * <pre>
       *名字
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 2;</code>
       *
       * <pre>
       *名字
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 2;</code>
       *
       * <pre>
       *名字
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 2;</code>
       *
       * <pre>
       *名字
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }

      // required uint32 score = 3;
      private int score_ ;
      /**
       * <code>required uint32 score = 3;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 score = 3;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <code>required uint32 score = 3;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x00000004;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 score = 3;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000004);
        score_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 seat = 4;
      private int seat_ ;
      /**
       * <code>optional uint32 seat = 4;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 seat = 4;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public int getSeat() {
        return seat_;
      }
      /**
       * <code>optional uint32 seat = 4;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder setSeat(int value) {
        bitField0_ |= 0x00000008;
        seat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 seat = 4;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder clearSeat() {
        bitField0_ = (bitField0_ & ~0x00000008);
        seat_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.Player)
    }

    static {
      defaultInstance = new Player(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.Player)
  }

  public interface CurrentTileInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 seat = 1;
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    boolean hasSeat();
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    int getSeat();

    // required uint32 inhandAmount = 2;
    /**
     * <code>required uint32 inhandAmount = 2;</code>
     *
     * <pre>
     *手中牌数量
     * </pre>
     */
    boolean hasInhandAmount();
    /**
     * <code>required uint32 inhandAmount = 2;</code>
     *
     * <pre>
     *手中牌数量
     * </pre>
     */
    int getInhandAmount();

    // repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
     *
     * <pre>
     *吃碰杠
     * </pre>
     */
    java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld> 
        getShowTilesList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
     *
     * <pre>
     *吃碰杠
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld getShowTiles(int index);
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
     *
     * <pre>
     *吃碰杠
     * </pre>
     */
    int getShowTilesCount();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
     *
     * <pre>
     *吃碰杠
     * </pre>
     */
    java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder> 
        getShowTilesOrBuilderList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
     *
     * <pre>
     *吃碰杠
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder getShowTilesOrBuilder(
        int index);

    // repeated uint32 discardedTiles = 4;
    /**
     * <code>repeated uint32 discardedTiles = 4;</code>
     *
     * <pre>
     *打出的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getDiscardedTilesList();
    /**
     * <code>repeated uint32 discardedTiles = 4;</code>
     *
     * <pre>
     *打出的牌
     * </pre>
     */
    int getDiscardedTilesCount();
    /**
     * <code>repeated uint32 discardedTiles = 4;</code>
     *
     * <pre>
     *打出的牌
     * </pre>
     */
    int getDiscardedTiles(int index);

    // repeated uint32 inhandTiles = 5;
    /**
     * <code>repeated uint32 inhandTiles = 5;</code>
     *
     * <pre>
     *手中的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getInhandTilesList();
    /**
     * <code>repeated uint32 inhandTiles = 5;</code>
     *
     * <pre>
     *手中的牌
     * </pre>
     */
    int getInhandTilesCount();
    /**
     * <code>repeated uint32 inhandTiles = 5;</code>
     *
     * <pre>
     *手中的牌
     * </pre>
     */
    int getInhandTiles(int index);

    // optional uint32 lastTile = 6;
    /**
     * <code>optional uint32 lastTile = 6;</code>
     */
    boolean hasLastTile();
    /**
     * <code>optional uint32 lastTile = 6;</code>
     */
    int getLastTile();

    // optional uint32 flowers = 7;
    /**
     * <code>optional uint32 flowers = 7;</code>
     *
     * <pre>
     *花牌
     * </pre>
     */
    boolean hasFlowers();
    /**
     * <code>optional uint32 flowers = 7;</code>
     *
     * <pre>
     *花牌
     * </pre>
     */
    int getFlowers();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.CurrentTileInfo}
   *
   * <pre>
   * 历史消息
   * </pre>
   */
  public static final class CurrentTileInfo extends
      com.google.protobuf.GeneratedMessage
      implements CurrentTileInfoOrBuilder {
    // Use CurrentTileInfo.newBuilder() to construct.
    private CurrentTileInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CurrentTileInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CurrentTileInfo defaultInstance;
    public static CurrentTileInfo getDefaultInstance() {
      return defaultInstance;
    }

    public CurrentTileInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CurrentTileInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seat_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              inhandAmount_ = input.readUInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                showTiles_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld>();
                mutable_bitField0_ |= 0x00000004;
              }
              showTiles_.add(input.readMessage(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                discardedTiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              discardedTiles_.add(input.readUInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                discardedTiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                discardedTiles_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                inhandTiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              inhandTiles_.add(input.readUInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                inhandTiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                inhandTiles_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000004;
              lastTile_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000008;
              flowers_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          showTiles_ = java.util.Collections.unmodifiableList(showTiles_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          discardedTiles_ = java.util.Collections.unmodifiableList(discardedTiles_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          inhandTiles_ = java.util.Collections.unmodifiableList(inhandTiles_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CurrentTileInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CurrentTileInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<CurrentTileInfo> PARSER =
        new com.google.protobuf.AbstractParser<CurrentTileInfo>() {
      public CurrentTileInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CurrentTileInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CurrentTileInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private int seat_;
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public boolean hasSeat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public int getSeat() {
      return seat_;
    }

    // required uint32 inhandAmount = 2;
    public static final int INHANDAMOUNT_FIELD_NUMBER = 2;
    private int inhandAmount_;
    /**
     * <code>required uint32 inhandAmount = 2;</code>
     *
     * <pre>
     *手中牌数量
     * </pre>
     */
    public boolean hasInhandAmount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 inhandAmount = 2;</code>
     *
     * <pre>
     *手中牌数量
     * </pre>
     */
    public int getInhandAmount() {
      return inhandAmount_;
    }

    // repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;
    public static final int SHOWTILES_FIELD_NUMBER = 3;
    private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld> showTiles_;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
     *
     * <pre>
     *吃碰杠
     * </pre>
     */
    public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld> getShowTilesList() {
      return showTiles_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
     *
     * <pre>
     *吃碰杠
     * </pre>
     */
    public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder> 
        getShowTilesOrBuilderList() {
      return showTiles_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
     *
     * <pre>
     *吃碰杠
     * </pre>
     */
    public int getShowTilesCount() {
      return showTiles_.size();
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
     *
     * <pre>
     *吃碰杠
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld getShowTiles(int index) {
      return showTiles_.get(index);
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
     *
     * <pre>
     *吃碰杠
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder getShowTilesOrBuilder(
        int index) {
      return showTiles_.get(index);
    }

    // repeated uint32 discardedTiles = 4;
    public static final int DISCARDEDTILES_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> discardedTiles_;
    /**
     * <code>repeated uint32 discardedTiles = 4;</code>
     *
     * <pre>
     *打出的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDiscardedTilesList() {
      return discardedTiles_;
    }
    /**
     * <code>repeated uint32 discardedTiles = 4;</code>
     *
     * <pre>
     *打出的牌
     * </pre>
     */
    public int getDiscardedTilesCount() {
      return discardedTiles_.size();
    }
    /**
     * <code>repeated uint32 discardedTiles = 4;</code>
     *
     * <pre>
     *打出的牌
     * </pre>
     */
    public int getDiscardedTiles(int index) {
      return discardedTiles_.get(index);
    }

    // repeated uint32 inhandTiles = 5;
    public static final int INHANDTILES_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> inhandTiles_;
    /**
     * <code>repeated uint32 inhandTiles = 5;</code>
     *
     * <pre>
     *手中的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getInhandTilesList() {
      return inhandTiles_;
    }
    /**
     * <code>repeated uint32 inhandTiles = 5;</code>
     *
     * <pre>
     *手中的牌
     * </pre>
     */
    public int getInhandTilesCount() {
      return inhandTiles_.size();
    }
    /**
     * <code>repeated uint32 inhandTiles = 5;</code>
     *
     * <pre>
     *手中的牌
     * </pre>
     */
    public int getInhandTiles(int index) {
      return inhandTiles_.get(index);
    }

    // optional uint32 lastTile = 6;
    public static final int LASTTILE_FIELD_NUMBER = 6;
    private int lastTile_;
    /**
     * <code>optional uint32 lastTile = 6;</code>
     */
    public boolean hasLastTile() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 lastTile = 6;</code>
     */
    public int getLastTile() {
      return lastTile_;
    }

    // optional uint32 flowers = 7;
    public static final int FLOWERS_FIELD_NUMBER = 7;
    private int flowers_;
    /**
     * <code>optional uint32 flowers = 7;</code>
     *
     * <pre>
     *花牌
     * </pre>
     */
    public boolean hasFlowers() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 flowers = 7;</code>
     *
     * <pre>
     *花牌
     * </pre>
     */
    public int getFlowers() {
      return flowers_;
    }

    private void initFields() {
      seat_ = 0;
      inhandAmount_ = 0;
      showTiles_ = java.util.Collections.emptyList();
      discardedTiles_ = java.util.Collections.emptyList();
      inhandTiles_ = java.util.Collections.emptyList();
      lastTile_ = 0;
      flowers_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInhandAmount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getShowTilesCount(); i++) {
        if (!getShowTiles(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, inhandAmount_);
      }
      for (int i = 0; i < showTiles_.size(); i++) {
        output.writeMessage(3, showTiles_.get(i));
      }
      for (int i = 0; i < discardedTiles_.size(); i++) {
        output.writeUInt32(4, discardedTiles_.get(i));
      }
      for (int i = 0; i < inhandTiles_.size(); i++) {
        output.writeUInt32(5, inhandTiles_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(6, lastTile_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(7, flowers_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, inhandAmount_);
      }
      for (int i = 0; i < showTiles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, showTiles_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < discardedTiles_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(discardedTiles_.get(i));
        }
        size += dataSize;
        size += 1 * getDiscardedTilesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < inhandTiles_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(inhandTiles_.get(i));
        }
        size += dataSize;
        size += 1 * getInhandTilesList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, lastTile_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, flowers_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.CurrentTileInfo}
     *
     * <pre>
     * 历史消息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CurrentTileInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CurrentTileInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getShowTilesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        inhandAmount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (showTilesBuilder_ == null) {
          showTiles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          showTilesBuilder_.clear();
        }
        discardedTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        inhandTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        lastTile_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        flowers_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CurrentTileInfo_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seat_ = seat_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.inhandAmount_ = inhandAmount_;
        if (showTilesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            showTiles_ = java.util.Collections.unmodifiableList(showTiles_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.showTiles_ = showTiles_;
        } else {
          result.showTiles_ = showTilesBuilder_.build();
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          discardedTiles_ = java.util.Collections.unmodifiableList(discardedTiles_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.discardedTiles_ = discardedTiles_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          inhandTiles_ = java.util.Collections.unmodifiableList(inhandTiles_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.inhandTiles_ = inhandTiles_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.lastTile_ = lastTile_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.flowers_ = flowers_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasInhandAmount()) {
          setInhandAmount(other.getInhandAmount());
        }
        if (showTilesBuilder_ == null) {
          if (!other.showTiles_.isEmpty()) {
            if (showTiles_.isEmpty()) {
              showTiles_ = other.showTiles_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureShowTilesIsMutable();
              showTiles_.addAll(other.showTiles_);
            }
            onChanged();
          }
        } else {
          if (!other.showTiles_.isEmpty()) {
            if (showTilesBuilder_.isEmpty()) {
              showTilesBuilder_.dispose();
              showTilesBuilder_ = null;
              showTiles_ = other.showTiles_;
              bitField0_ = (bitField0_ & ~0x00000004);
              showTilesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getShowTilesFieldBuilder() : null;
            } else {
              showTilesBuilder_.addAllMessages(other.showTiles_);
            }
          }
        }
        if (!other.discardedTiles_.isEmpty()) {
          if (discardedTiles_.isEmpty()) {
            discardedTiles_ = other.discardedTiles_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureDiscardedTilesIsMutable();
            discardedTiles_.addAll(other.discardedTiles_);
          }
          onChanged();
        }
        if (!other.inhandTiles_.isEmpty()) {
          if (inhandTiles_.isEmpty()) {
            inhandTiles_ = other.inhandTiles_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureInhandTilesIsMutable();
            inhandTiles_.addAll(other.inhandTiles_);
          }
          onChanged();
        }
        if (other.hasLastTile()) {
          setLastTile(other.getLastTile());
        }
        if (other.hasFlowers()) {
          setFlowers(other.getFlowers());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSeat()) {
          
          return false;
        }
        if (!hasInhandAmount()) {
          
          return false;
        }
        for (int i = 0; i < getShowTilesCount(); i++) {
          if (!getShowTiles(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 seat = 1;
      private int seat_ ;
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public int getSeat() {
        return seat_;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder setSeat(int value) {
        bitField0_ |= 0x00000001;
        seat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder clearSeat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seat_ = 0;
        onChanged();
        return this;
      }

      // required uint32 inhandAmount = 2;
      private int inhandAmount_ ;
      /**
       * <code>required uint32 inhandAmount = 2;</code>
       *
       * <pre>
       *手中牌数量
       * </pre>
       */
      public boolean hasInhandAmount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 inhandAmount = 2;</code>
       *
       * <pre>
       *手中牌数量
       * </pre>
       */
      public int getInhandAmount() {
        return inhandAmount_;
      }
      /**
       * <code>required uint32 inhandAmount = 2;</code>
       *
       * <pre>
       *手中牌数量
       * </pre>
       */
      public Builder setInhandAmount(int value) {
        bitField0_ |= 0x00000002;
        inhandAmount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 inhandAmount = 2;</code>
       *
       * <pre>
       *手中牌数量
       * </pre>
       */
      public Builder clearInhandAmount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        inhandAmount_ = 0;
        onChanged();
        return this;
      }

      // repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;
      private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld> showTiles_ =
        java.util.Collections.emptyList();
      private void ensureShowTilesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          showTiles_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld>(showTiles_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder> showTilesBuilder_;

      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld> getShowTilesList() {
        if (showTilesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(showTiles_);
        } else {
          return showTilesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public int getShowTilesCount() {
        if (showTilesBuilder_ == null) {
          return showTiles_.size();
        } else {
          return showTilesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld getShowTiles(int index) {
        if (showTilesBuilder_ == null) {
          return showTiles_.get(index);
        } else {
          return showTilesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public Builder setShowTiles(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld value) {
        if (showTilesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShowTilesIsMutable();
          showTiles_.set(index, value);
          onChanged();
        } else {
          showTilesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public Builder setShowTiles(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder builderForValue) {
        if (showTilesBuilder_ == null) {
          ensureShowTilesIsMutable();
          showTiles_.set(index, builderForValue.build());
          onChanged();
        } else {
          showTilesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public Builder addShowTiles(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld value) {
        if (showTilesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShowTilesIsMutable();
          showTiles_.add(value);
          onChanged();
        } else {
          showTilesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public Builder addShowTiles(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld value) {
        if (showTilesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShowTilesIsMutable();
          showTiles_.add(index, value);
          onChanged();
        } else {
          showTilesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public Builder addShowTiles(
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder builderForValue) {
        if (showTilesBuilder_ == null) {
          ensureShowTilesIsMutable();
          showTiles_.add(builderForValue.build());
          onChanged();
        } else {
          showTilesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public Builder addShowTiles(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder builderForValue) {
        if (showTilesBuilder_ == null) {
          ensureShowTilesIsMutable();
          showTiles_.add(index, builderForValue.build());
          onChanged();
        } else {
          showTilesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public Builder addAllShowTiles(
          java.lang.Iterable<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld> values) {
        if (showTilesBuilder_ == null) {
          ensureShowTilesIsMutable();
          super.addAll(values, showTiles_);
          onChanged();
        } else {
          showTilesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public Builder clearShowTiles() {
        if (showTilesBuilder_ == null) {
          showTiles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          showTilesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public Builder removeShowTiles(int index) {
        if (showTilesBuilder_ == null) {
          ensureShowTilesIsMutable();
          showTiles_.remove(index);
          onChanged();
        } else {
          showTilesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder getShowTilesBuilder(
          int index) {
        return getShowTilesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder getShowTilesOrBuilder(
          int index) {
        if (showTilesBuilder_ == null) {
          return showTiles_.get(index);  } else {
          return showTilesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder> 
           getShowTilesOrBuilderList() {
        if (showTilesBuilder_ != null) {
          return showTilesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(showTiles_);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder addShowTilesBuilder() {
        return getShowTilesFieldBuilder().addBuilder(
            com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder addShowTilesBuilder(
          int index) {
        return getShowTilesFieldBuilder().addBuilder(
            index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Meld showTiles = 3;</code>
       *
       * <pre>
       *吃碰杠
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder> 
           getShowTilesBuilderList() {
        return getShowTilesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder> 
          getShowTilesFieldBuilder() {
        if (showTilesBuilder_ == null) {
          showTilesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Meld.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.MeldOrBuilder>(
                  showTiles_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          showTiles_ = null;
        }
        return showTilesBuilder_;
      }

      // repeated uint32 discardedTiles = 4;
      private java.util.List<java.lang.Integer> discardedTiles_ = java.util.Collections.emptyList();
      private void ensureDiscardedTilesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          discardedTiles_ = new java.util.ArrayList<java.lang.Integer>(discardedTiles_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated uint32 discardedTiles = 4;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDiscardedTilesList() {
        return java.util.Collections.unmodifiableList(discardedTiles_);
      }
      /**
       * <code>repeated uint32 discardedTiles = 4;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public int getDiscardedTilesCount() {
        return discardedTiles_.size();
      }
      /**
       * <code>repeated uint32 discardedTiles = 4;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public int getDiscardedTiles(int index) {
        return discardedTiles_.get(index);
      }
      /**
       * <code>repeated uint32 discardedTiles = 4;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public Builder setDiscardedTiles(
          int index, int value) {
        ensureDiscardedTilesIsMutable();
        discardedTiles_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 discardedTiles = 4;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public Builder addDiscardedTiles(int value) {
        ensureDiscardedTilesIsMutable();
        discardedTiles_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 discardedTiles = 4;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public Builder addAllDiscardedTiles(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiscardedTilesIsMutable();
        super.addAll(values, discardedTiles_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 discardedTiles = 4;</code>
       *
       * <pre>
       *打出的牌
       * </pre>
       */
      public Builder clearDiscardedTiles() {
        discardedTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated uint32 inhandTiles = 5;
      private java.util.List<java.lang.Integer> inhandTiles_ = java.util.Collections.emptyList();
      private void ensureInhandTilesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          inhandTiles_ = new java.util.ArrayList<java.lang.Integer>(inhandTiles_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated uint32 inhandTiles = 5;</code>
       *
       * <pre>
       *手中的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getInhandTilesList() {
        return java.util.Collections.unmodifiableList(inhandTiles_);
      }
      /**
       * <code>repeated uint32 inhandTiles = 5;</code>
       *
       * <pre>
       *手中的牌
       * </pre>
       */
      public int getInhandTilesCount() {
        return inhandTiles_.size();
      }
      /**
       * <code>repeated uint32 inhandTiles = 5;</code>
       *
       * <pre>
       *手中的牌
       * </pre>
       */
      public int getInhandTiles(int index) {
        return inhandTiles_.get(index);
      }
      /**
       * <code>repeated uint32 inhandTiles = 5;</code>
       *
       * <pre>
       *手中的牌
       * </pre>
       */
      public Builder setInhandTiles(
          int index, int value) {
        ensureInhandTilesIsMutable();
        inhandTiles_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 inhandTiles = 5;</code>
       *
       * <pre>
       *手中的牌
       * </pre>
       */
      public Builder addInhandTiles(int value) {
        ensureInhandTilesIsMutable();
        inhandTiles_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 inhandTiles = 5;</code>
       *
       * <pre>
       *手中的牌
       * </pre>
       */
      public Builder addAllInhandTiles(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInhandTilesIsMutable();
        super.addAll(values, inhandTiles_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 inhandTiles = 5;</code>
       *
       * <pre>
       *手中的牌
       * </pre>
       */
      public Builder clearInhandTiles() {
        inhandTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // optional uint32 lastTile = 6;
      private int lastTile_ ;
      /**
       * <code>optional uint32 lastTile = 6;</code>
       */
      public boolean hasLastTile() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 lastTile = 6;</code>
       */
      public int getLastTile() {
        return lastTile_;
      }
      /**
       * <code>optional uint32 lastTile = 6;</code>
       */
      public Builder setLastTile(int value) {
        bitField0_ |= 0x00000020;
        lastTile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 lastTile = 6;</code>
       */
      public Builder clearLastTile() {
        bitField0_ = (bitField0_ & ~0x00000020);
        lastTile_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 flowers = 7;
      private int flowers_ ;
      /**
       * <code>optional uint32 flowers = 7;</code>
       *
       * <pre>
       *花牌
       * </pre>
       */
      public boolean hasFlowers() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 flowers = 7;</code>
       *
       * <pre>
       *花牌
       * </pre>
       */
      public int getFlowers() {
        return flowers_;
      }
      /**
       * <code>optional uint32 flowers = 7;</code>
       *
       * <pre>
       *花牌
       * </pre>
       */
      public Builder setFlowers(int value) {
        bitField0_ |= 0x00000040;
        flowers_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 flowers = 7;</code>
       *
       * <pre>
       *花牌
       * </pre>
       */
      public Builder clearFlowers() {
        bitField0_ = (bitField0_ & ~0x00000040);
        flowers_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.CurrentTileInfo)
    }

    static {
      defaultInstance = new CurrentTileInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.CurrentTileInfo)
  }

  public interface CReqEnterGameOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 gameId = 1;
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    boolean hasGameId();
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    long getGameId();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.CReqEnterGame}
   *
   * <pre>
   *========================================================================================
   * 进入游戏
   * #define OGID_GAME_ENTER						( OGID_GAME_MESSAGE + 1 )
   * </pre>
   */
  public static final class CReqEnterGame extends
      com.google.protobuf.GeneratedMessage
      implements CReqEnterGameOrBuilder {
    // Use CReqEnterGame.newBuilder() to construct.
    private CReqEnterGame(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CReqEnterGame(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CReqEnterGame defaultInstance;
    public static CReqEnterGame getDefaultInstance() {
      return defaultInstance;
    }

    public CReqEnterGame getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CReqEnterGame(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              gameId_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqEnterGame_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqEnterGame_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame.Builder.class);
    }

    public static com.google.protobuf.Parser<CReqEnterGame> PARSER =
        new com.google.protobuf.AbstractParser<CReqEnterGame>() {
      public CReqEnterGame parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CReqEnterGame(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CReqEnterGame> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 gameId = 1;
    public static final int GAMEID_FIELD_NUMBER = 1;
    private long gameId_;
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    public boolean hasGameId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    public long getGameId() {
      return gameId_;
    }

    private void initFields() {
      gameId_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasGameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, gameId_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, gameId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.CReqEnterGame}
     *
     * <pre>
     *========================================================================================
     * 进入游戏
     * #define OGID_GAME_ENTER						( OGID_GAME_MESSAGE + 1 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqEnterGame_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqEnterGame_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        gameId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqEnterGame_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.gameId_ = gameId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame.getDefaultInstance()) return this;
        if (other.hasGameId()) {
          setGameId(other.getGameId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasGameId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqEnterGame) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 gameId = 1;
      private long gameId_ ;
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public boolean hasGameId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public long getGameId() {
        return gameId_;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public Builder setGameId(long value) {
        bitField0_ |= 0x00000001;
        gameId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public Builder clearGameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        gameId_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.CReqEnterGame)
    }

    static {
      defaultInstance = new CReqEnterGame(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.CReqEnterGame)
  }

  public interface SAckEnterGameOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 gameId = 1;
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    boolean hasGameId();
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    long getGameId();

    // required uint32 result = 2;
    /**
     * <code>required uint32 result = 2;</code>
     *
     * <pre>
     *结果，0为成功
     * </pre>
     */
    boolean hasResult();
    /**
     * <code>required uint32 result = 2;</code>
     *
     * <pre>
     *结果，0为成功
     * </pre>
     */
    int getResult();

    // optional string failReason = 3;
    /**
     * <code>optional string failReason = 3;</code>
     *
     * <pre>
     *失败原因
     * </pre>
     */
    boolean hasFailReason();
    /**
     * <code>optional string failReason = 3;</code>
     *
     * <pre>
     *失败原因
     * </pre>
     */
    java.lang.String getFailReason();
    /**
     * <code>optional string failReason = 3;</code>
     *
     * <pre>
     *失败原因
     * </pre>
     */
    com.google.protobuf.ByteString
        getFailReasonBytes();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.SAckEnterGame}
   */
  public static final class SAckEnterGame extends
      com.google.protobuf.GeneratedMessage
      implements SAckEnterGameOrBuilder {
    // Use SAckEnterGame.newBuilder() to construct.
    private SAckEnterGame(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SAckEnterGame(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SAckEnterGame defaultInstance;
    public static SAckEnterGame getDefaultInstance() {
      return defaultInstance;
    }

    public SAckEnterGame getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SAckEnterGame(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              gameId_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              result_ = input.readUInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              failReason_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_SAckEnterGame_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_SAckEnterGame_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame.Builder.class);
    }

    public static com.google.protobuf.Parser<SAckEnterGame> PARSER =
        new com.google.protobuf.AbstractParser<SAckEnterGame>() {
      public SAckEnterGame parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SAckEnterGame(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SAckEnterGame> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 gameId = 1;
    public static final int GAMEID_FIELD_NUMBER = 1;
    private long gameId_;
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    public boolean hasGameId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    public long getGameId() {
      return gameId_;
    }

    // required uint32 result = 2;
    public static final int RESULT_FIELD_NUMBER = 2;
    private int result_;
    /**
     * <code>required uint32 result = 2;</code>
     *
     * <pre>
     *结果，0为成功
     * </pre>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 result = 2;</code>
     *
     * <pre>
     *结果，0为成功
     * </pre>
     */
    public int getResult() {
      return result_;
    }

    // optional string failReason = 3;
    public static final int FAILREASON_FIELD_NUMBER = 3;
    private java.lang.Object failReason_;
    /**
     * <code>optional string failReason = 3;</code>
     *
     * <pre>
     *失败原因
     * </pre>
     */
    public boolean hasFailReason() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string failReason = 3;</code>
     *
     * <pre>
     *失败原因
     * </pre>
     */
    public java.lang.String getFailReason() {
      java.lang.Object ref = failReason_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          failReason_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string failReason = 3;</code>
     *
     * <pre>
     *失败原因
     * </pre>
     */
    public com.google.protobuf.ByteString
        getFailReasonBytes() {
      java.lang.Object ref = failReason_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        failReason_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      gameId_ = 0L;
      result_ = 0;
      failReason_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasGameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, gameId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, result_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getFailReasonBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, gameId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, result_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getFailReasonBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.SAckEnterGame}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_SAckEnterGame_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_SAckEnterGame_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        gameId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        failReason_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_SAckEnterGame_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.gameId_ = gameId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.result_ = result_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.failReason_ = failReason_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame.getDefaultInstance()) return this;
        if (other.hasGameId()) {
          setGameId(other.getGameId());
        }
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        if (other.hasFailReason()) {
          bitField0_ |= 0x00000004;
          failReason_ = other.failReason_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasGameId()) {
          
          return false;
        }
        if (!hasResult()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckEnterGame) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 gameId = 1;
      private long gameId_ ;
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public boolean hasGameId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public long getGameId() {
        return gameId_;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public Builder setGameId(long value) {
        bitField0_ |= 0x00000001;
        gameId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public Builder clearGameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        gameId_ = 0L;
        onChanged();
        return this;
      }

      // required uint32 result = 2;
      private int result_ ;
      /**
       * <code>required uint32 result = 2;</code>
       *
       * <pre>
       *结果，0为成功
       * </pre>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 result = 2;</code>
       *
       * <pre>
       *结果，0为成功
       * </pre>
       */
      public int getResult() {
        return result_;
      }
      /**
       * <code>required uint32 result = 2;</code>
       *
       * <pre>
       *结果，0为成功
       * </pre>
       */
      public Builder setResult(int value) {
        bitField0_ |= 0x00000002;
        result_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 result = 2;</code>
       *
       * <pre>
       *结果，0为成功
       * </pre>
       */
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000002);
        result_ = 0;
        onChanged();
        return this;
      }

      // optional string failReason = 3;
      private java.lang.Object failReason_ = "";
      /**
       * <code>optional string failReason = 3;</code>
       *
       * <pre>
       *失败原因
       * </pre>
       */
      public boolean hasFailReason() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string failReason = 3;</code>
       *
       * <pre>
       *失败原因
       * </pre>
       */
      public java.lang.String getFailReason() {
        java.lang.Object ref = failReason_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          failReason_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string failReason = 3;</code>
       *
       * <pre>
       *失败原因
       * </pre>
       */
      public com.google.protobuf.ByteString
          getFailReasonBytes() {
        java.lang.Object ref = failReason_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          failReason_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string failReason = 3;</code>
       *
       * <pre>
       *失败原因
       * </pre>
       */
      public Builder setFailReason(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        failReason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string failReason = 3;</code>
       *
       * <pre>
       *失败原因
       * </pre>
       */
      public Builder clearFailReason() {
        bitField0_ = (bitField0_ & ~0x00000004);
        failReason_ = getDefaultInstance().getFailReason();
        onChanged();
        return this;
      }
      /**
       * <code>optional string failReason = 3;</code>
       *
       * <pre>
       *失败原因
       * </pre>
       */
      public Builder setFailReasonBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        failReason_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.SAckEnterGame)
    }

    static {
      defaultInstance = new SAckEnterGame(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.SAckEnterGame)
  }

  public interface NtfStartGameOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 gameId = 1;
    /**
     * <code>required uint64 gameId = 1;</code>
     *
     * <pre>
     *游戏ID
     * </pre>
     */
    boolean hasGameId();
    /**
     * <code>required uint64 gameId = 1;</code>
     *
     * <pre>
     *游戏ID
     * </pre>
     */
    long getGameId();

    // required uint32 gameType = 2;
    /**
     * <code>required uint32 gameType = 2;</code>
     *
     * <pre>
     *麻将种类
     * </pre>
     */
    boolean hasGameType();
    /**
     * <code>required uint32 gameType = 2;</code>
     *
     * <pre>
     *麻将种类
     * </pre>
     */
    int getGameType();

    // repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player> 
        getPlayersList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player getPlayers(int index);
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    int getPlayersCount();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder getPlayersOrBuilder(
        int index);

    // required uint32 dealer = 4;
    /**
     * <code>required uint32 dealer = 4;</code>
     *
     * <pre>
     *庄家座位号
     * </pre>
     */
    boolean hasDealer();
    /**
     * <code>required uint32 dealer = 4;</code>
     *
     * <pre>
     *庄家座位号
     * </pre>
     */
    int getDealer();

    // required uint32 basicScore = 5;
    /**
     * <code>required uint32 basicScore = 5;</code>
     *
     * <pre>
     *基础分，每番多少分
     * </pre>
     */
    boolean hasBasicScore();
    /**
     * <code>required uint32 basicScore = 5;</code>
     *
     * <pre>
     *基础分，每番多少分
     * </pre>
     */
    int getBasicScore();

    // required uint32 stage = 6;
    /**
     * <code>required uint32 stage = 6;</code>
     *
     * <pre>
     *阶段号
     * </pre>
     */
    boolean hasStage();
    /**
     * <code>required uint32 stage = 6;</code>
     *
     * <pre>
     *阶段号
     * </pre>
     */
    int getStage();

    // required uint32 round = 7;
    /**
     * <code>required uint32 round = 7;</code>
     *
     * <pre>
     *第几圈
     * </pre>
     */
    boolean hasRound();
    /**
     * <code>required uint32 round = 7;</code>
     *
     * <pre>
     *第几圈
     * </pre>
     */
    int getRound();

    // required uint32 serial = 8;
    /**
     * <code>required uint32 serial = 8;</code>
     *
     * <pre>
     *第几局
     * </pre>
     */
    boolean hasSerial();
    /**
     * <code>required uint32 serial = 8;</code>
     *
     * <pre>
     *第几局
     * </pre>
     */
    int getSerial();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfStartGame}
   *
   * <pre>
   *========================================================================================
   * 游戏开始
   * #define OGID_GAME_START						( OGID_GAME_MESSAGE + 3 )
   * </pre>
   */
  public static final class NtfStartGame extends
      com.google.protobuf.GeneratedMessage
      implements NtfStartGameOrBuilder {
    // Use NtfStartGame.newBuilder() to construct.
    private NtfStartGame(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfStartGame(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfStartGame defaultInstance;
    public static NtfStartGame getDefaultInstance() {
      return defaultInstance;
    }

    public NtfStartGame getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfStartGame(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              gameId_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              gameType_ = input.readUInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                players_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player>();
                mutable_bitField0_ |= 0x00000004;
              }
              players_.add(input.readMessage(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              dealer_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              basicScore_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              stage_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              round_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              serial_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfStartGame_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfStartGame_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfStartGame> PARSER =
        new com.google.protobuf.AbstractParser<NtfStartGame>() {
      public NtfStartGame parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfStartGame(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfStartGame> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 gameId = 1;
    public static final int GAMEID_FIELD_NUMBER = 1;
    private long gameId_;
    /**
     * <code>required uint64 gameId = 1;</code>
     *
     * <pre>
     *游戏ID
     * </pre>
     */
    public boolean hasGameId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 gameId = 1;</code>
     *
     * <pre>
     *游戏ID
     * </pre>
     */
    public long getGameId() {
      return gameId_;
    }

    // required uint32 gameType = 2;
    public static final int GAMETYPE_FIELD_NUMBER = 2;
    private int gameType_;
    /**
     * <code>required uint32 gameType = 2;</code>
     *
     * <pre>
     *麻将种类
     * </pre>
     */
    public boolean hasGameType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 gameType = 2;</code>
     *
     * <pre>
     *麻将种类
     * </pre>
     */
    public int getGameType() {
      return gameType_;
    }

    // repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;
    public static final int PLAYERS_FIELD_NUMBER = 3;
    private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player> players_;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // required uint32 dealer = 4;
    public static final int DEALER_FIELD_NUMBER = 4;
    private int dealer_;
    /**
     * <code>required uint32 dealer = 4;</code>
     *
     * <pre>
     *庄家座位号
     * </pre>
     */
    public boolean hasDealer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 dealer = 4;</code>
     *
     * <pre>
     *庄家座位号
     * </pre>
     */
    public int getDealer() {
      return dealer_;
    }

    // required uint32 basicScore = 5;
    public static final int BASICSCORE_FIELD_NUMBER = 5;
    private int basicScore_;
    /**
     * <code>required uint32 basicScore = 5;</code>
     *
     * <pre>
     *基础分，每番多少分
     * </pre>
     */
    public boolean hasBasicScore() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 basicScore = 5;</code>
     *
     * <pre>
     *基础分，每番多少分
     * </pre>
     */
    public int getBasicScore() {
      return basicScore_;
    }

    // required uint32 stage = 6;
    public static final int STAGE_FIELD_NUMBER = 6;
    private int stage_;
    /**
     * <code>required uint32 stage = 6;</code>
     *
     * <pre>
     *阶段号
     * </pre>
     */
    public boolean hasStage() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 stage = 6;</code>
     *
     * <pre>
     *阶段号
     * </pre>
     */
    public int getStage() {
      return stage_;
    }

    // required uint32 round = 7;
    public static final int ROUND_FIELD_NUMBER = 7;
    private int round_;
    /**
     * <code>required uint32 round = 7;</code>
     *
     * <pre>
     *第几圈
     * </pre>
     */
    public boolean hasRound() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required uint32 round = 7;</code>
     *
     * <pre>
     *第几圈
     * </pre>
     */
    public int getRound() {
      return round_;
    }

    // required uint32 serial = 8;
    public static final int SERIAL_FIELD_NUMBER = 8;
    private int serial_;
    /**
     * <code>required uint32 serial = 8;</code>
     *
     * <pre>
     *第几局
     * </pre>
     */
    public boolean hasSerial() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required uint32 serial = 8;</code>
     *
     * <pre>
     *第几局
     * </pre>
     */
    public int getSerial() {
      return serial_;
    }

    private void initFields() {
      gameId_ = 0L;
      gameType_ = 0;
      players_ = java.util.Collections.emptyList();
      dealer_ = 0;
      basicScore_ = 0;
      stage_ = 0;
      round_ = 0;
      serial_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasGameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGameType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDealer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBasicScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRound()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSerial()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getPlayersCount(); i++) {
        if (!getPlayers(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, gameId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, gameType_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(3, players_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(4, dealer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(5, basicScore_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(6, stage_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(7, round_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(8, serial_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, gameId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, gameType_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, players_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, dealer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, basicScore_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, stage_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, round_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, serial_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfStartGame}
     *
     * <pre>
     *========================================================================================
     * 游戏开始
     * #define OGID_GAME_START						( OGID_GAME_MESSAGE + 3 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfStartGame_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfStartGame_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        gameId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        gameType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          playersBuilder_.clear();
        }
        dealer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        basicScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        stage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        round_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        serial_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfStartGame_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.gameId_ = gameId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.gameType_ = gameType_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.dealer_ = dealer_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.basicScore_ = basicScore_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.stage_ = stage_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.round_ = round_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.serial_ = serial_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame.getDefaultInstance()) return this;
        if (other.hasGameId()) {
          setGameId(other.getGameId());
        }
        if (other.hasGameType()) {
          setGameType(other.getGameType());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000004);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasDealer()) {
          setDealer(other.getDealer());
        }
        if (other.hasBasicScore()) {
          setBasicScore(other.getBasicScore());
        }
        if (other.hasStage()) {
          setStage(other.getStage());
        }
        if (other.hasRound()) {
          setRound(other.getRound());
        }
        if (other.hasSerial()) {
          setSerial(other.getSerial());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasGameId()) {
          
          return false;
        }
        if (!hasGameType()) {
          
          return false;
        }
        if (!hasDealer()) {
          
          return false;
        }
        if (!hasBasicScore()) {
          
          return false;
        }
        if (!hasStage()) {
          
          return false;
        }
        if (!hasRound()) {
          
          return false;
        }
        if (!hasSerial()) {
          
          return false;
        }
        for (int i = 0; i < getPlayersCount(); i++) {
          if (!getPlayers(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfStartGame) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 gameId = 1;
      private long gameId_ ;
      /**
       * <code>required uint64 gameId = 1;</code>
       *
       * <pre>
       *游戏ID
       * </pre>
       */
      public boolean hasGameId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       *
       * <pre>
       *游戏ID
       * </pre>
       */
      public long getGameId() {
        return gameId_;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       *
       * <pre>
       *游戏ID
       * </pre>
       */
      public Builder setGameId(long value) {
        bitField0_ |= 0x00000001;
        gameId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       *
       * <pre>
       *游戏ID
       * </pre>
       */
      public Builder clearGameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        gameId_ = 0L;
        onChanged();
        return this;
      }

      // required uint32 gameType = 2;
      private int gameType_ ;
      /**
       * <code>required uint32 gameType = 2;</code>
       *
       * <pre>
       *麻将种类
       * </pre>
       */
      public boolean hasGameType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 gameType = 2;</code>
       *
       * <pre>
       *麻将种类
       * </pre>
       */
      public int getGameType() {
        return gameType_;
      }
      /**
       * <code>required uint32 gameType = 2;</code>
       *
       * <pre>
       *麻将种类
       * </pre>
       */
      public Builder setGameType(int value) {
        bitField0_ |= 0x00000002;
        gameType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 gameType = 2;</code>
       *
       * <pre>
       *麻将种类
       * </pre>
       */
      public Builder clearGameType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        gameType_ = 0;
        onChanged();
        return this;
      }

      // repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;
      private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          players_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player>(players_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder> playersBuilder_;

      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder setPlayers(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder setPlayers(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder addPlayers(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder addPlayers(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder addPlayers(
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder addPlayers(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // required uint32 dealer = 4;
      private int dealer_ ;
      /**
       * <code>required uint32 dealer = 4;</code>
       *
       * <pre>
       *庄家座位号
       * </pre>
       */
      public boolean hasDealer() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 dealer = 4;</code>
       *
       * <pre>
       *庄家座位号
       * </pre>
       */
      public int getDealer() {
        return dealer_;
      }
      /**
       * <code>required uint32 dealer = 4;</code>
       *
       * <pre>
       *庄家座位号
       * </pre>
       */
      public Builder setDealer(int value) {
        bitField0_ |= 0x00000008;
        dealer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 dealer = 4;</code>
       *
       * <pre>
       *庄家座位号
       * </pre>
       */
      public Builder clearDealer() {
        bitField0_ = (bitField0_ & ~0x00000008);
        dealer_ = 0;
        onChanged();
        return this;
      }

      // required uint32 basicScore = 5;
      private int basicScore_ ;
      /**
       * <code>required uint32 basicScore = 5;</code>
       *
       * <pre>
       *基础分，每番多少分
       * </pre>
       */
      public boolean hasBasicScore() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 basicScore = 5;</code>
       *
       * <pre>
       *基础分，每番多少分
       * </pre>
       */
      public int getBasicScore() {
        return basicScore_;
      }
      /**
       * <code>required uint32 basicScore = 5;</code>
       *
       * <pre>
       *基础分，每番多少分
       * </pre>
       */
      public Builder setBasicScore(int value) {
        bitField0_ |= 0x00000010;
        basicScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 basicScore = 5;</code>
       *
       * <pre>
       *基础分，每番多少分
       * </pre>
       */
      public Builder clearBasicScore() {
        bitField0_ = (bitField0_ & ~0x00000010);
        basicScore_ = 0;
        onChanged();
        return this;
      }

      // required uint32 stage = 6;
      private int stage_ ;
      /**
       * <code>required uint32 stage = 6;</code>
       *
       * <pre>
       *阶段号
       * </pre>
       */
      public boolean hasStage() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint32 stage = 6;</code>
       *
       * <pre>
       *阶段号
       * </pre>
       */
      public int getStage() {
        return stage_;
      }
      /**
       * <code>required uint32 stage = 6;</code>
       *
       * <pre>
       *阶段号
       * </pre>
       */
      public Builder setStage(int value) {
        bitField0_ |= 0x00000020;
        stage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 stage = 6;</code>
       *
       * <pre>
       *阶段号
       * </pre>
       */
      public Builder clearStage() {
        bitField0_ = (bitField0_ & ~0x00000020);
        stage_ = 0;
        onChanged();
        return this;
      }

      // required uint32 round = 7;
      private int round_ ;
      /**
       * <code>required uint32 round = 7;</code>
       *
       * <pre>
       *第几圈
       * </pre>
       */
      public boolean hasRound() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required uint32 round = 7;</code>
       *
       * <pre>
       *第几圈
       * </pre>
       */
      public int getRound() {
        return round_;
      }
      /**
       * <code>required uint32 round = 7;</code>
       *
       * <pre>
       *第几圈
       * </pre>
       */
      public Builder setRound(int value) {
        bitField0_ |= 0x00000040;
        round_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 round = 7;</code>
       *
       * <pre>
       *第几圈
       * </pre>
       */
      public Builder clearRound() {
        bitField0_ = (bitField0_ & ~0x00000040);
        round_ = 0;
        onChanged();
        return this;
      }

      // required uint32 serial = 8;
      private int serial_ ;
      /**
       * <code>required uint32 serial = 8;</code>
       *
       * <pre>
       *第几局
       * </pre>
       */
      public boolean hasSerial() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required uint32 serial = 8;</code>
       *
       * <pre>
       *第几局
       * </pre>
       */
      public int getSerial() {
        return serial_;
      }
      /**
       * <code>required uint32 serial = 8;</code>
       *
       * <pre>
       *第几局
       * </pre>
       */
      public Builder setSerial(int value) {
        bitField0_ |= 0x00000080;
        serial_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 serial = 8;</code>
       *
       * <pre>
       *第几局
       * </pre>
       */
      public Builder clearSerial() {
        bitField0_ = (bitField0_ & ~0x00000080);
        serial_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfStartGame)
    }

    static {
      defaultInstance = new NtfStartGame(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfStartGame)
  }

  public interface NtfResumeGameOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 dealer = 1;
    /**
     * <code>required uint32 dealer = 1;</code>
     *
     * <pre>
     *庄家座位号
     * </pre>
     */
    boolean hasDealer();
    /**
     * <code>required uint32 dealer = 1;</code>
     *
     * <pre>
     *庄家座位号
     * </pre>
     */
    int getDealer();

    // required uint32 basicScore = 2;
    /**
     * <code>required uint32 basicScore = 2;</code>
     *
     * <pre>
     *基础分，每番多少分
     * </pre>
     */
    boolean hasBasicScore();
    /**
     * <code>required uint32 basicScore = 2;</code>
     *
     * <pre>
     *基础分，每番多少分
     * </pre>
     */
    int getBasicScore();

    // required uint32 stage = 3;
    /**
     * <code>required uint32 stage = 3;</code>
     *
     * <pre>
     *阶段号
     * </pre>
     */
    boolean hasStage();
    /**
     * <code>required uint32 stage = 3;</code>
     *
     * <pre>
     *阶段号
     * </pre>
     */
    int getStage();

    // required uint32 round = 4;
    /**
     * <code>required uint32 round = 4;</code>
     *
     * <pre>
     *第几圈
     * </pre>
     */
    boolean hasRound();
    /**
     * <code>required uint32 round = 4;</code>
     *
     * <pre>
     *第几圈
     * </pre>
     */
    int getRound();

    // required uint32 serial = 5;
    /**
     * <code>required uint32 serial = 5;</code>
     *
     * <pre>
     *第几局
     * </pre>
     */
    boolean hasSerial();
    /**
     * <code>required uint32 serial = 5;</code>
     *
     * <pre>
     *第几局
     * </pre>
     */
    int getSerial();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfResumeGame}
   *
   * <pre>
   *========================================================================================
   * 重新开始游戏
   * #define OGID_GAME_RESUME						( OGID_GAME_MESSAGE + 5 )
   * </pre>
   */
  public static final class NtfResumeGame extends
      com.google.protobuf.GeneratedMessage
      implements NtfResumeGameOrBuilder {
    // Use NtfResumeGame.newBuilder() to construct.
    private NtfResumeGame(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfResumeGame(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfResumeGame defaultInstance;
    public static NtfResumeGame getDefaultInstance() {
      return defaultInstance;
    }

    public NtfResumeGame getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfResumeGame(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              dealer_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              basicScore_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              stage_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              round_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              serial_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfResumeGame_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfResumeGame_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfResumeGame> PARSER =
        new com.google.protobuf.AbstractParser<NtfResumeGame>() {
      public NtfResumeGame parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfResumeGame(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfResumeGame> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 dealer = 1;
    public static final int DEALER_FIELD_NUMBER = 1;
    private int dealer_;
    /**
     * <code>required uint32 dealer = 1;</code>
     *
     * <pre>
     *庄家座位号
     * </pre>
     */
    public boolean hasDealer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 dealer = 1;</code>
     *
     * <pre>
     *庄家座位号
     * </pre>
     */
    public int getDealer() {
      return dealer_;
    }

    // required uint32 basicScore = 2;
    public static final int BASICSCORE_FIELD_NUMBER = 2;
    private int basicScore_;
    /**
     * <code>required uint32 basicScore = 2;</code>
     *
     * <pre>
     *基础分，每番多少分
     * </pre>
     */
    public boolean hasBasicScore() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 basicScore = 2;</code>
     *
     * <pre>
     *基础分，每番多少分
     * </pre>
     */
    public int getBasicScore() {
      return basicScore_;
    }

    // required uint32 stage = 3;
    public static final int STAGE_FIELD_NUMBER = 3;
    private int stage_;
    /**
     * <code>required uint32 stage = 3;</code>
     *
     * <pre>
     *阶段号
     * </pre>
     */
    public boolean hasStage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 stage = 3;</code>
     *
     * <pre>
     *阶段号
     * </pre>
     */
    public int getStage() {
      return stage_;
    }

    // required uint32 round = 4;
    public static final int ROUND_FIELD_NUMBER = 4;
    private int round_;
    /**
     * <code>required uint32 round = 4;</code>
     *
     * <pre>
     *第几圈
     * </pre>
     */
    public boolean hasRound() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 round = 4;</code>
     *
     * <pre>
     *第几圈
     * </pre>
     */
    public int getRound() {
      return round_;
    }

    // required uint32 serial = 5;
    public static final int SERIAL_FIELD_NUMBER = 5;
    private int serial_;
    /**
     * <code>required uint32 serial = 5;</code>
     *
     * <pre>
     *第几局
     * </pre>
     */
    public boolean hasSerial() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 serial = 5;</code>
     *
     * <pre>
     *第几局
     * </pre>
     */
    public int getSerial() {
      return serial_;
    }

    private void initFields() {
      dealer_ = 0;
      basicScore_ = 0;
      stage_ = 0;
      round_ = 0;
      serial_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasDealer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBasicScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRound()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSerial()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, dealer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, basicScore_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, stage_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, round_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, serial_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, dealer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, basicScore_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, stage_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, round_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, serial_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfResumeGame}
     *
     * <pre>
     *========================================================================================
     * 重新开始游戏
     * #define OGID_GAME_RESUME						( OGID_GAME_MESSAGE + 5 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfResumeGame_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfResumeGame_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        dealer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        basicScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        stage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        round_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        serial_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfResumeGame_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.dealer_ = dealer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.basicScore_ = basicScore_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.stage_ = stage_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.round_ = round_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.serial_ = serial_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame.getDefaultInstance()) return this;
        if (other.hasDealer()) {
          setDealer(other.getDealer());
        }
        if (other.hasBasicScore()) {
          setBasicScore(other.getBasicScore());
        }
        if (other.hasStage()) {
          setStage(other.getStage());
        }
        if (other.hasRound()) {
          setRound(other.getRound());
        }
        if (other.hasSerial()) {
          setSerial(other.getSerial());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasDealer()) {
          
          return false;
        }
        if (!hasBasicScore()) {
          
          return false;
        }
        if (!hasStage()) {
          
          return false;
        }
        if (!hasRound()) {
          
          return false;
        }
        if (!hasSerial()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfResumeGame) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 dealer = 1;
      private int dealer_ ;
      /**
       * <code>required uint32 dealer = 1;</code>
       *
       * <pre>
       *庄家座位号
       * </pre>
       */
      public boolean hasDealer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 dealer = 1;</code>
       *
       * <pre>
       *庄家座位号
       * </pre>
       */
      public int getDealer() {
        return dealer_;
      }
      /**
       * <code>required uint32 dealer = 1;</code>
       *
       * <pre>
       *庄家座位号
       * </pre>
       */
      public Builder setDealer(int value) {
        bitField0_ |= 0x00000001;
        dealer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 dealer = 1;</code>
       *
       * <pre>
       *庄家座位号
       * </pre>
       */
      public Builder clearDealer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        dealer_ = 0;
        onChanged();
        return this;
      }

      // required uint32 basicScore = 2;
      private int basicScore_ ;
      /**
       * <code>required uint32 basicScore = 2;</code>
       *
       * <pre>
       *基础分，每番多少分
       * </pre>
       */
      public boolean hasBasicScore() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 basicScore = 2;</code>
       *
       * <pre>
       *基础分，每番多少分
       * </pre>
       */
      public int getBasicScore() {
        return basicScore_;
      }
      /**
       * <code>required uint32 basicScore = 2;</code>
       *
       * <pre>
       *基础分，每番多少分
       * </pre>
       */
      public Builder setBasicScore(int value) {
        bitField0_ |= 0x00000002;
        basicScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 basicScore = 2;</code>
       *
       * <pre>
       *基础分，每番多少分
       * </pre>
       */
      public Builder clearBasicScore() {
        bitField0_ = (bitField0_ & ~0x00000002);
        basicScore_ = 0;
        onChanged();
        return this;
      }

      // required uint32 stage = 3;
      private int stage_ ;
      /**
       * <code>required uint32 stage = 3;</code>
       *
       * <pre>
       *阶段号
       * </pre>
       */
      public boolean hasStage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 stage = 3;</code>
       *
       * <pre>
       *阶段号
       * </pre>
       */
      public int getStage() {
        return stage_;
      }
      /**
       * <code>required uint32 stage = 3;</code>
       *
       * <pre>
       *阶段号
       * </pre>
       */
      public Builder setStage(int value) {
        bitField0_ |= 0x00000004;
        stage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 stage = 3;</code>
       *
       * <pre>
       *阶段号
       * </pre>
       */
      public Builder clearStage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        stage_ = 0;
        onChanged();
        return this;
      }

      // required uint32 round = 4;
      private int round_ ;
      /**
       * <code>required uint32 round = 4;</code>
       *
       * <pre>
       *第几圈
       * </pre>
       */
      public boolean hasRound() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 round = 4;</code>
       *
       * <pre>
       *第几圈
       * </pre>
       */
      public int getRound() {
        return round_;
      }
      /**
       * <code>required uint32 round = 4;</code>
       *
       * <pre>
       *第几圈
       * </pre>
       */
      public Builder setRound(int value) {
        bitField0_ |= 0x00000008;
        round_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 round = 4;</code>
       *
       * <pre>
       *第几圈
       * </pre>
       */
      public Builder clearRound() {
        bitField0_ = (bitField0_ & ~0x00000008);
        round_ = 0;
        onChanged();
        return this;
      }

      // required uint32 serial = 5;
      private int serial_ ;
      /**
       * <code>required uint32 serial = 5;</code>
       *
       * <pre>
       *第几局
       * </pre>
       */
      public boolean hasSerial() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 serial = 5;</code>
       *
       * <pre>
       *第几局
       * </pre>
       */
      public int getSerial() {
        return serial_;
      }
      /**
       * <code>required uint32 serial = 5;</code>
       *
       * <pre>
       *第几局
       * </pre>
       */
      public Builder setSerial(int value) {
        bitField0_ |= 0x00000010;
        serial_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 serial = 5;</code>
       *
       * <pre>
       *第几局
       * </pre>
       */
      public Builder clearSerial() {
        bitField0_ = (bitField0_ & ~0x00000010);
        serial_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfResumeGame)
    }

    static {
      defaultInstance = new NtfResumeGame(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfResumeGame)
  }

  public interface NtfCastDiceOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 seat = 1;
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    boolean hasSeat();
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    int getSeat();

    // required uint32 type = 2;
    /**
     * <code>required uint32 type = 2;</code>
     *
     * <pre>
     *打色子的类型，作用，区分第几次
     * </pre>
     */
    boolean hasType();
    /**
     * <code>required uint32 type = 2;</code>
     *
     * <pre>
     *打色子的类型，作用，区分第几次
     * </pre>
     */
    int getType();

    // repeated uint32 points = 3;
    /**
     * <code>repeated uint32 points = 3;</code>
     *
     * <pre>
     *色子的点数
     * </pre>
     */
    java.util.List<java.lang.Integer> getPointsList();
    /**
     * <code>repeated uint32 points = 3;</code>
     *
     * <pre>
     *色子的点数
     * </pre>
     */
    int getPointsCount();
    /**
     * <code>repeated uint32 points = 3;</code>
     *
     * <pre>
     *色子的点数
     * </pre>
     */
    int getPoints(int index);
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfCastDice}
   *
   * <pre>
   *========================================================================================
   * 掷骰子
   * #define OGID_DICE							( OGID_GAME_MESSAGE + 7 )
   * </pre>
   */
  public static final class NtfCastDice extends
      com.google.protobuf.GeneratedMessage
      implements NtfCastDiceOrBuilder {
    // Use NtfCastDice.newBuilder() to construct.
    private NtfCastDice(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfCastDice(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfCastDice defaultInstance;
    public static NtfCastDice getDefaultInstance() {
      return defaultInstance;
    }

    public NtfCastDice getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfCastDice(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seat_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              type_ = input.readUInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                points_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              points_.add(input.readUInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                points_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                points_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          points_ = java.util.Collections.unmodifiableList(points_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfCastDice_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfCastDice_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfCastDice> PARSER =
        new com.google.protobuf.AbstractParser<NtfCastDice>() {
      public NtfCastDice parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfCastDice(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfCastDice> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private int seat_;
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public boolean hasSeat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public int getSeat() {
      return seat_;
    }

    // required uint32 type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <code>required uint32 type = 2;</code>
     *
     * <pre>
     *打色子的类型，作用，区分第几次
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 type = 2;</code>
     *
     * <pre>
     *打色子的类型，作用，区分第几次
     * </pre>
     */
    public int getType() {
      return type_;
    }

    // repeated uint32 points = 3;
    public static final int POINTS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> points_;
    /**
     * <code>repeated uint32 points = 3;</code>
     *
     * <pre>
     *色子的点数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPointsList() {
      return points_;
    }
    /**
     * <code>repeated uint32 points = 3;</code>
     *
     * <pre>
     *色子的点数
     * </pre>
     */
    public int getPointsCount() {
      return points_.size();
    }
    /**
     * <code>repeated uint32 points = 3;</code>
     *
     * <pre>
     *色子的点数
     * </pre>
     */
    public int getPoints(int index) {
      return points_.get(index);
    }

    private void initFields() {
      seat_ = 0;
      type_ = 0;
      points_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, type_);
      }
      for (int i = 0; i < points_.size(); i++) {
        output.writeUInt32(3, points_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, type_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < points_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(points_.get(i));
        }
        size += dataSize;
        size += 1 * getPointsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfCastDice}
     *
     * <pre>
     *========================================================================================
     * 掷骰子
     * #define OGID_DICE							( OGID_GAME_MESSAGE + 7 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDiceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfCastDice_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfCastDice_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        points_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfCastDice_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seat_ = seat_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          points_ = java.util.Collections.unmodifiableList(points_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.points_ = points_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (!other.points_.isEmpty()) {
          if (points_.isEmpty()) {
            points_ = other.points_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensurePointsIsMutable();
            points_.addAll(other.points_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSeat()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfCastDice) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 seat = 1;
      private int seat_ ;
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public int getSeat() {
        return seat_;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder setSeat(int value) {
        bitField0_ |= 0x00000001;
        seat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder clearSeat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seat_ = 0;
        onChanged();
        return this;
      }

      // required uint32 type = 2;
      private int type_ ;
      /**
       * <code>required uint32 type = 2;</code>
       *
       * <pre>
       *打色子的类型，作用，区分第几次
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 type = 2;</code>
       *
       * <pre>
       *打色子的类型，作用，区分第几次
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>required uint32 type = 2;</code>
       *
       * <pre>
       *打色子的类型，作用，区分第几次
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 type = 2;</code>
       *
       * <pre>
       *打色子的类型，作用，区分第几次
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 points = 3;
      private java.util.List<java.lang.Integer> points_ = java.util.Collections.emptyList();
      private void ensurePointsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          points_ = new java.util.ArrayList<java.lang.Integer>(points_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint32 points = 3;</code>
       *
       * <pre>
       *色子的点数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPointsList() {
        return java.util.Collections.unmodifiableList(points_);
      }
      /**
       * <code>repeated uint32 points = 3;</code>
       *
       * <pre>
       *色子的点数
       * </pre>
       */
      public int getPointsCount() {
        return points_.size();
      }
      /**
       * <code>repeated uint32 points = 3;</code>
       *
       * <pre>
       *色子的点数
       * </pre>
       */
      public int getPoints(int index) {
        return points_.get(index);
      }
      /**
       * <code>repeated uint32 points = 3;</code>
       *
       * <pre>
       *色子的点数
       * </pre>
       */
      public Builder setPoints(
          int index, int value) {
        ensurePointsIsMutable();
        points_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 points = 3;</code>
       *
       * <pre>
       *色子的点数
       * </pre>
       */
      public Builder addPoints(int value) {
        ensurePointsIsMutable();
        points_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 points = 3;</code>
       *
       * <pre>
       *色子的点数
       * </pre>
       */
      public Builder addAllPoints(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePointsIsMutable();
        super.addAll(values, points_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 points = 3;</code>
       *
       * <pre>
       *色子的点数
       * </pre>
       */
      public Builder clearPoints() {
        points_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfCastDice)
    }

    static {
      defaultInstance = new NtfCastDice(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfCastDice)
  }

  public interface NtfDealsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 startSeat = 1;
    /**
     * <code>required uint32 startSeat = 1;</code>
     *
     * <pre>
     *从哪一家门前抓牌
     * </pre>
     */
    boolean hasStartSeat();
    /**
     * <code>required uint32 startSeat = 1;</code>
     *
     * <pre>
     *从哪一家门前抓牌
     * </pre>
     */
    int getStartSeat();

    // required uint32 startFrusta = 2;
    /**
     * <code>required uint32 startFrusta = 2;</code>
     *
     * <pre>
     *从第几墩开始抓牌
     * </pre>
     */
    boolean hasStartFrusta();
    /**
     * <code>required uint32 startFrusta = 2;</code>
     *
     * <pre>
     *从第几墩开始抓牌
     * </pre>
     */
    int getStartFrusta();

    // repeated uint32 tiles = 3;
    /**
     * <code>repeated uint32 tiles = 3;</code>
     *
     * <pre>
     *抓到的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getTilesList();
    /**
     * <code>repeated uint32 tiles = 3;</code>
     *
     * <pre>
     *抓到的牌
     * </pre>
     */
    int getTilesCount();
    /**
     * <code>repeated uint32 tiles = 3;</code>
     *
     * <pre>
     *抓到的牌
     * </pre>
     */
    int getTiles(int index);

    // repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
     *
     * <pre>
     *其余人的牌张数
     * </pre>
     */
    java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount> 
        getAmoutsList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
     *
     * <pre>
     *其余人的牌张数
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount getAmouts(int index);
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
     *
     * <pre>
     *其余人的牌张数
     * </pre>
     */
    int getAmoutsCount();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
     *
     * <pre>
     *其余人的牌张数
     * </pre>
     */
    java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmountOrBuilder> 
        getAmoutsOrBuilderList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
     *
     * <pre>
     *其余人的牌张数
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmountOrBuilder getAmoutsOrBuilder(
        int index);

    // required uint32 waitingTime = 5;
    /**
     * <code>required uint32 waitingTime = 5;</code>
     *
     * <pre>
     *等候准备换牌的时间
     * </pre>
     */
    boolean hasWaitingTime();
    /**
     * <code>required uint32 waitingTime = 5;</code>
     *
     * <pre>
     *等候准备换牌的时间
     * </pre>
     */
    int getWaitingTime();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfDeals}
   *
   * <pre>
   *========================================================================================
   * 开门发牌，服务器一次性发出所有牌，客户端做动画处理
   * #define OGID_DEAL							( OGID_GAME_MESSAGE + 9 )
   * </pre>
   */
  public static final class NtfDeals extends
      com.google.protobuf.GeneratedMessage
      implements NtfDealsOrBuilder {
    // Use NtfDeals.newBuilder() to construct.
    private NtfDeals(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfDeals(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfDeals defaultInstance;
    public static NtfDeals getDefaultInstance() {
      return defaultInstance;
    }

    public NtfDeals getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfDeals(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              startSeat_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              startFrusta_ = input.readUInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                tiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              tiles_.add(input.readUInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                tiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                tiles_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                amouts_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount>();
                mutable_bitField0_ |= 0x00000008;
              }
              amouts_.add(input.readMessage(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.PARSER, extensionRegistry));
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              waitingTime_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          amouts_ = java.util.Collections.unmodifiableList(amouts_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfDeals> PARSER =
        new com.google.protobuf.AbstractParser<NtfDeals>() {
      public NtfDeals parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfDeals(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfDeals> getParserForType() {
      return PARSER;
    }

    public interface TileAmountOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required uint32 seat = 1;
      /**
       * <code>required uint32 seat = 1;</code>
       */
      boolean hasSeat();
      /**
       * <code>required uint32 seat = 1;</code>
       */
      int getSeat();

      // required uint32 amount = 2;
      /**
       * <code>required uint32 amount = 2;</code>
       */
      boolean hasAmount();
      /**
       * <code>required uint32 amount = 2;</code>
       */
      int getAmount();
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount}
     */
    public static final class TileAmount extends
        com.google.protobuf.GeneratedMessage
        implements TileAmountOrBuilder {
      // Use TileAmount.newBuilder() to construct.
      private TileAmount(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private TileAmount(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final TileAmount defaultInstance;
      public static TileAmount getDefaultInstance() {
        return defaultInstance;
      }

      public TileAmount getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private TileAmount(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                seat_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                amount_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_TileAmount_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_TileAmount_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.Builder.class);
      }

      public static com.google.protobuf.Parser<TileAmount> PARSER =
          new com.google.protobuf.AbstractParser<TileAmount>() {
        public TileAmount parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new TileAmount(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<TileAmount> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required uint32 seat = 1;
      public static final int SEAT_FIELD_NUMBER = 1;
      private int seat_;
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public int getSeat() {
        return seat_;
      }

      // required uint32 amount = 2;
      public static final int AMOUNT_FIELD_NUMBER = 2;
      private int amount_;
      /**
       * <code>required uint32 amount = 2;</code>
       */
      public boolean hasAmount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 amount = 2;</code>
       */
      public int getAmount() {
        return amount_;
      }

      private void initFields() {
        seat_ = 0;
        amount_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasSeat()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasAmount()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, seat_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, amount_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, seat_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, amount_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmountOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_TileAmount_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_TileAmount_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.Builder.class);
        }

        // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          seat_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          amount_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_TileAmount_descriptor;
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount getDefaultInstanceForType() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.getDefaultInstance();
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount build() {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount buildPartial() {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.seat_ = seat_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.amount_ = amount_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount) {
            return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount other) {
          if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.getDefaultInstance()) return this;
          if (other.hasSeat()) {
            setSeat(other.getSeat());
          }
          if (other.hasAmount()) {
            setAmount(other.getAmount());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasSeat()) {
            
            return false;
          }
          if (!hasAmount()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required uint32 seat = 1;
        private int seat_ ;
        /**
         * <code>required uint32 seat = 1;</code>
         */
        public boolean hasSeat() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 seat = 1;</code>
         */
        public int getSeat() {
          return seat_;
        }
        /**
         * <code>required uint32 seat = 1;</code>
         */
        public Builder setSeat(int value) {
          bitField0_ |= 0x00000001;
          seat_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 seat = 1;</code>
         */
        public Builder clearSeat() {
          bitField0_ = (bitField0_ & ~0x00000001);
          seat_ = 0;
          onChanged();
          return this;
        }

        // required uint32 amount = 2;
        private int amount_ ;
        /**
         * <code>required uint32 amount = 2;</code>
         */
        public boolean hasAmount() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required uint32 amount = 2;</code>
         */
        public int getAmount() {
          return amount_;
        }
        /**
         * <code>required uint32 amount = 2;</code>
         */
        public Builder setAmount(int value) {
          bitField0_ |= 0x00000002;
          amount_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 amount = 2;</code>
         */
        public Builder clearAmount() {
          bitField0_ = (bitField0_ & ~0x00000002);
          amount_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount)
      }

      static {
        defaultInstance = new TileAmount(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount)
    }

    private int bitField0_;
    // required uint32 startSeat = 1;
    public static final int STARTSEAT_FIELD_NUMBER = 1;
    private int startSeat_;
    /**
     * <code>required uint32 startSeat = 1;</code>
     *
     * <pre>
     *从哪一家门前抓牌
     * </pre>
     */
    public boolean hasStartSeat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 startSeat = 1;</code>
     *
     * <pre>
     *从哪一家门前抓牌
     * </pre>
     */
    public int getStartSeat() {
      return startSeat_;
    }

    // required uint32 startFrusta = 2;
    public static final int STARTFRUSTA_FIELD_NUMBER = 2;
    private int startFrusta_;
    /**
     * <code>required uint32 startFrusta = 2;</code>
     *
     * <pre>
     *从第几墩开始抓牌
     * </pre>
     */
    public boolean hasStartFrusta() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 startFrusta = 2;</code>
     *
     * <pre>
     *从第几墩开始抓牌
     * </pre>
     */
    public int getStartFrusta() {
      return startFrusta_;
    }

    // repeated uint32 tiles = 3;
    public static final int TILES_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> tiles_;
    /**
     * <code>repeated uint32 tiles = 3;</code>
     *
     * <pre>
     *抓到的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTilesList() {
      return tiles_;
    }
    /**
     * <code>repeated uint32 tiles = 3;</code>
     *
     * <pre>
     *抓到的牌
     * </pre>
     */
    public int getTilesCount() {
      return tiles_.size();
    }
    /**
     * <code>repeated uint32 tiles = 3;</code>
     *
     * <pre>
     *抓到的牌
     * </pre>
     */
    public int getTiles(int index) {
      return tiles_.get(index);
    }

    // repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;
    public static final int AMOUTS_FIELD_NUMBER = 4;
    private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount> amouts_;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
     *
     * <pre>
     *其余人的牌张数
     * </pre>
     */
    public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount> getAmoutsList() {
      return amouts_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
     *
     * <pre>
     *其余人的牌张数
     * </pre>
     */
    public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmountOrBuilder> 
        getAmoutsOrBuilderList() {
      return amouts_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
     *
     * <pre>
     *其余人的牌张数
     * </pre>
     */
    public int getAmoutsCount() {
      return amouts_.size();
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
     *
     * <pre>
     *其余人的牌张数
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount getAmouts(int index) {
      return amouts_.get(index);
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
     *
     * <pre>
     *其余人的牌张数
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmountOrBuilder getAmoutsOrBuilder(
        int index) {
      return amouts_.get(index);
    }

    // required uint32 waitingTime = 5;
    public static final int WAITINGTIME_FIELD_NUMBER = 5;
    private int waitingTime_;
    /**
     * <code>required uint32 waitingTime = 5;</code>
     *
     * <pre>
     *等候准备换牌的时间
     * </pre>
     */
    public boolean hasWaitingTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 waitingTime = 5;</code>
     *
     * <pre>
     *等候准备换牌的时间
     * </pre>
     */
    public int getWaitingTime() {
      return waitingTime_;
    }

    private void initFields() {
      startSeat_ = 0;
      startFrusta_ = 0;
      tiles_ = java.util.Collections.emptyList();
      amouts_ = java.util.Collections.emptyList();
      waitingTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasStartSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStartFrusta()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWaitingTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getAmoutsCount(); i++) {
        if (!getAmouts(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, startSeat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, startFrusta_);
      }
      for (int i = 0; i < tiles_.size(); i++) {
        output.writeUInt32(3, tiles_.get(i));
      }
      for (int i = 0; i < amouts_.size(); i++) {
        output.writeMessage(4, amouts_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(5, waitingTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, startSeat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, startFrusta_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < tiles_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(tiles_.get(i));
        }
        size += dataSize;
        size += 1 * getTilesList().size();
      }
      for (int i = 0; i < amouts_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, amouts_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, waitingTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfDeals}
     *
     * <pre>
     *========================================================================================
     * 开门发牌，服务器一次性发出所有牌，客户端做动画处理
     * #define OGID_DEAL							( OGID_GAME_MESSAGE + 9 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDealsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAmoutsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        startSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        startFrusta_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        tiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        if (amoutsBuilder_ == null) {
          amouts_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          amoutsBuilder_.clear();
        }
        waitingTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.startSeat_ = startSeat_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.startFrusta_ = startFrusta_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.tiles_ = tiles_;
        if (amoutsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            amouts_ = java.util.Collections.unmodifiableList(amouts_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.amouts_ = amouts_;
        } else {
          result.amouts_ = amoutsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.waitingTime_ = waitingTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.getDefaultInstance()) return this;
        if (other.hasStartSeat()) {
          setStartSeat(other.getStartSeat());
        }
        if (other.hasStartFrusta()) {
          setStartFrusta(other.getStartFrusta());
        }
        if (!other.tiles_.isEmpty()) {
          if (tiles_.isEmpty()) {
            tiles_ = other.tiles_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureTilesIsMutable();
            tiles_.addAll(other.tiles_);
          }
          onChanged();
        }
        if (amoutsBuilder_ == null) {
          if (!other.amouts_.isEmpty()) {
            if (amouts_.isEmpty()) {
              amouts_ = other.amouts_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureAmoutsIsMutable();
              amouts_.addAll(other.amouts_);
            }
            onChanged();
          }
        } else {
          if (!other.amouts_.isEmpty()) {
            if (amoutsBuilder_.isEmpty()) {
              amoutsBuilder_.dispose();
              amoutsBuilder_ = null;
              amouts_ = other.amouts_;
              bitField0_ = (bitField0_ & ~0x00000008);
              amoutsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAmoutsFieldBuilder() : null;
            } else {
              amoutsBuilder_.addAllMessages(other.amouts_);
            }
          }
        }
        if (other.hasWaitingTime()) {
          setWaitingTime(other.getWaitingTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasStartSeat()) {
          
          return false;
        }
        if (!hasStartFrusta()) {
          
          return false;
        }
        if (!hasWaitingTime()) {
          
          return false;
        }
        for (int i = 0; i < getAmoutsCount(); i++) {
          if (!getAmouts(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 startSeat = 1;
      private int startSeat_ ;
      /**
       * <code>required uint32 startSeat = 1;</code>
       *
       * <pre>
       *从哪一家门前抓牌
       * </pre>
       */
      public boolean hasStartSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 startSeat = 1;</code>
       *
       * <pre>
       *从哪一家门前抓牌
       * </pre>
       */
      public int getStartSeat() {
        return startSeat_;
      }
      /**
       * <code>required uint32 startSeat = 1;</code>
       *
       * <pre>
       *从哪一家门前抓牌
       * </pre>
       */
      public Builder setStartSeat(int value) {
        bitField0_ |= 0x00000001;
        startSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 startSeat = 1;</code>
       *
       * <pre>
       *从哪一家门前抓牌
       * </pre>
       */
      public Builder clearStartSeat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        startSeat_ = 0;
        onChanged();
        return this;
      }

      // required uint32 startFrusta = 2;
      private int startFrusta_ ;
      /**
       * <code>required uint32 startFrusta = 2;</code>
       *
       * <pre>
       *从第几墩开始抓牌
       * </pre>
       */
      public boolean hasStartFrusta() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 startFrusta = 2;</code>
       *
       * <pre>
       *从第几墩开始抓牌
       * </pre>
       */
      public int getStartFrusta() {
        return startFrusta_;
      }
      /**
       * <code>required uint32 startFrusta = 2;</code>
       *
       * <pre>
       *从第几墩开始抓牌
       * </pre>
       */
      public Builder setStartFrusta(int value) {
        bitField0_ |= 0x00000002;
        startFrusta_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 startFrusta = 2;</code>
       *
       * <pre>
       *从第几墩开始抓牌
       * </pre>
       */
      public Builder clearStartFrusta() {
        bitField0_ = (bitField0_ & ~0x00000002);
        startFrusta_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 tiles = 3;
      private java.util.List<java.lang.Integer> tiles_ = java.util.Collections.emptyList();
      private void ensureTilesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          tiles_ = new java.util.ArrayList<java.lang.Integer>(tiles_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint32 tiles = 3;</code>
       *
       * <pre>
       *抓到的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTilesList() {
        return java.util.Collections.unmodifiableList(tiles_);
      }
      /**
       * <code>repeated uint32 tiles = 3;</code>
       *
       * <pre>
       *抓到的牌
       * </pre>
       */
      public int getTilesCount() {
        return tiles_.size();
      }
      /**
       * <code>repeated uint32 tiles = 3;</code>
       *
       * <pre>
       *抓到的牌
       * </pre>
       */
      public int getTiles(int index) {
        return tiles_.get(index);
      }
      /**
       * <code>repeated uint32 tiles = 3;</code>
       *
       * <pre>
       *抓到的牌
       * </pre>
       */
      public Builder setTiles(
          int index, int value) {
        ensureTilesIsMutable();
        tiles_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 tiles = 3;</code>
       *
       * <pre>
       *抓到的牌
       * </pre>
       */
      public Builder addTiles(int value) {
        ensureTilesIsMutable();
        tiles_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 tiles = 3;</code>
       *
       * <pre>
       *抓到的牌
       * </pre>
       */
      public Builder addAllTiles(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTilesIsMutable();
        super.addAll(values, tiles_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 tiles = 3;</code>
       *
       * <pre>
       *抓到的牌
       * </pre>
       */
      public Builder clearTiles() {
        tiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;
      private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount> amouts_ =
        java.util.Collections.emptyList();
      private void ensureAmoutsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          amouts_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount>(amouts_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmountOrBuilder> amoutsBuilder_;

      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount> getAmoutsList() {
        if (amoutsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(amouts_);
        } else {
          return amoutsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public int getAmoutsCount() {
        if (amoutsBuilder_ == null) {
          return amouts_.size();
        } else {
          return amoutsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount getAmouts(int index) {
        if (amoutsBuilder_ == null) {
          return amouts_.get(index);
        } else {
          return amoutsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public Builder setAmouts(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount value) {
        if (amoutsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAmoutsIsMutable();
          amouts_.set(index, value);
          onChanged();
        } else {
          amoutsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public Builder setAmouts(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.Builder builderForValue) {
        if (amoutsBuilder_ == null) {
          ensureAmoutsIsMutable();
          amouts_.set(index, builderForValue.build());
          onChanged();
        } else {
          amoutsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public Builder addAmouts(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount value) {
        if (amoutsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAmoutsIsMutable();
          amouts_.add(value);
          onChanged();
        } else {
          amoutsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public Builder addAmouts(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount value) {
        if (amoutsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAmoutsIsMutable();
          amouts_.add(index, value);
          onChanged();
        } else {
          amoutsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public Builder addAmouts(
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.Builder builderForValue) {
        if (amoutsBuilder_ == null) {
          ensureAmoutsIsMutable();
          amouts_.add(builderForValue.build());
          onChanged();
        } else {
          amoutsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public Builder addAmouts(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.Builder builderForValue) {
        if (amoutsBuilder_ == null) {
          ensureAmoutsIsMutable();
          amouts_.add(index, builderForValue.build());
          onChanged();
        } else {
          amoutsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public Builder addAllAmouts(
          java.lang.Iterable<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount> values) {
        if (amoutsBuilder_ == null) {
          ensureAmoutsIsMutable();
          super.addAll(values, amouts_);
          onChanged();
        } else {
          amoutsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public Builder clearAmouts() {
        if (amoutsBuilder_ == null) {
          amouts_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          amoutsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public Builder removeAmouts(int index) {
        if (amoutsBuilder_ == null) {
          ensureAmoutsIsMutable();
          amouts_.remove(index);
          onChanged();
        } else {
          amoutsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.Builder getAmoutsBuilder(
          int index) {
        return getAmoutsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmountOrBuilder getAmoutsOrBuilder(
          int index) {
        if (amoutsBuilder_ == null) {
          return amouts_.get(index);  } else {
          return amoutsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmountOrBuilder> 
           getAmoutsOrBuilderList() {
        if (amoutsBuilder_ != null) {
          return amoutsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(amouts_);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.Builder addAmoutsBuilder() {
        return getAmoutsFieldBuilder().addBuilder(
            com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.Builder addAmoutsBuilder(
          int index) {
        return getAmoutsFieldBuilder().addBuilder(
            index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfDeals.TileAmount amouts = 4;</code>
       *
       * <pre>
       *其余人的牌张数
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.Builder> 
           getAmoutsBuilderList() {
        return getAmoutsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmountOrBuilder> 
          getAmoutsFieldBuilder() {
        if (amoutsBuilder_ == null) {
          amoutsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmount.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDeals.TileAmountOrBuilder>(
                  amouts_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          amouts_ = null;
        }
        return amoutsBuilder_;
      }

      // required uint32 waitingTime = 5;
      private int waitingTime_ ;
      /**
       * <code>required uint32 waitingTime = 5;</code>
       *
       * <pre>
       *等候准备换牌的时间
       * </pre>
       */
      public boolean hasWaitingTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 waitingTime = 5;</code>
       *
       * <pre>
       *等候准备换牌的时间
       * </pre>
       */
      public int getWaitingTime() {
        return waitingTime_;
      }
      /**
       * <code>required uint32 waitingTime = 5;</code>
       *
       * <pre>
       *等候准备换牌的时间
       * </pre>
       */
      public Builder setWaitingTime(int value) {
        bitField0_ |= 0x00000010;
        waitingTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 waitingTime = 5;</code>
       *
       * <pre>
       *等候准备换牌的时间
       * </pre>
       */
      public Builder clearWaitingTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        waitingTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfDeals)
    }

    static {
      defaultInstance = new NtfDeals(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfDeals)
  }

  public interface CReqSwapOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated uint32 tiles = 1;
    /**
     * <code>repeated uint32 tiles = 1;</code>
     */
    java.util.List<java.lang.Integer> getTilesList();
    /**
     * <code>repeated uint32 tiles = 1;</code>
     */
    int getTilesCount();
    /**
     * <code>repeated uint32 tiles = 1;</code>
     */
    int getTiles(int index);
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.CReqSwap}
   *
   * <pre>
   *========================================================================================
   * 换三张牌
   * #define OGID_SWAP							( OGID_GAME_MESSAGE + 11 )
   * 客户端发送准备交换的三张牌
   * </pre>
   */
  public static final class CReqSwap extends
      com.google.protobuf.GeneratedMessage
      implements CReqSwapOrBuilder {
    // Use CReqSwap.newBuilder() to construct.
    private CReqSwap(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CReqSwap(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CReqSwap defaultInstance;
    public static CReqSwap getDefaultInstance() {
      return defaultInstance;
    }

    public CReqSwap getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CReqSwap(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                tiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              tiles_.add(input.readUInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                tiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                tiles_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqSwap_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqSwap_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap.Builder.class);
    }

    public static com.google.protobuf.Parser<CReqSwap> PARSER =
        new com.google.protobuf.AbstractParser<CReqSwap>() {
      public CReqSwap parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CReqSwap(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CReqSwap> getParserForType() {
      return PARSER;
    }

    // repeated uint32 tiles = 1;
    public static final int TILES_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> tiles_;
    /**
     * <code>repeated uint32 tiles = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getTilesList() {
      return tiles_;
    }
    /**
     * <code>repeated uint32 tiles = 1;</code>
     */
    public int getTilesCount() {
      return tiles_.size();
    }
    /**
     * <code>repeated uint32 tiles = 1;</code>
     */
    public int getTiles(int index) {
      return tiles_.get(index);
    }

    private void initFields() {
      tiles_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < tiles_.size(); i++) {
        output.writeUInt32(1, tiles_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < tiles_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(tiles_.get(i));
        }
        size += dataSize;
        size += 1 * getTilesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.CReqSwap}
     *
     * <pre>
     *========================================================================================
     * 换三张牌
     * #define OGID_SWAP							( OGID_GAME_MESSAGE + 11 )
     * 客户端发送准备交换的三张牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwapOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqSwap_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqSwap_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqSwap_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.tiles_ = tiles_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap.getDefaultInstance()) return this;
        if (!other.tiles_.isEmpty()) {
          if (tiles_.isEmpty()) {
            tiles_ = other.tiles_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTilesIsMutable();
            tiles_.addAll(other.tiles_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqSwap) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated uint32 tiles = 1;
      private java.util.List<java.lang.Integer> tiles_ = java.util.Collections.emptyList();
      private void ensureTilesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          tiles_ = new java.util.ArrayList<java.lang.Integer>(tiles_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated uint32 tiles = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getTilesList() {
        return java.util.Collections.unmodifiableList(tiles_);
      }
      /**
       * <code>repeated uint32 tiles = 1;</code>
       */
      public int getTilesCount() {
        return tiles_.size();
      }
      /**
       * <code>repeated uint32 tiles = 1;</code>
       */
      public int getTiles(int index) {
        return tiles_.get(index);
      }
      /**
       * <code>repeated uint32 tiles = 1;</code>
       */
      public Builder setTiles(
          int index, int value) {
        ensureTilesIsMutable();
        tiles_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 tiles = 1;</code>
       */
      public Builder addTiles(int value) {
        ensureTilesIsMutable();
        tiles_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 tiles = 1;</code>
       */
      public Builder addAllTiles(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTilesIsMutable();
        super.addAll(values, tiles_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 tiles = 1;</code>
       */
      public Builder clearTiles() {
        tiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.CReqSwap)
    }

    static {
      defaultInstance = new CReqSwap(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.CReqSwap)
  }

  public interface NTFSwapPreparedOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 seat = 1;
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    boolean hasSeat();
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    int getSeat();

    // repeated uint32 tiles = 2;
    /**
     * <code>repeated uint32 tiles = 2;</code>
     *
     * <pre>
     *本人发送拿出的3张牌，其他人收到3个0
     * </pre>
     */
    java.util.List<java.lang.Integer> getTilesList();
    /**
     * <code>repeated uint32 tiles = 2;</code>
     *
     * <pre>
     *本人发送拿出的3张牌，其他人收到3个0
     * </pre>
     */
    int getTilesCount();
    /**
     * <code>repeated uint32 tiles = 2;</code>
     *
     * <pre>
     *本人发送拿出的3张牌，其他人收到3个0
     * </pre>
     */
    int getTiles(int index);
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NTFSwapPrepared}
   *
   * <pre>
   * 有玩家准备好换牌
   * </pre>
   */
  public static final class NTFSwapPrepared extends
      com.google.protobuf.GeneratedMessage
      implements NTFSwapPreparedOrBuilder {
    // Use NTFSwapPrepared.newBuilder() to construct.
    private NTFSwapPrepared(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NTFSwapPrepared(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NTFSwapPrepared defaultInstance;
    public static NTFSwapPrepared getDefaultInstance() {
      return defaultInstance;
    }

    public NTFSwapPrepared getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NTFSwapPrepared(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seat_ = input.readUInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                tiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              tiles_.add(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                tiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                tiles_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NTFSwapPrepared_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NTFSwapPrepared_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared.Builder.class);
    }

    public static com.google.protobuf.Parser<NTFSwapPrepared> PARSER =
        new com.google.protobuf.AbstractParser<NTFSwapPrepared>() {
      public NTFSwapPrepared parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NTFSwapPrepared(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NTFSwapPrepared> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private int seat_;
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public boolean hasSeat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public int getSeat() {
      return seat_;
    }

    // repeated uint32 tiles = 2;
    public static final int TILES_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> tiles_;
    /**
     * <code>repeated uint32 tiles = 2;</code>
     *
     * <pre>
     *本人发送拿出的3张牌，其他人收到3个0
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTilesList() {
      return tiles_;
    }
    /**
     * <code>repeated uint32 tiles = 2;</code>
     *
     * <pre>
     *本人发送拿出的3张牌，其他人收到3个0
     * </pre>
     */
    public int getTilesCount() {
      return tiles_.size();
    }
    /**
     * <code>repeated uint32 tiles = 2;</code>
     *
     * <pre>
     *本人发送拿出的3张牌，其他人收到3个0
     * </pre>
     */
    public int getTiles(int index) {
      return tiles_.get(index);
    }

    private void initFields() {
      seat_ = 0;
      tiles_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, seat_);
      }
      for (int i = 0; i < tiles_.size(); i++) {
        output.writeUInt32(2, tiles_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, seat_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < tiles_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(tiles_.get(i));
        }
        size += dataSize;
        size += 1 * getTilesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NTFSwapPrepared}
     *
     * <pre>
     * 有玩家准备好换牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPreparedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NTFSwapPrepared_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NTFSwapPrepared_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        tiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NTFSwapPrepared_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seat_ = seat_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.tiles_ = tiles_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (!other.tiles_.isEmpty()) {
          if (tiles_.isEmpty()) {
            tiles_ = other.tiles_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTilesIsMutable();
            tiles_.addAll(other.tiles_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSeat()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NTFSwapPrepared) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 seat = 1;
      private int seat_ ;
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public int getSeat() {
        return seat_;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder setSeat(int value) {
        bitField0_ |= 0x00000001;
        seat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder clearSeat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seat_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 tiles = 2;
      private java.util.List<java.lang.Integer> tiles_ = java.util.Collections.emptyList();
      private void ensureTilesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          tiles_ = new java.util.ArrayList<java.lang.Integer>(tiles_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint32 tiles = 2;</code>
       *
       * <pre>
       *本人发送拿出的3张牌，其他人收到3个0
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTilesList() {
        return java.util.Collections.unmodifiableList(tiles_);
      }
      /**
       * <code>repeated uint32 tiles = 2;</code>
       *
       * <pre>
       *本人发送拿出的3张牌，其他人收到3个0
       * </pre>
       */
      public int getTilesCount() {
        return tiles_.size();
      }
      /**
       * <code>repeated uint32 tiles = 2;</code>
       *
       * <pre>
       *本人发送拿出的3张牌，其他人收到3个0
       * </pre>
       */
      public int getTiles(int index) {
        return tiles_.get(index);
      }
      /**
       * <code>repeated uint32 tiles = 2;</code>
       *
       * <pre>
       *本人发送拿出的3张牌，其他人收到3个0
       * </pre>
       */
      public Builder setTiles(
          int index, int value) {
        ensureTilesIsMutable();
        tiles_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 tiles = 2;</code>
       *
       * <pre>
       *本人发送拿出的3张牌，其他人收到3个0
       * </pre>
       */
      public Builder addTiles(int value) {
        ensureTilesIsMutable();
        tiles_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 tiles = 2;</code>
       *
       * <pre>
       *本人发送拿出的3张牌，其他人收到3个0
       * </pre>
       */
      public Builder addAllTiles(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTilesIsMutable();
        super.addAll(values, tiles_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 tiles = 2;</code>
       *
       * <pre>
       *本人发送拿出的3张牌，其他人收到3个0
       * </pre>
       */
      public Builder clearTiles() {
        tiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NTFSwapPrepared)
    }

    static {
      defaultInstance = new NTFSwapPrepared(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NTFSwapPrepared)
  }

  public interface SAckSwapOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated uint32 oldTiles = 1;
    /**
     * <code>repeated uint32 oldTiles = 1;</code>
     */
    java.util.List<java.lang.Integer> getOldTilesList();
    /**
     * <code>repeated uint32 oldTiles = 1;</code>
     */
    int getOldTilesCount();
    /**
     * <code>repeated uint32 oldTiles = 1;</code>
     */
    int getOldTiles(int index);

    // repeated uint32 newTiles = 2;
    /**
     * <code>repeated uint32 newTiles = 2;</code>
     */
    java.util.List<java.lang.Integer> getNewTilesList();
    /**
     * <code>repeated uint32 newTiles = 2;</code>
     */
    int getNewTilesCount();
    /**
     * <code>repeated uint32 newTiles = 2;</code>
     */
    int getNewTiles(int index);

    // optional uint32 action = 3;
    /**
     * <code>optional uint32 action = 3;</code>
     */
    boolean hasAction();
    /**
     * <code>optional uint32 action = 3;</code>
     */
    int getAction();

    // optional uint32 actTime = 4;
    /**
     * <code>optional uint32 actTime = 4;</code>
     */
    boolean hasActTime();
    /**
     * <code>optional uint32 actTime = 4;</code>
     */
    int getActTime();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.SAckSwap}
   *
   * <pre>
   *========================================================================================
   * 换三张牌
   * #define OGID_SWAP_RESULT						( OGID_GAME_MESSAGE + 13 )
   * 服务器返回换回的三张牌
   * </pre>
   */
  public static final class SAckSwap extends
      com.google.protobuf.GeneratedMessage
      implements SAckSwapOrBuilder {
    // Use SAckSwap.newBuilder() to construct.
    private SAckSwap(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SAckSwap(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SAckSwap defaultInstance;
    public static SAckSwap getDefaultInstance() {
      return defaultInstance;
    }

    public SAckSwap getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SAckSwap(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                oldTiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              oldTiles_.add(input.readUInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                oldTiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                oldTiles_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                newTiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              newTiles_.add(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                newTiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                newTiles_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              action_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              actTime_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          oldTiles_ = java.util.Collections.unmodifiableList(oldTiles_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          newTiles_ = java.util.Collections.unmodifiableList(newTiles_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_SAckSwap_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_SAckSwap_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap.Builder.class);
    }

    public static com.google.protobuf.Parser<SAckSwap> PARSER =
        new com.google.protobuf.AbstractParser<SAckSwap>() {
      public SAckSwap parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SAckSwap(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SAckSwap> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated uint32 oldTiles = 1;
    public static final int OLDTILES_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> oldTiles_;
    /**
     * <code>repeated uint32 oldTiles = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getOldTilesList() {
      return oldTiles_;
    }
    /**
     * <code>repeated uint32 oldTiles = 1;</code>
     */
    public int getOldTilesCount() {
      return oldTiles_.size();
    }
    /**
     * <code>repeated uint32 oldTiles = 1;</code>
     */
    public int getOldTiles(int index) {
      return oldTiles_.get(index);
    }

    // repeated uint32 newTiles = 2;
    public static final int NEWTILES_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> newTiles_;
    /**
     * <code>repeated uint32 newTiles = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getNewTilesList() {
      return newTiles_;
    }
    /**
     * <code>repeated uint32 newTiles = 2;</code>
     */
    public int getNewTilesCount() {
      return newTiles_.size();
    }
    /**
     * <code>repeated uint32 newTiles = 2;</code>
     */
    public int getNewTiles(int index) {
      return newTiles_.get(index);
    }

    // optional uint32 action = 3;
    public static final int ACTION_FIELD_NUMBER = 3;
    private int action_;
    /**
     * <code>optional uint32 action = 3;</code>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 action = 3;</code>
     */
    public int getAction() {
      return action_;
    }

    // optional uint32 actTime = 4;
    public static final int ACTTIME_FIELD_NUMBER = 4;
    private int actTime_;
    /**
     * <code>optional uint32 actTime = 4;</code>
     */
    public boolean hasActTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 actTime = 4;</code>
     */
    public int getActTime() {
      return actTime_;
    }

    private void initFields() {
      oldTiles_ = java.util.Collections.emptyList();
      newTiles_ = java.util.Collections.emptyList();
      action_ = 0;
      actTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < oldTiles_.size(); i++) {
        output.writeUInt32(1, oldTiles_.get(i));
      }
      for (int i = 0; i < newTiles_.size(); i++) {
        output.writeUInt32(2, newTiles_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(3, action_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(4, actTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < oldTiles_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(oldTiles_.get(i));
        }
        size += dataSize;
        size += 1 * getOldTilesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < newTiles_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(newTiles_.get(i));
        }
        size += dataSize;
        size += 1 * getNewTilesList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, action_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, actTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.SAckSwap}
     *
     * <pre>
     *========================================================================================
     * 换三张牌
     * #define OGID_SWAP_RESULT						( OGID_GAME_MESSAGE + 13 )
     * 服务器返回换回的三张牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwapOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_SAckSwap_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_SAckSwap_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        oldTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        newTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        action_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        actTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_SAckSwap_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          oldTiles_ = java.util.Collections.unmodifiableList(oldTiles_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.oldTiles_ = oldTiles_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          newTiles_ = java.util.Collections.unmodifiableList(newTiles_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.newTiles_ = newTiles_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.action_ = action_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.actTime_ = actTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap.getDefaultInstance()) return this;
        if (!other.oldTiles_.isEmpty()) {
          if (oldTiles_.isEmpty()) {
            oldTiles_ = other.oldTiles_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureOldTilesIsMutable();
            oldTiles_.addAll(other.oldTiles_);
          }
          onChanged();
        }
        if (!other.newTiles_.isEmpty()) {
          if (newTiles_.isEmpty()) {
            newTiles_ = other.newTiles_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureNewTilesIsMutable();
            newTiles_.addAll(other.newTiles_);
          }
          onChanged();
        }
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (other.hasActTime()) {
          setActTime(other.getActTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.SAckSwap) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated uint32 oldTiles = 1;
      private java.util.List<java.lang.Integer> oldTiles_ = java.util.Collections.emptyList();
      private void ensureOldTilesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          oldTiles_ = new java.util.ArrayList<java.lang.Integer>(oldTiles_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated uint32 oldTiles = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getOldTilesList() {
        return java.util.Collections.unmodifiableList(oldTiles_);
      }
      /**
       * <code>repeated uint32 oldTiles = 1;</code>
       */
      public int getOldTilesCount() {
        return oldTiles_.size();
      }
      /**
       * <code>repeated uint32 oldTiles = 1;</code>
       */
      public int getOldTiles(int index) {
        return oldTiles_.get(index);
      }
      /**
       * <code>repeated uint32 oldTiles = 1;</code>
       */
      public Builder setOldTiles(
          int index, int value) {
        ensureOldTilesIsMutable();
        oldTiles_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 oldTiles = 1;</code>
       */
      public Builder addOldTiles(int value) {
        ensureOldTilesIsMutable();
        oldTiles_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 oldTiles = 1;</code>
       */
      public Builder addAllOldTiles(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOldTilesIsMutable();
        super.addAll(values, oldTiles_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 oldTiles = 1;</code>
       */
      public Builder clearOldTiles() {
        oldTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated uint32 newTiles = 2;
      private java.util.List<java.lang.Integer> newTiles_ = java.util.Collections.emptyList();
      private void ensureNewTilesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          newTiles_ = new java.util.ArrayList<java.lang.Integer>(newTiles_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint32 newTiles = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getNewTilesList() {
        return java.util.Collections.unmodifiableList(newTiles_);
      }
      /**
       * <code>repeated uint32 newTiles = 2;</code>
       */
      public int getNewTilesCount() {
        return newTiles_.size();
      }
      /**
       * <code>repeated uint32 newTiles = 2;</code>
       */
      public int getNewTiles(int index) {
        return newTiles_.get(index);
      }
      /**
       * <code>repeated uint32 newTiles = 2;</code>
       */
      public Builder setNewTiles(
          int index, int value) {
        ensureNewTilesIsMutable();
        newTiles_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 newTiles = 2;</code>
       */
      public Builder addNewTiles(int value) {
        ensureNewTilesIsMutable();
        newTiles_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 newTiles = 2;</code>
       */
      public Builder addAllNewTiles(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureNewTilesIsMutable();
        super.addAll(values, newTiles_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 newTiles = 2;</code>
       */
      public Builder clearNewTiles() {
        newTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional uint32 action = 3;
      private int action_ ;
      /**
       * <code>optional uint32 action = 3;</code>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 action = 3;</code>
       */
      public int getAction() {
        return action_;
      }
      /**
       * <code>optional uint32 action = 3;</code>
       */
      public Builder setAction(int value) {
        bitField0_ |= 0x00000004;
        action_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 action = 3;</code>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000004);
        action_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 actTime = 4;
      private int actTime_ ;
      /**
       * <code>optional uint32 actTime = 4;</code>
       */
      public boolean hasActTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 actTime = 4;</code>
       */
      public int getActTime() {
        return actTime_;
      }
      /**
       * <code>optional uint32 actTime = 4;</code>
       */
      public Builder setActTime(int value) {
        bitField0_ |= 0x00000008;
        actTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 actTime = 4;</code>
       */
      public Builder clearActTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        actTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.SAckSwap)
    }

    static {
      defaultInstance = new SAckSwap(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.SAckSwap)
  }

  public interface NtfDiscardOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 tile = 1;
    /**
     * <code>required uint32 tile = 1;</code>
     */
    boolean hasTile();
    /**
     * <code>required uint32 tile = 1;</code>
     */
    int getTile();

    // required uint32 seat = 2;
    /**
     * <code>required uint32 seat = 2;</code>
     */
    boolean hasSeat();
    /**
     * <code>required uint32 seat = 2;</code>
     */
    int getSeat();

    // optional uint32 action = 3;
    /**
     * <code>optional uint32 action = 3;</code>
     */
    boolean hasAction();
    /**
     * <code>optional uint32 action = 3;</code>
     */
    int getAction();

    // optional uint32 actTime = 4;
    /**
     * <code>optional uint32 actTime = 4;</code>
     */
    boolean hasActTime();
    /**
     * <code>optional uint32 actTime = 4;</code>
     */
    int getActTime();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfDiscard}
   *
   * <pre>
   *========================================================================================
   * 有人打牌
   * #define OGID_DISCARD							( OGID_GAME_MESSAGE + 15 )
   * </pre>
   */
  public static final class NtfDiscard extends
      com.google.protobuf.GeneratedMessage
      implements NtfDiscardOrBuilder {
    // Use NtfDiscard.newBuilder() to construct.
    private NtfDiscard(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfDiscard(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfDiscard defaultInstance;
    public static NtfDiscard getDefaultInstance() {
      return defaultInstance;
    }

    public NtfDiscard getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfDiscard(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              tile_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              seat_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              action_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              actTime_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDiscard_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDiscard_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfDiscard> PARSER =
        new com.google.protobuf.AbstractParser<NtfDiscard>() {
      public NtfDiscard parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfDiscard(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfDiscard> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 tile = 1;
    public static final int TILE_FIELD_NUMBER = 1;
    private int tile_;
    /**
     * <code>required uint32 tile = 1;</code>
     */
    public boolean hasTile() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 tile = 1;</code>
     */
    public int getTile() {
      return tile_;
    }

    // required uint32 seat = 2;
    public static final int SEAT_FIELD_NUMBER = 2;
    private int seat_;
    /**
     * <code>required uint32 seat = 2;</code>
     */
    public boolean hasSeat() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 seat = 2;</code>
     */
    public int getSeat() {
      return seat_;
    }

    // optional uint32 action = 3;
    public static final int ACTION_FIELD_NUMBER = 3;
    private int action_;
    /**
     * <code>optional uint32 action = 3;</code>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 action = 3;</code>
     */
    public int getAction() {
      return action_;
    }

    // optional uint32 actTime = 4;
    public static final int ACTTIME_FIELD_NUMBER = 4;
    private int actTime_;
    /**
     * <code>optional uint32 actTime = 4;</code>
     */
    public boolean hasActTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 actTime = 4;</code>
     */
    public int getActTime() {
      return actTime_;
    }

    private void initFields() {
      tile_ = 0;
      seat_ = 0;
      action_ = 0;
      actTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTile()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, tile_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, seat_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, action_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, actTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, tile_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, seat_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, action_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, actTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfDiscard}
     *
     * <pre>
     *========================================================================================
     * 有人打牌
     * #define OGID_DISCARD							( OGID_GAME_MESSAGE + 15 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscardOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDiscard_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDiscard_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tile_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        seat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        action_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        actTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDiscard_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tile_ = tile_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.seat_ = seat_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.action_ = action_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.actTime_ = actTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard.getDefaultInstance()) return this;
        if (other.hasTile()) {
          setTile(other.getTile());
        }
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (other.hasActTime()) {
          setActTime(other.getActTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTile()) {
          
          return false;
        }
        if (!hasSeat()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDiscard) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 tile = 1;
      private int tile_ ;
      /**
       * <code>required uint32 tile = 1;</code>
       */
      public boolean hasTile() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 tile = 1;</code>
       */
      public int getTile() {
        return tile_;
      }
      /**
       * <code>required uint32 tile = 1;</code>
       */
      public Builder setTile(int value) {
        bitField0_ |= 0x00000001;
        tile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 tile = 1;</code>
       */
      public Builder clearTile() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tile_ = 0;
        onChanged();
        return this;
      }

      // required uint32 seat = 2;
      private int seat_ ;
      /**
       * <code>required uint32 seat = 2;</code>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 seat = 2;</code>
       */
      public int getSeat() {
        return seat_;
      }
      /**
       * <code>required uint32 seat = 2;</code>
       */
      public Builder setSeat(int value) {
        bitField0_ |= 0x00000002;
        seat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 seat = 2;</code>
       */
      public Builder clearSeat() {
        bitField0_ = (bitField0_ & ~0x00000002);
        seat_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 action = 3;
      private int action_ ;
      /**
       * <code>optional uint32 action = 3;</code>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 action = 3;</code>
       */
      public int getAction() {
        return action_;
      }
      /**
       * <code>optional uint32 action = 3;</code>
       */
      public Builder setAction(int value) {
        bitField0_ |= 0x00000004;
        action_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 action = 3;</code>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000004);
        action_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 actTime = 4;
      private int actTime_ ;
      /**
       * <code>optional uint32 actTime = 4;</code>
       */
      public boolean hasActTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 actTime = 4;</code>
       */
      public int getActTime() {
        return actTime_;
      }
      /**
       * <code>optional uint32 actTime = 4;</code>
       */
      public Builder setActTime(int value) {
        bitField0_ |= 0x00000008;
        actTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 actTime = 4;</code>
       */
      public Builder clearActTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        actTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfDiscard)
    }

    static {
      defaultInstance = new NtfDiscard(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfDiscard)
  }

  public interface NtfDrawOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 seat = 1;
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *抓牌者座位号
     * </pre>
     */
    boolean hasSeat();
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *抓牌者座位号
     * </pre>
     */
    int getSeat();

    // required bool front = 2 [default = true];
    /**
     * <code>required bool front = 2 [default = true];</code>
     *
     * <pre>
     *从前边抓还是后面抓牌
     * </pre>
     */
    boolean hasFront();
    /**
     * <code>required bool front = 2 [default = true];</code>
     *
     * <pre>
     *从前边抓还是后面抓牌
     * </pre>
     */
    boolean getFront();

    // optional uint32 tileId = 3;
    /**
     * <code>optional uint32 tileId = 3;</code>
     *
     * <pre>
     *自己抓牌时，抓的牌的ID
     * </pre>
     */
    boolean hasTileId();
    /**
     * <code>optional uint32 tileId = 3;</code>
     *
     * <pre>
     *自己抓牌时，抓的牌的ID
     * </pre>
     */
    int getTileId();

    // optional uint32 action = 4;
    /**
     * <code>optional uint32 action = 4;</code>
     */
    boolean hasAction();
    /**
     * <code>optional uint32 action = 4;</code>
     */
    int getAction();

    // optional uint32 actTime = 5;
    /**
     * <code>optional uint32 actTime = 5;</code>
     */
    boolean hasActTime();
    /**
     * <code>optional uint32 actTime = 5;</code>
     */
    int getActTime();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfDraw}
   *
   * <pre>
   *========================================================================================
   * 抓牌
   * #define OGID_DRAW							( OGID_GAME_MESSAGE + 17 )
   * </pre>
   */
  public static final class NtfDraw extends
      com.google.protobuf.GeneratedMessage
      implements NtfDrawOrBuilder {
    // Use NtfDraw.newBuilder() to construct.
    private NtfDraw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfDraw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfDraw defaultInstance;
    public static NtfDraw getDefaultInstance() {
      return defaultInstance;
    }

    public NtfDraw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfDraw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seat_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              front_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              tileId_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              action_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              actTime_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDraw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDraw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfDraw> PARSER =
        new com.google.protobuf.AbstractParser<NtfDraw>() {
      public NtfDraw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfDraw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfDraw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private int seat_;
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *抓牌者座位号
     * </pre>
     */
    public boolean hasSeat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 seat = 1;</code>
     *
     * <pre>
     *抓牌者座位号
     * </pre>
     */
    public int getSeat() {
      return seat_;
    }

    // required bool front = 2 [default = true];
    public static final int FRONT_FIELD_NUMBER = 2;
    private boolean front_;
    /**
     * <code>required bool front = 2 [default = true];</code>
     *
     * <pre>
     *从前边抓还是后面抓牌
     * </pre>
     */
    public boolean hasFront() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bool front = 2 [default = true];</code>
     *
     * <pre>
     *从前边抓还是后面抓牌
     * </pre>
     */
    public boolean getFront() {
      return front_;
    }

    // optional uint32 tileId = 3;
    public static final int TILEID_FIELD_NUMBER = 3;
    private int tileId_;
    /**
     * <code>optional uint32 tileId = 3;</code>
     *
     * <pre>
     *自己抓牌时，抓的牌的ID
     * </pre>
     */
    public boolean hasTileId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 tileId = 3;</code>
     *
     * <pre>
     *自己抓牌时，抓的牌的ID
     * </pre>
     */
    public int getTileId() {
      return tileId_;
    }

    // optional uint32 action = 4;
    public static final int ACTION_FIELD_NUMBER = 4;
    private int action_;
    /**
     * <code>optional uint32 action = 4;</code>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 action = 4;</code>
     */
    public int getAction() {
      return action_;
    }

    // optional uint32 actTime = 5;
    public static final int ACTTIME_FIELD_NUMBER = 5;
    private int actTime_;
    /**
     * <code>optional uint32 actTime = 5;</code>
     */
    public boolean hasActTime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 actTime = 5;</code>
     */
    public int getActTime() {
      return actTime_;
    }

    private void initFields() {
      seat_ = 0;
      front_ = true;
      tileId_ = 0;
      action_ = 0;
      actTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFront()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, front_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, tileId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, action_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, actTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, front_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, tileId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, action_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, actTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfDraw}
     *
     * <pre>
     *========================================================================================
     * 抓牌
     * #define OGID_DRAW							( OGID_GAME_MESSAGE + 17 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDrawOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDraw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDraw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        front_ = true;
        bitField0_ = (bitField0_ & ~0x00000002);
        tileId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        action_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        actTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfDraw_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seat_ = seat_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.front_ = front_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.tileId_ = tileId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.action_ = action_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.actTime_ = actTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasFront()) {
          setFront(other.getFront());
        }
        if (other.hasTileId()) {
          setTileId(other.getTileId());
        }
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (other.hasActTime()) {
          setActTime(other.getActTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSeat()) {
          
          return false;
        }
        if (!hasFront()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfDraw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 seat = 1;
      private int seat_ ;
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *抓牌者座位号
       * </pre>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *抓牌者座位号
       * </pre>
       */
      public int getSeat() {
        return seat_;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *抓牌者座位号
       * </pre>
       */
      public Builder setSeat(int value) {
        bitField0_ |= 0x00000001;
        seat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *抓牌者座位号
       * </pre>
       */
      public Builder clearSeat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seat_ = 0;
        onChanged();
        return this;
      }

      // required bool front = 2 [default = true];
      private boolean front_ = true;
      /**
       * <code>required bool front = 2 [default = true];</code>
       *
       * <pre>
       *从前边抓还是后面抓牌
       * </pre>
       */
      public boolean hasFront() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bool front = 2 [default = true];</code>
       *
       * <pre>
       *从前边抓还是后面抓牌
       * </pre>
       */
      public boolean getFront() {
        return front_;
      }
      /**
       * <code>required bool front = 2 [default = true];</code>
       *
       * <pre>
       *从前边抓还是后面抓牌
       * </pre>
       */
      public Builder setFront(boolean value) {
        bitField0_ |= 0x00000002;
        front_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool front = 2 [default = true];</code>
       *
       * <pre>
       *从前边抓还是后面抓牌
       * </pre>
       */
      public Builder clearFront() {
        bitField0_ = (bitField0_ & ~0x00000002);
        front_ = true;
        onChanged();
        return this;
      }

      // optional uint32 tileId = 3;
      private int tileId_ ;
      /**
       * <code>optional uint32 tileId = 3;</code>
       *
       * <pre>
       *自己抓牌时，抓的牌的ID
       * </pre>
       */
      public boolean hasTileId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 tileId = 3;</code>
       *
       * <pre>
       *自己抓牌时，抓的牌的ID
       * </pre>
       */
      public int getTileId() {
        return tileId_;
      }
      /**
       * <code>optional uint32 tileId = 3;</code>
       *
       * <pre>
       *自己抓牌时，抓的牌的ID
       * </pre>
       */
      public Builder setTileId(int value) {
        bitField0_ |= 0x00000004;
        tileId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 tileId = 3;</code>
       *
       * <pre>
       *自己抓牌时，抓的牌的ID
       * </pre>
       */
      public Builder clearTileId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        tileId_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 action = 4;
      private int action_ ;
      /**
       * <code>optional uint32 action = 4;</code>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 action = 4;</code>
       */
      public int getAction() {
        return action_;
      }
      /**
       * <code>optional uint32 action = 4;</code>
       */
      public Builder setAction(int value) {
        bitField0_ |= 0x00000008;
        action_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 action = 4;</code>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000008);
        action_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 actTime = 5;
      private int actTime_ ;
      /**
       * <code>optional uint32 actTime = 5;</code>
       */
      public boolean hasActTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 actTime = 5;</code>
       */
      public int getActTime() {
        return actTime_;
      }
      /**
       * <code>optional uint32 actTime = 5;</code>
       */
      public Builder setActTime(int value) {
        bitField0_ |= 0x00000010;
        actTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 actTime = 5;</code>
       */
      public Builder clearActTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        actTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfDraw)
    }

    static {
      defaultInstance = new NtfDraw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfDraw)
  }

  public interface CReqActOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 seat = 1;
    /**
     * <code>required uint32 seat = 1;</code>
     */
    boolean hasSeat();
    /**
     * <code>required uint32 seat = 1;</code>
     */
    int getSeat();

    // required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;
    /**
     * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
     *
     * <pre>
     *放弃，吃，碰，杠，听
     * </pre>
     */
    boolean hasAct();
    /**
     * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
     *
     * <pre>
     *放弃，吃，碰，杠，听
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType getAct();

    // optional uint32 provider = 3;
    /**
     * <code>optional uint32 provider = 3;</code>
     */
    boolean hasProvider();
    /**
     * <code>optional uint32 provider = 3;</code>
     */
    int getProvider();

    // optional uint32 targetTile = 4;
    /**
     * <code>optional uint32 targetTile = 4;</code>
     */
    boolean hasTargetTile();
    /**
     * <code>optional uint32 targetTile = 4;</code>
     */
    int getTargetTile();

    // repeated uint32 rootTiles = 5;
    /**
     * <code>repeated uint32 rootTiles = 5;</code>
     */
    java.util.List<java.lang.Integer> getRootTilesList();
    /**
     * <code>repeated uint32 rootTiles = 5;</code>
     */
    int getRootTilesCount();
    /**
     * <code>repeated uint32 rootTiles = 5;</code>
     */
    int getRootTiles(int index);
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.CReqAct}
   *
   * <pre>
   *========================================================================================
   * 动作请求
   * #define OGID_ACTION							( OGID_GAME_MESSAGE + 19 )
   * </pre>
   */
  public static final class CReqAct extends
      com.google.protobuf.GeneratedMessage
      implements CReqActOrBuilder {
    // Use CReqAct.newBuilder() to construct.
    private CReqAct(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CReqAct(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CReqAct defaultInstance;
    public static CReqAct getDefaultInstance() {
      return defaultInstance;
    }

    public CReqAct getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CReqAct(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seat_ = input.readUInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType value = com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                act_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              provider_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              targetTile_ = input.readUInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                rootTiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              rootTiles_.add(input.readUInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                rootTiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                rootTiles_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          rootTiles_ = java.util.Collections.unmodifiableList(rootTiles_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqAct_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqAct_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct.Builder.class);
    }

    public static com.google.protobuf.Parser<CReqAct> PARSER =
        new com.google.protobuf.AbstractParser<CReqAct>() {
      public CReqAct parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CReqAct(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CReqAct> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private int seat_;
    /**
     * <code>required uint32 seat = 1;</code>
     */
    public boolean hasSeat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 seat = 1;</code>
     */
    public int getSeat() {
      return seat_;
    }

    // required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;
    public static final int ACT_FIELD_NUMBER = 2;
    private com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType act_;
    /**
     * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
     *
     * <pre>
     *放弃，吃，碰，杠，听
     * </pre>
     */
    public boolean hasAct() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
     *
     * <pre>
     *放弃，吃，碰，杠，听
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType getAct() {
      return act_;
    }

    // optional uint32 provider = 3;
    public static final int PROVIDER_FIELD_NUMBER = 3;
    private int provider_;
    /**
     * <code>optional uint32 provider = 3;</code>
     */
    public boolean hasProvider() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 provider = 3;</code>
     */
    public int getProvider() {
      return provider_;
    }

    // optional uint32 targetTile = 4;
    public static final int TARGETTILE_FIELD_NUMBER = 4;
    private int targetTile_;
    /**
     * <code>optional uint32 targetTile = 4;</code>
     */
    public boolean hasTargetTile() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 targetTile = 4;</code>
     */
    public int getTargetTile() {
      return targetTile_;
    }

    // repeated uint32 rootTiles = 5;
    public static final int ROOTTILES_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> rootTiles_;
    /**
     * <code>repeated uint32 rootTiles = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getRootTilesList() {
      return rootTiles_;
    }
    /**
     * <code>repeated uint32 rootTiles = 5;</code>
     */
    public int getRootTilesCount() {
      return rootTiles_.size();
    }
    /**
     * <code>repeated uint32 rootTiles = 5;</code>
     */
    public int getRootTiles(int index) {
      return rootTiles_.get(index);
    }

    private void initFields() {
      seat_ = 0;
      act_ = com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType.ACT_GIVEUP;
      provider_ = 0;
      targetTile_ = 0;
      rootTiles_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAct()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, act_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, provider_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, targetTile_);
      }
      for (int i = 0; i < rootTiles_.size(); i++) {
        output.writeUInt32(5, rootTiles_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, act_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, provider_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, targetTile_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < rootTiles_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(rootTiles_.get(i));
        }
        size += dataSize;
        size += 1 * getRootTilesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.CReqAct}
     *
     * <pre>
     *========================================================================================
     * 动作请求
     * #define OGID_ACTION							( OGID_GAME_MESSAGE + 19 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqActOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqAct_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqAct_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        act_ = com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType.ACT_GIVEUP;
        bitField0_ = (bitField0_ & ~0x00000002);
        provider_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        targetTile_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        rootTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqAct_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seat_ = seat_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.act_ = act_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.provider_ = provider_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.targetTile_ = targetTile_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          rootTiles_ = java.util.Collections.unmodifiableList(rootTiles_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.rootTiles_ = rootTiles_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasAct()) {
          setAct(other.getAct());
        }
        if (other.hasProvider()) {
          setProvider(other.getProvider());
        }
        if (other.hasTargetTile()) {
          setTargetTile(other.getTargetTile());
        }
        if (!other.rootTiles_.isEmpty()) {
          if (rootTiles_.isEmpty()) {
            rootTiles_ = other.rootTiles_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureRootTilesIsMutable();
            rootTiles_.addAll(other.rootTiles_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSeat()) {
          
          return false;
        }
        if (!hasAct()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqAct) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 seat = 1;
      private int seat_ ;
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public int getSeat() {
        return seat_;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public Builder setSeat(int value) {
        bitField0_ |= 0x00000001;
        seat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public Builder clearSeat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seat_ = 0;
        onChanged();
        return this;
      }

      // required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;
      private com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType act_ = com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType.ACT_GIVEUP;
      /**
       * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
       *
       * <pre>
       *放弃，吃，碰，杠，听
       * </pre>
       */
      public boolean hasAct() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
       *
       * <pre>
       *放弃，吃，碰，杠，听
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType getAct() {
        return act_;
      }
      /**
       * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
       *
       * <pre>
       *放弃，吃，碰，杠，听
       * </pre>
       */
      public Builder setAct(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        act_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
       *
       * <pre>
       *放弃，吃，碰，杠，听
       * </pre>
       */
      public Builder clearAct() {
        bitField0_ = (bitField0_ & ~0x00000002);
        act_ = com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType.ACT_GIVEUP;
        onChanged();
        return this;
      }

      // optional uint32 provider = 3;
      private int provider_ ;
      /**
       * <code>optional uint32 provider = 3;</code>
       */
      public boolean hasProvider() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 provider = 3;</code>
       */
      public int getProvider() {
        return provider_;
      }
      /**
       * <code>optional uint32 provider = 3;</code>
       */
      public Builder setProvider(int value) {
        bitField0_ |= 0x00000004;
        provider_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 provider = 3;</code>
       */
      public Builder clearProvider() {
        bitField0_ = (bitField0_ & ~0x00000004);
        provider_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 targetTile = 4;
      private int targetTile_ ;
      /**
       * <code>optional uint32 targetTile = 4;</code>
       */
      public boolean hasTargetTile() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 targetTile = 4;</code>
       */
      public int getTargetTile() {
        return targetTile_;
      }
      /**
       * <code>optional uint32 targetTile = 4;</code>
       */
      public Builder setTargetTile(int value) {
        bitField0_ |= 0x00000008;
        targetTile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 targetTile = 4;</code>
       */
      public Builder clearTargetTile() {
        bitField0_ = (bitField0_ & ~0x00000008);
        targetTile_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 rootTiles = 5;
      private java.util.List<java.lang.Integer> rootTiles_ = java.util.Collections.emptyList();
      private void ensureRootTilesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          rootTiles_ = new java.util.ArrayList<java.lang.Integer>(rootTiles_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getRootTilesList() {
        return java.util.Collections.unmodifiableList(rootTiles_);
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public int getRootTilesCount() {
        return rootTiles_.size();
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public int getRootTiles(int index) {
        return rootTiles_.get(index);
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public Builder setRootTiles(
          int index, int value) {
        ensureRootTilesIsMutable();
        rootTiles_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public Builder addRootTiles(int value) {
        ensureRootTilesIsMutable();
        rootTiles_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public Builder addAllRootTiles(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRootTilesIsMutable();
        super.addAll(values, rootTiles_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public Builder clearRootTiles() {
        rootTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.CReqAct)
    }

    static {
      defaultInstance = new CReqAct(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.CReqAct)
  }

  public interface NtfActOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 seat = 1;
    /**
     * <code>required uint32 seat = 1;</code>
     */
    boolean hasSeat();
    /**
     * <code>required uint32 seat = 1;</code>
     */
    int getSeat();

    // required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;
    /**
     * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
     *
     * <pre>
     *放弃，吃，碰，杠，听
     * </pre>
     */
    boolean hasAct();
    /**
     * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
     *
     * <pre>
     *放弃，吃，碰，杠，听
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType getAct();

    // optional uint32 provider = 3;
    /**
     * <code>optional uint32 provider = 3;</code>
     */
    boolean hasProvider();
    /**
     * <code>optional uint32 provider = 3;</code>
     */
    int getProvider();

    // optional uint32 targetTile = 4;
    /**
     * <code>optional uint32 targetTile = 4;</code>
     */
    boolean hasTargetTile();
    /**
     * <code>optional uint32 targetTile = 4;</code>
     */
    int getTargetTile();

    // repeated uint32 rootTiles = 5;
    /**
     * <code>repeated uint32 rootTiles = 5;</code>
     */
    java.util.List<java.lang.Integer> getRootTilesList();
    /**
     * <code>repeated uint32 rootTiles = 5;</code>
     */
    int getRootTilesCount();
    /**
     * <code>repeated uint32 rootTiles = 5;</code>
     */
    int getRootTiles(int index);

    // optional uint32 action = 6;
    /**
     * <code>optional uint32 action = 6;</code>
     */
    boolean hasAction();
    /**
     * <code>optional uint32 action = 6;</code>
     */
    int getAction();

    // optional uint32 actTime = 7;
    /**
     * <code>optional uint32 actTime = 7;</code>
     */
    boolean hasActTime();
    /**
     * <code>optional uint32 actTime = 7;</code>
     */
    int getActTime();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfAct}
   */
  public static final class NtfAct extends
      com.google.protobuf.GeneratedMessage
      implements NtfActOrBuilder {
    // Use NtfAct.newBuilder() to construct.
    private NtfAct(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfAct(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfAct defaultInstance;
    public static NtfAct getDefaultInstance() {
      return defaultInstance;
    }

    public NtfAct getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfAct(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seat_ = input.readUInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType value = com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                act_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              provider_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              targetTile_ = input.readUInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                rootTiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              rootTiles_.add(input.readUInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                rootTiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                rootTiles_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              action_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              actTime_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          rootTiles_ = java.util.Collections.unmodifiableList(rootTiles_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfAct_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfAct_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfAct> PARSER =
        new com.google.protobuf.AbstractParser<NtfAct>() {
      public NtfAct parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfAct(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfAct> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private int seat_;
    /**
     * <code>required uint32 seat = 1;</code>
     */
    public boolean hasSeat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 seat = 1;</code>
     */
    public int getSeat() {
      return seat_;
    }

    // required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;
    public static final int ACT_FIELD_NUMBER = 2;
    private com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType act_;
    /**
     * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
     *
     * <pre>
     *放弃，吃，碰，杠，听
     * </pre>
     */
    public boolean hasAct() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
     *
     * <pre>
     *放弃，吃，碰，杠，听
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType getAct() {
      return act_;
    }

    // optional uint32 provider = 3;
    public static final int PROVIDER_FIELD_NUMBER = 3;
    private int provider_;
    /**
     * <code>optional uint32 provider = 3;</code>
     */
    public boolean hasProvider() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 provider = 3;</code>
     */
    public int getProvider() {
      return provider_;
    }

    // optional uint32 targetTile = 4;
    public static final int TARGETTILE_FIELD_NUMBER = 4;
    private int targetTile_;
    /**
     * <code>optional uint32 targetTile = 4;</code>
     */
    public boolean hasTargetTile() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 targetTile = 4;</code>
     */
    public int getTargetTile() {
      return targetTile_;
    }

    // repeated uint32 rootTiles = 5;
    public static final int ROOTTILES_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> rootTiles_;
    /**
     * <code>repeated uint32 rootTiles = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getRootTilesList() {
      return rootTiles_;
    }
    /**
     * <code>repeated uint32 rootTiles = 5;</code>
     */
    public int getRootTilesCount() {
      return rootTiles_.size();
    }
    /**
     * <code>repeated uint32 rootTiles = 5;</code>
     */
    public int getRootTiles(int index) {
      return rootTiles_.get(index);
    }

    // optional uint32 action = 6;
    public static final int ACTION_FIELD_NUMBER = 6;
    private int action_;
    /**
     * <code>optional uint32 action = 6;</code>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 action = 6;</code>
     */
    public int getAction() {
      return action_;
    }

    // optional uint32 actTime = 7;
    public static final int ACTTIME_FIELD_NUMBER = 7;
    private int actTime_;
    /**
     * <code>optional uint32 actTime = 7;</code>
     */
    public boolean hasActTime() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 actTime = 7;</code>
     */
    public int getActTime() {
      return actTime_;
    }

    private void initFields() {
      seat_ = 0;
      act_ = com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType.ACT_GIVEUP;
      provider_ = 0;
      targetTile_ = 0;
      rootTiles_ = java.util.Collections.emptyList();
      action_ = 0;
      actTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAct()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, act_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, provider_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, targetTile_);
      }
      for (int i = 0; i < rootTiles_.size(); i++) {
        output.writeUInt32(5, rootTiles_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(6, action_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(7, actTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, act_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, provider_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, targetTile_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < rootTiles_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(rootTiles_.get(i));
        }
        size += dataSize;
        size += 1 * getRootTilesList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, action_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, actTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfAct}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfActOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfAct_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfAct_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        act_ = com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType.ACT_GIVEUP;
        bitField0_ = (bitField0_ & ~0x00000002);
        provider_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        targetTile_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        rootTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        action_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        actTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfAct_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seat_ = seat_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.act_ = act_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.provider_ = provider_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.targetTile_ = targetTile_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          rootTiles_ = java.util.Collections.unmodifiableList(rootTiles_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.rootTiles_ = rootTiles_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.action_ = action_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.actTime_ = actTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasAct()) {
          setAct(other.getAct());
        }
        if (other.hasProvider()) {
          setProvider(other.getProvider());
        }
        if (other.hasTargetTile()) {
          setTargetTile(other.getTargetTile());
        }
        if (!other.rootTiles_.isEmpty()) {
          if (rootTiles_.isEmpty()) {
            rootTiles_ = other.rootTiles_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureRootTilesIsMutable();
            rootTiles_.addAll(other.rootTiles_);
          }
          onChanged();
        }
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (other.hasActTime()) {
          setActTime(other.getActTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSeat()) {
          
          return false;
        }
        if (!hasAct()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAct) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 seat = 1;
      private int seat_ ;
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public int getSeat() {
        return seat_;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public Builder setSeat(int value) {
        bitField0_ |= 0x00000001;
        seat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public Builder clearSeat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seat_ = 0;
        onChanged();
        return this;
      }

      // required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;
      private com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType act_ = com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType.ACT_GIVEUP;
      /**
       * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
       *
       * <pre>
       *放弃，吃，碰，杠，听
       * </pre>
       */
      public boolean hasAct() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
       *
       * <pre>
       *放弃，吃，碰，杠，听
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType getAct() {
        return act_;
      }
      /**
       * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
       *
       * <pre>
       *放弃，吃，碰，杠，听
       * </pre>
       */
      public Builder setAct(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        act_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.ourgame.mahjong.bloodriver.message.ActionType act = 2;</code>
       *
       * <pre>
       *放弃，吃，碰，杠，听
       * </pre>
       */
      public Builder clearAct() {
        bitField0_ = (bitField0_ & ~0x00000002);
        act_ = com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.ActionType.ACT_GIVEUP;
        onChanged();
        return this;
      }

      // optional uint32 provider = 3;
      private int provider_ ;
      /**
       * <code>optional uint32 provider = 3;</code>
       */
      public boolean hasProvider() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 provider = 3;</code>
       */
      public int getProvider() {
        return provider_;
      }
      /**
       * <code>optional uint32 provider = 3;</code>
       */
      public Builder setProvider(int value) {
        bitField0_ |= 0x00000004;
        provider_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 provider = 3;</code>
       */
      public Builder clearProvider() {
        bitField0_ = (bitField0_ & ~0x00000004);
        provider_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 targetTile = 4;
      private int targetTile_ ;
      /**
       * <code>optional uint32 targetTile = 4;</code>
       */
      public boolean hasTargetTile() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 targetTile = 4;</code>
       */
      public int getTargetTile() {
        return targetTile_;
      }
      /**
       * <code>optional uint32 targetTile = 4;</code>
       */
      public Builder setTargetTile(int value) {
        bitField0_ |= 0x00000008;
        targetTile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 targetTile = 4;</code>
       */
      public Builder clearTargetTile() {
        bitField0_ = (bitField0_ & ~0x00000008);
        targetTile_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 rootTiles = 5;
      private java.util.List<java.lang.Integer> rootTiles_ = java.util.Collections.emptyList();
      private void ensureRootTilesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          rootTiles_ = new java.util.ArrayList<java.lang.Integer>(rootTiles_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getRootTilesList() {
        return java.util.Collections.unmodifiableList(rootTiles_);
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public int getRootTilesCount() {
        return rootTiles_.size();
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public int getRootTiles(int index) {
        return rootTiles_.get(index);
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public Builder setRootTiles(
          int index, int value) {
        ensureRootTilesIsMutable();
        rootTiles_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public Builder addRootTiles(int value) {
        ensureRootTilesIsMutable();
        rootTiles_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public Builder addAllRootTiles(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRootTilesIsMutable();
        super.addAll(values, rootTiles_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 rootTiles = 5;</code>
       */
      public Builder clearRootTiles() {
        rootTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // optional uint32 action = 6;
      private int action_ ;
      /**
       * <code>optional uint32 action = 6;</code>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 action = 6;</code>
       */
      public int getAction() {
        return action_;
      }
      /**
       * <code>optional uint32 action = 6;</code>
       */
      public Builder setAction(int value) {
        bitField0_ |= 0x00000020;
        action_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 action = 6;</code>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000020);
        action_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 actTime = 7;
      private int actTime_ ;
      /**
       * <code>optional uint32 actTime = 7;</code>
       */
      public boolean hasActTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 actTime = 7;</code>
       */
      public int getActTime() {
        return actTime_;
      }
      /**
       * <code>optional uint32 actTime = 7;</code>
       */
      public Builder setActTime(int value) {
        bitField0_ |= 0x00000040;
        actTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 actTime = 7;</code>
       */
      public Builder clearActTime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        actTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfAct)
    }

    static {
      defaultInstance = new NtfAct(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfAct)
  }

  public interface NtfWinOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 winType = 1;
    /**
     * <code>required uint32 winType = 1;</code>
     *
     * <pre>
     *0：正常一人点炮一人和，1：自摸，2:一炮多响
     * </pre>
     */
    boolean hasWinType();
    /**
     * <code>required uint32 winType = 1;</code>
     *
     * <pre>
     *0：正常一人点炮一人和，1：自摸，2:一炮多响
     * </pre>
     */
    int getWinType();

    // required uint32 winTile = 2;
    /**
     * <code>required uint32 winTile = 2;</code>
     */
    boolean hasWinTile();
    /**
     * <code>required uint32 winTile = 2;</code>
     */
    int getWinTile();

    // repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
     */
    java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo> 
        getWinInfosList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo getWinInfos(int index);
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
     */
    int getWinInfosCount();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
     */
    java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfoOrBuilder> 
        getWinInfosOrBuilderList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfoOrBuilder getWinInfosOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfWin}
   *
   * <pre>
   *========================================================================================
   * 有玩家胡牌
   * #define OGID_PLAYER_WIN						( OGID_GAME_MESSAGE + 21 )
   * </pre>
   */
  public static final class NtfWin extends
      com.google.protobuf.GeneratedMessage
      implements NtfWinOrBuilder {
    // Use NtfWin.newBuilder() to construct.
    private NtfWin(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfWin(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfWin defaultInstance;
    public static NtfWin getDefaultInstance() {
      return defaultInstance;
    }

    public NtfWin getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfWin(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              winType_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              winTile_ = input.readUInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                winInfos_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo>();
                mutable_bitField0_ |= 0x00000004;
              }
              winInfos_.add(input.readMessage(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          winInfos_ = java.util.Collections.unmodifiableList(winInfos_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfWin> PARSER =
        new com.google.protobuf.AbstractParser<NtfWin>() {
      public NtfWin parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfWin(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfWin> getParserForType() {
      return PARSER;
    }

    public interface WinInfoOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required uint32 winnerSeat = 1;
      /**
       * <code>required uint32 winnerSeat = 1;</code>
       */
      boolean hasWinnerSeat();
      /**
       * <code>required uint32 winnerSeat = 1;</code>
       */
      int getWinnerSeat();

      // required uint32 loserSeat = 2;
      /**
       * <code>required uint32 loserSeat = 2;</code>
       */
      boolean hasLoserSeat();
      /**
       * <code>required uint32 loserSeat = 2;</code>
       */
      int getLoserSeat();

      // required uint32 fan = 3;
      /**
       * <code>required uint32 fan = 3;</code>
       */
      boolean hasFan();
      /**
       * <code>required uint32 fan = 3;</code>
       */
      int getFan();
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo}
     *
     * <pre>
     *和牌结果
     * </pre>
     */
    public static final class WinInfo extends
        com.google.protobuf.GeneratedMessage
        implements WinInfoOrBuilder {
      // Use WinInfo.newBuilder() to construct.
      private WinInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private WinInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final WinInfo defaultInstance;
      public static WinInfo getDefaultInstance() {
        return defaultInstance;
      }

      public WinInfo getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private WinInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                winnerSeat_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                loserSeat_ = input.readUInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                fan_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_WinInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_WinInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.Builder.class);
      }

      public static com.google.protobuf.Parser<WinInfo> PARSER =
          new com.google.protobuf.AbstractParser<WinInfo>() {
        public WinInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new WinInfo(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<WinInfo> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required uint32 winnerSeat = 1;
      public static final int WINNERSEAT_FIELD_NUMBER = 1;
      private int winnerSeat_;
      /**
       * <code>required uint32 winnerSeat = 1;</code>
       */
      public boolean hasWinnerSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 winnerSeat = 1;</code>
       */
      public int getWinnerSeat() {
        return winnerSeat_;
      }

      // required uint32 loserSeat = 2;
      public static final int LOSERSEAT_FIELD_NUMBER = 2;
      private int loserSeat_;
      /**
       * <code>required uint32 loserSeat = 2;</code>
       */
      public boolean hasLoserSeat() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 loserSeat = 2;</code>
       */
      public int getLoserSeat() {
        return loserSeat_;
      }

      // required uint32 fan = 3;
      public static final int FAN_FIELD_NUMBER = 3;
      private int fan_;
      /**
       * <code>required uint32 fan = 3;</code>
       */
      public boolean hasFan() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 fan = 3;</code>
       */
      public int getFan() {
        return fan_;
      }

      private void initFields() {
        winnerSeat_ = 0;
        loserSeat_ = 0;
        fan_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasWinnerSeat()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasLoserSeat()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasFan()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, winnerSeat_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, loserSeat_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(3, fan_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, winnerSeat_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, loserSeat_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, fan_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo}
       *
       * <pre>
       *和牌结果
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_WinInfo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_WinInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.Builder.class);
        }

        // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          winnerSeat_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          loserSeat_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          fan_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_WinInfo_descriptor;
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo getDefaultInstanceForType() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.getDefaultInstance();
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo build() {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo buildPartial() {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.winnerSeat_ = winnerSeat_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.loserSeat_ = loserSeat_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.fan_ = fan_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo) {
            return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo other) {
          if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.getDefaultInstance()) return this;
          if (other.hasWinnerSeat()) {
            setWinnerSeat(other.getWinnerSeat());
          }
          if (other.hasLoserSeat()) {
            setLoserSeat(other.getLoserSeat());
          }
          if (other.hasFan()) {
            setFan(other.getFan());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasWinnerSeat()) {
            
            return false;
          }
          if (!hasLoserSeat()) {
            
            return false;
          }
          if (!hasFan()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required uint32 winnerSeat = 1;
        private int winnerSeat_ ;
        /**
         * <code>required uint32 winnerSeat = 1;</code>
         */
        public boolean hasWinnerSeat() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 winnerSeat = 1;</code>
         */
        public int getWinnerSeat() {
          return winnerSeat_;
        }
        /**
         * <code>required uint32 winnerSeat = 1;</code>
         */
        public Builder setWinnerSeat(int value) {
          bitField0_ |= 0x00000001;
          winnerSeat_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 winnerSeat = 1;</code>
         */
        public Builder clearWinnerSeat() {
          bitField0_ = (bitField0_ & ~0x00000001);
          winnerSeat_ = 0;
          onChanged();
          return this;
        }

        // required uint32 loserSeat = 2;
        private int loserSeat_ ;
        /**
         * <code>required uint32 loserSeat = 2;</code>
         */
        public boolean hasLoserSeat() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required uint32 loserSeat = 2;</code>
         */
        public int getLoserSeat() {
          return loserSeat_;
        }
        /**
         * <code>required uint32 loserSeat = 2;</code>
         */
        public Builder setLoserSeat(int value) {
          bitField0_ |= 0x00000002;
          loserSeat_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 loserSeat = 2;</code>
         */
        public Builder clearLoserSeat() {
          bitField0_ = (bitField0_ & ~0x00000002);
          loserSeat_ = 0;
          onChanged();
          return this;
        }

        // required uint32 fan = 3;
        private int fan_ ;
        /**
         * <code>required uint32 fan = 3;</code>
         */
        public boolean hasFan() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required uint32 fan = 3;</code>
         */
        public int getFan() {
          return fan_;
        }
        /**
         * <code>required uint32 fan = 3;</code>
         */
        public Builder setFan(int value) {
          bitField0_ |= 0x00000004;
          fan_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 fan = 3;</code>
         */
        public Builder clearFan() {
          bitField0_ = (bitField0_ & ~0x00000004);
          fan_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo)
      }

      static {
        defaultInstance = new WinInfo(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo)
    }

    private int bitField0_;
    // required uint32 winType = 1;
    public static final int WINTYPE_FIELD_NUMBER = 1;
    private int winType_;
    /**
     * <code>required uint32 winType = 1;</code>
     *
     * <pre>
     *0：正常一人点炮一人和，1：自摸，2:一炮多响
     * </pre>
     */
    public boolean hasWinType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 winType = 1;</code>
     *
     * <pre>
     *0：正常一人点炮一人和，1：自摸，2:一炮多响
     * </pre>
     */
    public int getWinType() {
      return winType_;
    }

    // required uint32 winTile = 2;
    public static final int WINTILE_FIELD_NUMBER = 2;
    private int winTile_;
    /**
     * <code>required uint32 winTile = 2;</code>
     */
    public boolean hasWinTile() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 winTile = 2;</code>
     */
    public int getWinTile() {
      return winTile_;
    }

    // repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;
    public static final int WININFOS_FIELD_NUMBER = 3;
    private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo> winInfos_;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
     */
    public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo> getWinInfosList() {
      return winInfos_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
     */
    public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfoOrBuilder> 
        getWinInfosOrBuilderList() {
      return winInfos_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
     */
    public int getWinInfosCount() {
      return winInfos_.size();
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo getWinInfos(int index) {
      return winInfos_.get(index);
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfoOrBuilder getWinInfosOrBuilder(
        int index) {
      return winInfos_.get(index);
    }

    private void initFields() {
      winType_ = 0;
      winTile_ = 0;
      winInfos_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasWinType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWinTile()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getWinInfosCount(); i++) {
        if (!getWinInfos(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, winType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, winTile_);
      }
      for (int i = 0; i < winInfos_.size(); i++) {
        output.writeMessage(3, winInfos_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, winType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, winTile_);
      }
      for (int i = 0; i < winInfos_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, winInfos_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfWin}
     *
     * <pre>
     *========================================================================================
     * 有玩家胡牌
     * #define OGID_PLAYER_WIN						( OGID_GAME_MESSAGE + 21 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWinOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWinInfosFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        winType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        winTile_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (winInfosBuilder_ == null) {
          winInfos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          winInfosBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.winType_ = winType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.winTile_ = winTile_;
        if (winInfosBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            winInfos_ = java.util.Collections.unmodifiableList(winInfos_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.winInfos_ = winInfos_;
        } else {
          result.winInfos_ = winInfosBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.getDefaultInstance()) return this;
        if (other.hasWinType()) {
          setWinType(other.getWinType());
        }
        if (other.hasWinTile()) {
          setWinTile(other.getWinTile());
        }
        if (winInfosBuilder_ == null) {
          if (!other.winInfos_.isEmpty()) {
            if (winInfos_.isEmpty()) {
              winInfos_ = other.winInfos_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureWinInfosIsMutable();
              winInfos_.addAll(other.winInfos_);
            }
            onChanged();
          }
        } else {
          if (!other.winInfos_.isEmpty()) {
            if (winInfosBuilder_.isEmpty()) {
              winInfosBuilder_.dispose();
              winInfosBuilder_ = null;
              winInfos_ = other.winInfos_;
              bitField0_ = (bitField0_ & ~0x00000004);
              winInfosBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getWinInfosFieldBuilder() : null;
            } else {
              winInfosBuilder_.addAllMessages(other.winInfos_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasWinType()) {
          
          return false;
        }
        if (!hasWinTile()) {
          
          return false;
        }
        for (int i = 0; i < getWinInfosCount(); i++) {
          if (!getWinInfos(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 winType = 1;
      private int winType_ ;
      /**
       * <code>required uint32 winType = 1;</code>
       *
       * <pre>
       *0：正常一人点炮一人和，1：自摸，2:一炮多响
       * </pre>
       */
      public boolean hasWinType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 winType = 1;</code>
       *
       * <pre>
       *0：正常一人点炮一人和，1：自摸，2:一炮多响
       * </pre>
       */
      public int getWinType() {
        return winType_;
      }
      /**
       * <code>required uint32 winType = 1;</code>
       *
       * <pre>
       *0：正常一人点炮一人和，1：自摸，2:一炮多响
       * </pre>
       */
      public Builder setWinType(int value) {
        bitField0_ |= 0x00000001;
        winType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 winType = 1;</code>
       *
       * <pre>
       *0：正常一人点炮一人和，1：自摸，2:一炮多响
       * </pre>
       */
      public Builder clearWinType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        winType_ = 0;
        onChanged();
        return this;
      }

      // required uint32 winTile = 2;
      private int winTile_ ;
      /**
       * <code>required uint32 winTile = 2;</code>
       */
      public boolean hasWinTile() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 winTile = 2;</code>
       */
      public int getWinTile() {
        return winTile_;
      }
      /**
       * <code>required uint32 winTile = 2;</code>
       */
      public Builder setWinTile(int value) {
        bitField0_ |= 0x00000002;
        winTile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 winTile = 2;</code>
       */
      public Builder clearWinTile() {
        bitField0_ = (bitField0_ & ~0x00000002);
        winTile_ = 0;
        onChanged();
        return this;
      }

      // repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;
      private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo> winInfos_ =
        java.util.Collections.emptyList();
      private void ensureWinInfosIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          winInfos_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo>(winInfos_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfoOrBuilder> winInfosBuilder_;

      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo> getWinInfosList() {
        if (winInfosBuilder_ == null) {
          return java.util.Collections.unmodifiableList(winInfos_);
        } else {
          return winInfosBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public int getWinInfosCount() {
        if (winInfosBuilder_ == null) {
          return winInfos_.size();
        } else {
          return winInfosBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo getWinInfos(int index) {
        if (winInfosBuilder_ == null) {
          return winInfos_.get(index);
        } else {
          return winInfosBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public Builder setWinInfos(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo value) {
        if (winInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWinInfosIsMutable();
          winInfos_.set(index, value);
          onChanged();
        } else {
          winInfosBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public Builder setWinInfos(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.Builder builderForValue) {
        if (winInfosBuilder_ == null) {
          ensureWinInfosIsMutable();
          winInfos_.set(index, builderForValue.build());
          onChanged();
        } else {
          winInfosBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public Builder addWinInfos(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo value) {
        if (winInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWinInfosIsMutable();
          winInfos_.add(value);
          onChanged();
        } else {
          winInfosBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public Builder addWinInfos(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo value) {
        if (winInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWinInfosIsMutable();
          winInfos_.add(index, value);
          onChanged();
        } else {
          winInfosBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public Builder addWinInfos(
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.Builder builderForValue) {
        if (winInfosBuilder_ == null) {
          ensureWinInfosIsMutable();
          winInfos_.add(builderForValue.build());
          onChanged();
        } else {
          winInfosBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public Builder addWinInfos(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.Builder builderForValue) {
        if (winInfosBuilder_ == null) {
          ensureWinInfosIsMutable();
          winInfos_.add(index, builderForValue.build());
          onChanged();
        } else {
          winInfosBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public Builder addAllWinInfos(
          java.lang.Iterable<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo> values) {
        if (winInfosBuilder_ == null) {
          ensureWinInfosIsMutable();
          super.addAll(values, winInfos_);
          onChanged();
        } else {
          winInfosBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public Builder clearWinInfos() {
        if (winInfosBuilder_ == null) {
          winInfos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          winInfosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public Builder removeWinInfos(int index) {
        if (winInfosBuilder_ == null) {
          ensureWinInfosIsMutable();
          winInfos_.remove(index);
          onChanged();
        } else {
          winInfosBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.Builder getWinInfosBuilder(
          int index) {
        return getWinInfosFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfoOrBuilder getWinInfosOrBuilder(
          int index) {
        if (winInfosBuilder_ == null) {
          return winInfos_.get(index);  } else {
          return winInfosBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfoOrBuilder> 
           getWinInfosOrBuilderList() {
        if (winInfosBuilder_ != null) {
          return winInfosBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(winInfos_);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.Builder addWinInfosBuilder() {
        return getWinInfosFieldBuilder().addBuilder(
            com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.Builder addWinInfosBuilder(
          int index) {
        return getWinInfosFieldBuilder().addBuilder(
            index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfWin.WinInfo winInfos = 3;</code>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.Builder> 
           getWinInfosBuilderList() {
        return getWinInfosFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfoOrBuilder> 
          getWinInfosFieldBuilder() {
        if (winInfosBuilder_ == null) {
          winInfosBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfo.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfWin.WinInfoOrBuilder>(
                  winInfos_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          winInfos_ = null;
        }
        return winInfosBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfWin)
    }

    static {
      defaultInstance = new NtfWin(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfWin)
  }

  public interface NtfGameStatusOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 gameId = 1;
    /**
     * <code>required uint64 gameId = 1;</code>
     *
     * <pre>
     *游戏ID
     * </pre>
     */
    boolean hasGameId();
    /**
     * <code>required uint64 gameId = 1;</code>
     *
     * <pre>
     *游戏ID
     * </pre>
     */
    long getGameId();

    // required uint32 gameType = 2;
    /**
     * <code>required uint32 gameType = 2;</code>
     *
     * <pre>
     *麻将种类
     * </pre>
     */
    boolean hasGameType();
    /**
     * <code>required uint32 gameType = 2;</code>
     *
     * <pre>
     *麻将种类
     * </pre>
     */
    int getGameType();

    // repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player> 
        getPlayersList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player getPlayers(int index);
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    int getPlayersCount();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder getPlayersOrBuilder(
        int index);

    // required uint32 dealer = 4;
    /**
     * <code>required uint32 dealer = 4;</code>
     *
     * <pre>
     *庄家座位号
     * </pre>
     */
    boolean hasDealer();
    /**
     * <code>required uint32 dealer = 4;</code>
     *
     * <pre>
     *庄家座位号
     * </pre>
     */
    int getDealer();

    // required uint32 basicScore = 5;
    /**
     * <code>required uint32 basicScore = 5;</code>
     *
     * <pre>
     *基础分，每番多少分
     * </pre>
     */
    boolean hasBasicScore();
    /**
     * <code>required uint32 basicScore = 5;</code>
     *
     * <pre>
     *基础分，每番多少分
     * </pre>
     */
    int getBasicScore();

    // required uint32 stage = 6;
    /**
     * <code>required uint32 stage = 6;</code>
     *
     * <pre>
     *阶段号
     * </pre>
     */
    boolean hasStage();
    /**
     * <code>required uint32 stage = 6;</code>
     *
     * <pre>
     *阶段号
     * </pre>
     */
    int getStage();

    // required uint32 round = 7;
    /**
     * <code>required uint32 round = 7;</code>
     *
     * <pre>
     *第几圈
     * </pre>
     */
    boolean hasRound();
    /**
     * <code>required uint32 round = 7;</code>
     *
     * <pre>
     *第几圈
     * </pre>
     */
    int getRound();

    // required uint32 serial = 8;
    /**
     * <code>required uint32 serial = 8;</code>
     *
     * <pre>
     *第几局
     * </pre>
     */
    boolean hasSerial();
    /**
     * <code>required uint32 serial = 8;</code>
     *
     * <pre>
     *第几局
     * </pre>
     */
    int getSerial();

    // required uint32 startSeat = 9;
    /**
     * <code>required uint32 startSeat = 9;</code>
     *
     * <pre>
     *开门的座位号
     * </pre>
     */
    boolean hasStartSeat();
    /**
     * <code>required uint32 startSeat = 9;</code>
     *
     * <pre>
     *开门的座位号
     * </pre>
     */
    int getStartSeat();

    // required uint32 startFrusta = 10;
    /**
     * <code>required uint32 startFrusta = 10;</code>
     *
     * <pre>
     *开门的墩数
     * </pre>
     */
    boolean hasStartFrusta();
    /**
     * <code>required uint32 startFrusta = 10;</code>
     *
     * <pre>
     *开门的墩数
     * </pre>
     */
    int getStartFrusta();

    // required uint32 frontDrewTiles = 11;
    /**
     * <code>required uint32 frontDrewTiles = 11;</code>
     *
     * <pre>
     *前边抓过多少张牌
     * </pre>
     */
    boolean hasFrontDrewTiles();
    /**
     * <code>required uint32 frontDrewTiles = 11;</code>
     *
     * <pre>
     *前边抓过多少张牌
     * </pre>
     */
    int getFrontDrewTiles();

    // required uint32 backDrewTiles = 12;
    /**
     * <code>required uint32 backDrewTiles = 12;</code>
     *
     * <pre>
     *后边抓过多少张牌
     * </pre>
     */
    boolean hasBackDrewTiles();
    /**
     * <code>required uint32 backDrewTiles = 12;</code>
     *
     * <pre>
     *后边抓过多少张牌
     * </pre>
     */
    int getBackDrewTiles();

    // repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
     *
     * <pre>
     *用户牌的信息
     * </pre>
     */
    java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo> 
        getTileInfosList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
     *
     * <pre>
     *用户牌的信息
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo getTileInfos(int index);
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
     *
     * <pre>
     *用户牌的信息
     * </pre>
     */
    int getTileInfosCount();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
     *
     * <pre>
     *用户牌的信息
     * </pre>
     */
    java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfoOrBuilder> 
        getTileInfosOrBuilderList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
     *
     * <pre>
     *用户牌的信息
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfoOrBuilder getTileInfosOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameStatus}
   *
   * <pre>
   *========================================================================================
   * 断线重连
   * #define OGID_GAME_STATUS						( OGID_GAME_MESSAGE + 25 )
   * </pre>
   */
  public static final class NtfGameStatus extends
      com.google.protobuf.GeneratedMessage
      implements NtfGameStatusOrBuilder {
    // Use NtfGameStatus.newBuilder() to construct.
    private NtfGameStatus(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfGameStatus(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfGameStatus defaultInstance;
    public static NtfGameStatus getDefaultInstance() {
      return defaultInstance;
    }

    public NtfGameStatus getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfGameStatus(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              gameId_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              gameType_ = input.readUInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                players_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player>();
                mutable_bitField0_ |= 0x00000004;
              }
              players_.add(input.readMessage(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              dealer_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              basicScore_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              stage_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              round_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              serial_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              startSeat_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              startFrusta_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              frontDrewTiles_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000400;
              backDrewTiles_ = input.readUInt32();
              break;
            }
            case 106: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                tileInfos_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo>();
                mutable_bitField0_ |= 0x00001000;
              }
              tileInfos_.add(input.readMessage(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          tileInfos_ = java.util.Collections.unmodifiableList(tileInfos_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameStatus_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameStatus_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfGameStatus> PARSER =
        new com.google.protobuf.AbstractParser<NtfGameStatus>() {
      public NtfGameStatus parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfGameStatus(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfGameStatus> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 gameId = 1;
    public static final int GAMEID_FIELD_NUMBER = 1;
    private long gameId_;
    /**
     * <code>required uint64 gameId = 1;</code>
     *
     * <pre>
     *游戏ID
     * </pre>
     */
    public boolean hasGameId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 gameId = 1;</code>
     *
     * <pre>
     *游戏ID
     * </pre>
     */
    public long getGameId() {
      return gameId_;
    }

    // required uint32 gameType = 2;
    public static final int GAMETYPE_FIELD_NUMBER = 2;
    private int gameType_;
    /**
     * <code>required uint32 gameType = 2;</code>
     *
     * <pre>
     *麻将种类
     * </pre>
     */
    public boolean hasGameType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 gameType = 2;</code>
     *
     * <pre>
     *麻将种类
     * </pre>
     */
    public int getGameType() {
      return gameType_;
    }

    // repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;
    public static final int PLAYERS_FIELD_NUMBER = 3;
    private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player> players_;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
     *
     * <pre>
     *玩家
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // required uint32 dealer = 4;
    public static final int DEALER_FIELD_NUMBER = 4;
    private int dealer_;
    /**
     * <code>required uint32 dealer = 4;</code>
     *
     * <pre>
     *庄家座位号
     * </pre>
     */
    public boolean hasDealer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 dealer = 4;</code>
     *
     * <pre>
     *庄家座位号
     * </pre>
     */
    public int getDealer() {
      return dealer_;
    }

    // required uint32 basicScore = 5;
    public static final int BASICSCORE_FIELD_NUMBER = 5;
    private int basicScore_;
    /**
     * <code>required uint32 basicScore = 5;</code>
     *
     * <pre>
     *基础分，每番多少分
     * </pre>
     */
    public boolean hasBasicScore() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 basicScore = 5;</code>
     *
     * <pre>
     *基础分，每番多少分
     * </pre>
     */
    public int getBasicScore() {
      return basicScore_;
    }

    // required uint32 stage = 6;
    public static final int STAGE_FIELD_NUMBER = 6;
    private int stage_;
    /**
     * <code>required uint32 stage = 6;</code>
     *
     * <pre>
     *阶段号
     * </pre>
     */
    public boolean hasStage() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 stage = 6;</code>
     *
     * <pre>
     *阶段号
     * </pre>
     */
    public int getStage() {
      return stage_;
    }

    // required uint32 round = 7;
    public static final int ROUND_FIELD_NUMBER = 7;
    private int round_;
    /**
     * <code>required uint32 round = 7;</code>
     *
     * <pre>
     *第几圈
     * </pre>
     */
    public boolean hasRound() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required uint32 round = 7;</code>
     *
     * <pre>
     *第几圈
     * </pre>
     */
    public int getRound() {
      return round_;
    }

    // required uint32 serial = 8;
    public static final int SERIAL_FIELD_NUMBER = 8;
    private int serial_;
    /**
     * <code>required uint32 serial = 8;</code>
     *
     * <pre>
     *第几局
     * </pre>
     */
    public boolean hasSerial() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required uint32 serial = 8;</code>
     *
     * <pre>
     *第几局
     * </pre>
     */
    public int getSerial() {
      return serial_;
    }

    // required uint32 startSeat = 9;
    public static final int STARTSEAT_FIELD_NUMBER = 9;
    private int startSeat_;
    /**
     * <code>required uint32 startSeat = 9;</code>
     *
     * <pre>
     *开门的座位号
     * </pre>
     */
    public boolean hasStartSeat() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required uint32 startSeat = 9;</code>
     *
     * <pre>
     *开门的座位号
     * </pre>
     */
    public int getStartSeat() {
      return startSeat_;
    }

    // required uint32 startFrusta = 10;
    public static final int STARTFRUSTA_FIELD_NUMBER = 10;
    private int startFrusta_;
    /**
     * <code>required uint32 startFrusta = 10;</code>
     *
     * <pre>
     *开门的墩数
     * </pre>
     */
    public boolean hasStartFrusta() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required uint32 startFrusta = 10;</code>
     *
     * <pre>
     *开门的墩数
     * </pre>
     */
    public int getStartFrusta() {
      return startFrusta_;
    }

    // required uint32 frontDrewTiles = 11;
    public static final int FRONTDREWTILES_FIELD_NUMBER = 11;
    private int frontDrewTiles_;
    /**
     * <code>required uint32 frontDrewTiles = 11;</code>
     *
     * <pre>
     *前边抓过多少张牌
     * </pre>
     */
    public boolean hasFrontDrewTiles() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required uint32 frontDrewTiles = 11;</code>
     *
     * <pre>
     *前边抓过多少张牌
     * </pre>
     */
    public int getFrontDrewTiles() {
      return frontDrewTiles_;
    }

    // required uint32 backDrewTiles = 12;
    public static final int BACKDREWTILES_FIELD_NUMBER = 12;
    private int backDrewTiles_;
    /**
     * <code>required uint32 backDrewTiles = 12;</code>
     *
     * <pre>
     *后边抓过多少张牌
     * </pre>
     */
    public boolean hasBackDrewTiles() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required uint32 backDrewTiles = 12;</code>
     *
     * <pre>
     *后边抓过多少张牌
     * </pre>
     */
    public int getBackDrewTiles() {
      return backDrewTiles_;
    }

    // repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;
    public static final int TILEINFOS_FIELD_NUMBER = 13;
    private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo> tileInfos_;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
     *
     * <pre>
     *用户牌的信息
     * </pre>
     */
    public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo> getTileInfosList() {
      return tileInfos_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
     *
     * <pre>
     *用户牌的信息
     * </pre>
     */
    public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfoOrBuilder> 
        getTileInfosOrBuilderList() {
      return tileInfos_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
     *
     * <pre>
     *用户牌的信息
     * </pre>
     */
    public int getTileInfosCount() {
      return tileInfos_.size();
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
     *
     * <pre>
     *用户牌的信息
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo getTileInfos(int index) {
      return tileInfos_.get(index);
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
     *
     * <pre>
     *用户牌的信息
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfoOrBuilder getTileInfosOrBuilder(
        int index) {
      return tileInfos_.get(index);
    }

    private void initFields() {
      gameId_ = 0L;
      gameType_ = 0;
      players_ = java.util.Collections.emptyList();
      dealer_ = 0;
      basicScore_ = 0;
      stage_ = 0;
      round_ = 0;
      serial_ = 0;
      startSeat_ = 0;
      startFrusta_ = 0;
      frontDrewTiles_ = 0;
      backDrewTiles_ = 0;
      tileInfos_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasGameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGameType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDealer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBasicScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRound()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSerial()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStartSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStartFrusta()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFrontDrewTiles()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBackDrewTiles()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getPlayersCount(); i++) {
        if (!getPlayers(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTileInfosCount(); i++) {
        if (!getTileInfos(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, gameId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, gameType_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(3, players_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(4, dealer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(5, basicScore_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(6, stage_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(7, round_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(8, serial_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(9, startSeat_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(10, startFrusta_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(11, frontDrewTiles_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(12, backDrewTiles_);
      }
      for (int i = 0; i < tileInfos_.size(); i++) {
        output.writeMessage(13, tileInfos_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, gameId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, gameType_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, players_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, dealer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, basicScore_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, stage_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, round_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, serial_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, startSeat_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, startFrusta_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, frontDrewTiles_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, backDrewTiles_);
      }
      for (int i = 0; i < tileInfos_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, tileInfos_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameStatus}
     *
     * <pre>
     *========================================================================================
     * 断线重连
     * #define OGID_GAME_STATUS						( OGID_GAME_MESSAGE + 25 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatusOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameStatus_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameStatus_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPlayersFieldBuilder();
          getTileInfosFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        gameId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        gameType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          playersBuilder_.clear();
        }
        dealer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        basicScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        stage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        round_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        serial_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        startSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        startFrusta_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        frontDrewTiles_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        backDrewTiles_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        if (tileInfosBuilder_ == null) {
          tileInfos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
        } else {
          tileInfosBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameStatus_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.gameId_ = gameId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.gameType_ = gameType_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.dealer_ = dealer_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.basicScore_ = basicScore_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.stage_ = stage_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.round_ = round_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.serial_ = serial_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.startSeat_ = startSeat_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.startFrusta_ = startFrusta_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.frontDrewTiles_ = frontDrewTiles_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.backDrewTiles_ = backDrewTiles_;
        if (tileInfosBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000)) {
            tileInfos_ = java.util.Collections.unmodifiableList(tileInfos_);
            bitField0_ = (bitField0_ & ~0x00001000);
          }
          result.tileInfos_ = tileInfos_;
        } else {
          result.tileInfos_ = tileInfosBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus.getDefaultInstance()) return this;
        if (other.hasGameId()) {
          setGameId(other.getGameId());
        }
        if (other.hasGameType()) {
          setGameType(other.getGameType());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000004);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasDealer()) {
          setDealer(other.getDealer());
        }
        if (other.hasBasicScore()) {
          setBasicScore(other.getBasicScore());
        }
        if (other.hasStage()) {
          setStage(other.getStage());
        }
        if (other.hasRound()) {
          setRound(other.getRound());
        }
        if (other.hasSerial()) {
          setSerial(other.getSerial());
        }
        if (other.hasStartSeat()) {
          setStartSeat(other.getStartSeat());
        }
        if (other.hasStartFrusta()) {
          setStartFrusta(other.getStartFrusta());
        }
        if (other.hasFrontDrewTiles()) {
          setFrontDrewTiles(other.getFrontDrewTiles());
        }
        if (other.hasBackDrewTiles()) {
          setBackDrewTiles(other.getBackDrewTiles());
        }
        if (tileInfosBuilder_ == null) {
          if (!other.tileInfos_.isEmpty()) {
            if (tileInfos_.isEmpty()) {
              tileInfos_ = other.tileInfos_;
              bitField0_ = (bitField0_ & ~0x00001000);
            } else {
              ensureTileInfosIsMutable();
              tileInfos_.addAll(other.tileInfos_);
            }
            onChanged();
          }
        } else {
          if (!other.tileInfos_.isEmpty()) {
            if (tileInfosBuilder_.isEmpty()) {
              tileInfosBuilder_.dispose();
              tileInfosBuilder_ = null;
              tileInfos_ = other.tileInfos_;
              bitField0_ = (bitField0_ & ~0x00001000);
              tileInfosBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTileInfosFieldBuilder() : null;
            } else {
              tileInfosBuilder_.addAllMessages(other.tileInfos_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasGameId()) {
          
          return false;
        }
        if (!hasGameType()) {
          
          return false;
        }
        if (!hasDealer()) {
          
          return false;
        }
        if (!hasBasicScore()) {
          
          return false;
        }
        if (!hasStage()) {
          
          return false;
        }
        if (!hasRound()) {
          
          return false;
        }
        if (!hasSerial()) {
          
          return false;
        }
        if (!hasStartSeat()) {
          
          return false;
        }
        if (!hasStartFrusta()) {
          
          return false;
        }
        if (!hasFrontDrewTiles()) {
          
          return false;
        }
        if (!hasBackDrewTiles()) {
          
          return false;
        }
        for (int i = 0; i < getPlayersCount(); i++) {
          if (!getPlayers(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getTileInfosCount(); i++) {
          if (!getTileInfos(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameStatus) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 gameId = 1;
      private long gameId_ ;
      /**
       * <code>required uint64 gameId = 1;</code>
       *
       * <pre>
       *游戏ID
       * </pre>
       */
      public boolean hasGameId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       *
       * <pre>
       *游戏ID
       * </pre>
       */
      public long getGameId() {
        return gameId_;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       *
       * <pre>
       *游戏ID
       * </pre>
       */
      public Builder setGameId(long value) {
        bitField0_ |= 0x00000001;
        gameId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       *
       * <pre>
       *游戏ID
       * </pre>
       */
      public Builder clearGameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        gameId_ = 0L;
        onChanged();
        return this;
      }

      // required uint32 gameType = 2;
      private int gameType_ ;
      /**
       * <code>required uint32 gameType = 2;</code>
       *
       * <pre>
       *麻将种类
       * </pre>
       */
      public boolean hasGameType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 gameType = 2;</code>
       *
       * <pre>
       *麻将种类
       * </pre>
       */
      public int getGameType() {
        return gameType_;
      }
      /**
       * <code>required uint32 gameType = 2;</code>
       *
       * <pre>
       *麻将种类
       * </pre>
       */
      public Builder setGameType(int value) {
        bitField0_ |= 0x00000002;
        gameType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 gameType = 2;</code>
       *
       * <pre>
       *麻将种类
       * </pre>
       */
      public Builder clearGameType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        gameType_ = 0;
        onChanged();
        return this;
      }

      // repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;
      private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          players_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player>(players_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder> playersBuilder_;

      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder setPlayers(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder setPlayers(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder addPlayers(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder addPlayers(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder addPlayers(
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder addPlayers(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.Player players = 3;</code>
       *
       * <pre>
       *玩家
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.Player.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.PlayerOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // required uint32 dealer = 4;
      private int dealer_ ;
      /**
       * <code>required uint32 dealer = 4;</code>
       *
       * <pre>
       *庄家座位号
       * </pre>
       */
      public boolean hasDealer() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 dealer = 4;</code>
       *
       * <pre>
       *庄家座位号
       * </pre>
       */
      public int getDealer() {
        return dealer_;
      }
      /**
       * <code>required uint32 dealer = 4;</code>
       *
       * <pre>
       *庄家座位号
       * </pre>
       */
      public Builder setDealer(int value) {
        bitField0_ |= 0x00000008;
        dealer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 dealer = 4;</code>
       *
       * <pre>
       *庄家座位号
       * </pre>
       */
      public Builder clearDealer() {
        bitField0_ = (bitField0_ & ~0x00000008);
        dealer_ = 0;
        onChanged();
        return this;
      }

      // required uint32 basicScore = 5;
      private int basicScore_ ;
      /**
       * <code>required uint32 basicScore = 5;</code>
       *
       * <pre>
       *基础分，每番多少分
       * </pre>
       */
      public boolean hasBasicScore() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 basicScore = 5;</code>
       *
       * <pre>
       *基础分，每番多少分
       * </pre>
       */
      public int getBasicScore() {
        return basicScore_;
      }
      /**
       * <code>required uint32 basicScore = 5;</code>
       *
       * <pre>
       *基础分，每番多少分
       * </pre>
       */
      public Builder setBasicScore(int value) {
        bitField0_ |= 0x00000010;
        basicScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 basicScore = 5;</code>
       *
       * <pre>
       *基础分，每番多少分
       * </pre>
       */
      public Builder clearBasicScore() {
        bitField0_ = (bitField0_ & ~0x00000010);
        basicScore_ = 0;
        onChanged();
        return this;
      }

      // required uint32 stage = 6;
      private int stage_ ;
      /**
       * <code>required uint32 stage = 6;</code>
       *
       * <pre>
       *阶段号
       * </pre>
       */
      public boolean hasStage() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint32 stage = 6;</code>
       *
       * <pre>
       *阶段号
       * </pre>
       */
      public int getStage() {
        return stage_;
      }
      /**
       * <code>required uint32 stage = 6;</code>
       *
       * <pre>
       *阶段号
       * </pre>
       */
      public Builder setStage(int value) {
        bitField0_ |= 0x00000020;
        stage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 stage = 6;</code>
       *
       * <pre>
       *阶段号
       * </pre>
       */
      public Builder clearStage() {
        bitField0_ = (bitField0_ & ~0x00000020);
        stage_ = 0;
        onChanged();
        return this;
      }

      // required uint32 round = 7;
      private int round_ ;
      /**
       * <code>required uint32 round = 7;</code>
       *
       * <pre>
       *第几圈
       * </pre>
       */
      public boolean hasRound() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required uint32 round = 7;</code>
       *
       * <pre>
       *第几圈
       * </pre>
       */
      public int getRound() {
        return round_;
      }
      /**
       * <code>required uint32 round = 7;</code>
       *
       * <pre>
       *第几圈
       * </pre>
       */
      public Builder setRound(int value) {
        bitField0_ |= 0x00000040;
        round_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 round = 7;</code>
       *
       * <pre>
       *第几圈
       * </pre>
       */
      public Builder clearRound() {
        bitField0_ = (bitField0_ & ~0x00000040);
        round_ = 0;
        onChanged();
        return this;
      }

      // required uint32 serial = 8;
      private int serial_ ;
      /**
       * <code>required uint32 serial = 8;</code>
       *
       * <pre>
       *第几局
       * </pre>
       */
      public boolean hasSerial() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required uint32 serial = 8;</code>
       *
       * <pre>
       *第几局
       * </pre>
       */
      public int getSerial() {
        return serial_;
      }
      /**
       * <code>required uint32 serial = 8;</code>
       *
       * <pre>
       *第几局
       * </pre>
       */
      public Builder setSerial(int value) {
        bitField0_ |= 0x00000080;
        serial_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 serial = 8;</code>
       *
       * <pre>
       *第几局
       * </pre>
       */
      public Builder clearSerial() {
        bitField0_ = (bitField0_ & ~0x00000080);
        serial_ = 0;
        onChanged();
        return this;
      }

      // required uint32 startSeat = 9;
      private int startSeat_ ;
      /**
       * <code>required uint32 startSeat = 9;</code>
       *
       * <pre>
       *开门的座位号
       * </pre>
       */
      public boolean hasStartSeat() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required uint32 startSeat = 9;</code>
       *
       * <pre>
       *开门的座位号
       * </pre>
       */
      public int getStartSeat() {
        return startSeat_;
      }
      /**
       * <code>required uint32 startSeat = 9;</code>
       *
       * <pre>
       *开门的座位号
       * </pre>
       */
      public Builder setStartSeat(int value) {
        bitField0_ |= 0x00000100;
        startSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 startSeat = 9;</code>
       *
       * <pre>
       *开门的座位号
       * </pre>
       */
      public Builder clearStartSeat() {
        bitField0_ = (bitField0_ & ~0x00000100);
        startSeat_ = 0;
        onChanged();
        return this;
      }

      // required uint32 startFrusta = 10;
      private int startFrusta_ ;
      /**
       * <code>required uint32 startFrusta = 10;</code>
       *
       * <pre>
       *开门的墩数
       * </pre>
       */
      public boolean hasStartFrusta() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required uint32 startFrusta = 10;</code>
       *
       * <pre>
       *开门的墩数
       * </pre>
       */
      public int getStartFrusta() {
        return startFrusta_;
      }
      /**
       * <code>required uint32 startFrusta = 10;</code>
       *
       * <pre>
       *开门的墩数
       * </pre>
       */
      public Builder setStartFrusta(int value) {
        bitField0_ |= 0x00000200;
        startFrusta_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 startFrusta = 10;</code>
       *
       * <pre>
       *开门的墩数
       * </pre>
       */
      public Builder clearStartFrusta() {
        bitField0_ = (bitField0_ & ~0x00000200);
        startFrusta_ = 0;
        onChanged();
        return this;
      }

      // required uint32 frontDrewTiles = 11;
      private int frontDrewTiles_ ;
      /**
       * <code>required uint32 frontDrewTiles = 11;</code>
       *
       * <pre>
       *前边抓过多少张牌
       * </pre>
       */
      public boolean hasFrontDrewTiles() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required uint32 frontDrewTiles = 11;</code>
       *
       * <pre>
       *前边抓过多少张牌
       * </pre>
       */
      public int getFrontDrewTiles() {
        return frontDrewTiles_;
      }
      /**
       * <code>required uint32 frontDrewTiles = 11;</code>
       *
       * <pre>
       *前边抓过多少张牌
       * </pre>
       */
      public Builder setFrontDrewTiles(int value) {
        bitField0_ |= 0x00000400;
        frontDrewTiles_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 frontDrewTiles = 11;</code>
       *
       * <pre>
       *前边抓过多少张牌
       * </pre>
       */
      public Builder clearFrontDrewTiles() {
        bitField0_ = (bitField0_ & ~0x00000400);
        frontDrewTiles_ = 0;
        onChanged();
        return this;
      }

      // required uint32 backDrewTiles = 12;
      private int backDrewTiles_ ;
      /**
       * <code>required uint32 backDrewTiles = 12;</code>
       *
       * <pre>
       *后边抓过多少张牌
       * </pre>
       */
      public boolean hasBackDrewTiles() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required uint32 backDrewTiles = 12;</code>
       *
       * <pre>
       *后边抓过多少张牌
       * </pre>
       */
      public int getBackDrewTiles() {
        return backDrewTiles_;
      }
      /**
       * <code>required uint32 backDrewTiles = 12;</code>
       *
       * <pre>
       *后边抓过多少张牌
       * </pre>
       */
      public Builder setBackDrewTiles(int value) {
        bitField0_ |= 0x00000800;
        backDrewTiles_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 backDrewTiles = 12;</code>
       *
       * <pre>
       *后边抓过多少张牌
       * </pre>
       */
      public Builder clearBackDrewTiles() {
        bitField0_ = (bitField0_ & ~0x00000800);
        backDrewTiles_ = 0;
        onChanged();
        return this;
      }

      // repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;
      private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo> tileInfos_ =
        java.util.Collections.emptyList();
      private void ensureTileInfosIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          tileInfos_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo>(tileInfos_);
          bitField0_ |= 0x00001000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfoOrBuilder> tileInfosBuilder_;

      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo> getTileInfosList() {
        if (tileInfosBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tileInfos_);
        } else {
          return tileInfosBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public int getTileInfosCount() {
        if (tileInfosBuilder_ == null) {
          return tileInfos_.size();
        } else {
          return tileInfosBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo getTileInfos(int index) {
        if (tileInfosBuilder_ == null) {
          return tileInfos_.get(index);
        } else {
          return tileInfosBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public Builder setTileInfos(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo value) {
        if (tileInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTileInfosIsMutable();
          tileInfos_.set(index, value);
          onChanged();
        } else {
          tileInfosBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public Builder setTileInfos(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.Builder builderForValue) {
        if (tileInfosBuilder_ == null) {
          ensureTileInfosIsMutable();
          tileInfos_.set(index, builderForValue.build());
          onChanged();
        } else {
          tileInfosBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public Builder addTileInfos(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo value) {
        if (tileInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTileInfosIsMutable();
          tileInfos_.add(value);
          onChanged();
        } else {
          tileInfosBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public Builder addTileInfos(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo value) {
        if (tileInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTileInfosIsMutable();
          tileInfos_.add(index, value);
          onChanged();
        } else {
          tileInfosBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public Builder addTileInfos(
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.Builder builderForValue) {
        if (tileInfosBuilder_ == null) {
          ensureTileInfosIsMutable();
          tileInfos_.add(builderForValue.build());
          onChanged();
        } else {
          tileInfosBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public Builder addTileInfos(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.Builder builderForValue) {
        if (tileInfosBuilder_ == null) {
          ensureTileInfosIsMutable();
          tileInfos_.add(index, builderForValue.build());
          onChanged();
        } else {
          tileInfosBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public Builder addAllTileInfos(
          java.lang.Iterable<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo> values) {
        if (tileInfosBuilder_ == null) {
          ensureTileInfosIsMutable();
          super.addAll(values, tileInfos_);
          onChanged();
        } else {
          tileInfosBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public Builder clearTileInfos() {
        if (tileInfosBuilder_ == null) {
          tileInfos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          onChanged();
        } else {
          tileInfosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public Builder removeTileInfos(int index) {
        if (tileInfosBuilder_ == null) {
          ensureTileInfosIsMutable();
          tileInfos_.remove(index);
          onChanged();
        } else {
          tileInfosBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.Builder getTileInfosBuilder(
          int index) {
        return getTileInfosFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfoOrBuilder getTileInfosOrBuilder(
          int index) {
        if (tileInfosBuilder_ == null) {
          return tileInfos_.get(index);  } else {
          return tileInfosBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfoOrBuilder> 
           getTileInfosOrBuilderList() {
        if (tileInfosBuilder_ != null) {
          return tileInfosBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tileInfos_);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.Builder addTileInfosBuilder() {
        return getTileInfosFieldBuilder().addBuilder(
            com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.Builder addTileInfosBuilder(
          int index) {
        return getTileInfosFieldBuilder().addBuilder(
            index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.CurrentTileInfo tileInfos = 13;</code>
       *
       * <pre>
       *用户牌的信息
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.Builder> 
           getTileInfosBuilderList() {
        return getTileInfosFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfoOrBuilder> 
          getTileInfosFieldBuilder() {
        if (tileInfosBuilder_ == null) {
          tileInfosBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfo.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CurrentTileInfoOrBuilder>(
                  tileInfos_,
                  ((bitField0_ & 0x00001000) == 0x00001000),
                  getParentForChildren(),
                  isClean());
          tileInfos_ = null;
        }
        return tileInfosBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfGameStatus)
    }

    static {
      defaultInstance = new NtfGameStatus(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfGameStatus)
  }

  public interface CReqUserTrustOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 gameId = 1;
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    boolean hasGameId();
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    long getGameId();

    // required int32 trust = 2;
    /**
     * <code>required int32 trust = 2;</code>
     *
     * <pre>
     *0为解除托管,1手动托管，2超时自动托管，4断线自动托管
     * </pre>
     */
    boolean hasTrust();
    /**
     * <code>required int32 trust = 2;</code>
     *
     * <pre>
     *0为解除托管,1手动托管，2超时自动托管，4断线自动托管
     * </pre>
     */
    int getTrust();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.CReqUserTrust}
   *
   * <pre>
   *========================================================================================
   * 托管
   * #define OGID_GAME_HOSTING					( OGID_GAME_MESSAGE + 27 )
   * </pre>
   */
  public static final class CReqUserTrust extends
      com.google.protobuf.GeneratedMessage
      implements CReqUserTrustOrBuilder {
    // Use CReqUserTrust.newBuilder() to construct.
    private CReqUserTrust(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CReqUserTrust(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CReqUserTrust defaultInstance;
    public static CReqUserTrust getDefaultInstance() {
      return defaultInstance;
    }

    public CReqUserTrust getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CReqUserTrust(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              gameId_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              trust_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqUserTrust_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqUserTrust_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust.Builder.class);
    }

    public static com.google.protobuf.Parser<CReqUserTrust> PARSER =
        new com.google.protobuf.AbstractParser<CReqUserTrust>() {
      public CReqUserTrust parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CReqUserTrust(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CReqUserTrust> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 gameId = 1;
    public static final int GAMEID_FIELD_NUMBER = 1;
    private long gameId_;
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    public boolean hasGameId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    public long getGameId() {
      return gameId_;
    }

    // required int32 trust = 2;
    public static final int TRUST_FIELD_NUMBER = 2;
    private int trust_;
    /**
     * <code>required int32 trust = 2;</code>
     *
     * <pre>
     *0为解除托管,1手动托管，2超时自动托管，4断线自动托管
     * </pre>
     */
    public boolean hasTrust() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 trust = 2;</code>
     *
     * <pre>
     *0为解除托管,1手动托管，2超时自动托管，4断线自动托管
     * </pre>
     */
    public int getTrust() {
      return trust_;
    }

    private void initFields() {
      gameId_ = 0L;
      trust_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasGameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTrust()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, gameId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, trust_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, gameId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, trust_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.CReqUserTrust}
     *
     * <pre>
     *========================================================================================
     * 托管
     * #define OGID_GAME_HOSTING					( OGID_GAME_MESSAGE + 27 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrustOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqUserTrust_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqUserTrust_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        gameId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        trust_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CReqUserTrust_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.gameId_ = gameId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.trust_ = trust_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust.getDefaultInstance()) return this;
        if (other.hasGameId()) {
          setGameId(other.getGameId());
        }
        if (other.hasTrust()) {
          setTrust(other.getTrust());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasGameId()) {
          
          return false;
        }
        if (!hasTrust()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CReqUserTrust) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 gameId = 1;
      private long gameId_ ;
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public boolean hasGameId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public long getGameId() {
        return gameId_;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public Builder setGameId(long value) {
        bitField0_ |= 0x00000001;
        gameId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public Builder clearGameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        gameId_ = 0L;
        onChanged();
        return this;
      }

      // required int32 trust = 2;
      private int trust_ ;
      /**
       * <code>required int32 trust = 2;</code>
       *
       * <pre>
       *0为解除托管,1手动托管，2超时自动托管，4断线自动托管
       * </pre>
       */
      public boolean hasTrust() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 trust = 2;</code>
       *
       * <pre>
       *0为解除托管,1手动托管，2超时自动托管，4断线自动托管
       * </pre>
       */
      public int getTrust() {
        return trust_;
      }
      /**
       * <code>required int32 trust = 2;</code>
       *
       * <pre>
       *0为解除托管,1手动托管，2超时自动托管，4断线自动托管
       * </pre>
       */
      public Builder setTrust(int value) {
        bitField0_ |= 0x00000002;
        trust_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 trust = 2;</code>
       *
       * <pre>
       *0为解除托管,1手动托管，2超时自动托管，4断线自动托管
       * </pre>
       */
      public Builder clearTrust() {
        bitField0_ = (bitField0_ & ~0x00000002);
        trust_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.CReqUserTrust)
    }

    static {
      defaultInstance = new CReqUserTrust(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.CReqUserTrust)
  }

  public interface NtfUserTrustOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 gameId = 1;
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    boolean hasGameId();
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    long getGameId();

    // required int32 seat = 2;
    /**
     * <code>required int32 seat = 2;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    boolean hasSeat();
    /**
     * <code>required int32 seat = 2;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    int getSeat();

    // required int32 trust = 3;
    /**
     * <code>required int32 trust = 3;</code>
     */
    boolean hasTrust();
    /**
     * <code>required int32 trust = 3;</code>
     */
    int getTrust();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfUserTrust}
   */
  public static final class NtfUserTrust extends
      com.google.protobuf.GeneratedMessage
      implements NtfUserTrustOrBuilder {
    // Use NtfUserTrust.newBuilder() to construct.
    private NtfUserTrust(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfUserTrust(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfUserTrust defaultInstance;
    public static NtfUserTrust getDefaultInstance() {
      return defaultInstance;
    }

    public NtfUserTrust getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfUserTrust(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              gameId_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              seat_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              trust_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfUserTrust_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfUserTrust_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfUserTrust> PARSER =
        new com.google.protobuf.AbstractParser<NtfUserTrust>() {
      public NtfUserTrust parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfUserTrust(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfUserTrust> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 gameId = 1;
    public static final int GAMEID_FIELD_NUMBER = 1;
    private long gameId_;
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    public boolean hasGameId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    public long getGameId() {
      return gameId_;
    }

    // required int32 seat = 2;
    public static final int SEAT_FIELD_NUMBER = 2;
    private int seat_;
    /**
     * <code>required int32 seat = 2;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public boolean hasSeat() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 seat = 2;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public int getSeat() {
      return seat_;
    }

    // required int32 trust = 3;
    public static final int TRUST_FIELD_NUMBER = 3;
    private int trust_;
    /**
     * <code>required int32 trust = 3;</code>
     */
    public boolean hasTrust() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 trust = 3;</code>
     */
    public int getTrust() {
      return trust_;
    }

    private void initFields() {
      gameId_ = 0L;
      seat_ = 0;
      trust_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasGameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTrust()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, gameId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, seat_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, trust_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, gameId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, seat_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, trust_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfUserTrust}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrustOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfUserTrust_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfUserTrust_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        gameId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        seat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        trust_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfUserTrust_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.gameId_ = gameId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.seat_ = seat_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.trust_ = trust_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust.getDefaultInstance()) return this;
        if (other.hasGameId()) {
          setGameId(other.getGameId());
        }
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasTrust()) {
          setTrust(other.getTrust());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasGameId()) {
          
          return false;
        }
        if (!hasSeat()) {
          
          return false;
        }
        if (!hasTrust()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfUserTrust) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 gameId = 1;
      private long gameId_ ;
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public boolean hasGameId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public long getGameId() {
        return gameId_;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public Builder setGameId(long value) {
        bitField0_ |= 0x00000001;
        gameId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public Builder clearGameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        gameId_ = 0L;
        onChanged();
        return this;
      }

      // required int32 seat = 2;
      private int seat_ ;
      /**
       * <code>required int32 seat = 2;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 seat = 2;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public int getSeat() {
        return seat_;
      }
      /**
       * <code>required int32 seat = 2;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder setSeat(int value) {
        bitField0_ |= 0x00000002;
        seat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 seat = 2;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder clearSeat() {
        bitField0_ = (bitField0_ & ~0x00000002);
        seat_ = 0;
        onChanged();
        return this;
      }

      // required int32 trust = 3;
      private int trust_ ;
      /**
       * <code>required int32 trust = 3;</code>
       */
      public boolean hasTrust() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 trust = 3;</code>
       */
      public int getTrust() {
        return trust_;
      }
      /**
       * <code>required int32 trust = 3;</code>
       */
      public Builder setTrust(int value) {
        bitField0_ |= 0x00000004;
        trust_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 trust = 3;</code>
       */
      public Builder clearTrust() {
        bitField0_ = (bitField0_ & ~0x00000004);
        trust_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfUserTrust)
    }

    static {
      defaultInstance = new NtfUserTrust(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfUserTrust)
  }

  public interface NtfGameOverOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 gameId = 1;
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    boolean hasGameId();
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    long getGameId();

    // repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
     */
    java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus> 
        getFinalStatusList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus getFinalStatus(int index);
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
     */
    int getFinalStatusCount();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
     */
    java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatusOrBuilder> 
        getFinalStatusOrBuilderList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatusOrBuilder getFinalStatusOrBuilder(
        int index);

    // repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
     */
    java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo> 
        getFinalWinInfosList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo getFinalWinInfos(int index);
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
     */
    int getFinalWinInfosCount();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
     */
    java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfoOrBuilder> 
        getFinalWinInfosOrBuilderList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfoOrBuilder getFinalWinInfosOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameOver}
   *
   * <pre>
   *========================================================================================
   * 亮牌
   * #define OGID_SHOW_CARD						( OGID_GAME_MESSAGE + 29 )
   * </pre>
   */
  public static final class NtfGameOver extends
      com.google.protobuf.GeneratedMessage
      implements NtfGameOverOrBuilder {
    // Use NtfGameOver.newBuilder() to construct.
    private NtfGameOver(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfGameOver(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfGameOver defaultInstance;
    public static NtfGameOver getDefaultInstance() {
      return defaultInstance;
    }

    public NtfGameOver getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfGameOver(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              gameId_ = input.readUInt64();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                finalStatus_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus>();
                mutable_bitField0_ |= 0x00000002;
              }
              finalStatus_.add(input.readMessage(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                finalWinInfos_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo>();
                mutable_bitField0_ |= 0x00000004;
              }
              finalWinInfos_.add(input.readMessage(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          finalStatus_ = java.util.Collections.unmodifiableList(finalStatus_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          finalWinInfos_ = java.util.Collections.unmodifiableList(finalWinInfos_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfGameOver> PARSER =
        new com.google.protobuf.AbstractParser<NtfGameOver>() {
      public NtfGameOver parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfGameOver(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfGameOver> getParserForType() {
      return PARSER;
    }

    public interface FinalStatusOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required uint32 seat = 1;
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      boolean hasSeat();
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      int getSeat();

      // repeated uint32 tilesInHand = 2;
      /**
       * <code>repeated uint32 tilesInHand = 2;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      java.util.List<java.lang.Integer> getTilesInHandList();
      /**
       * <code>repeated uint32 tilesInHand = 2;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      int getTilesInHandCount();
      /**
       * <code>repeated uint32 tilesInHand = 2;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      int getTilesInHand(int index);

      // required uint32 status = 3 [default = 0];
      /**
       * <code>required uint32 status = 3 [default = 0];</code>
       *
       * <pre>
       *0:正常  1：无听  2： 花猪
       * </pre>
       */
      boolean hasStatus();
      /**
       * <code>required uint32 status = 3 [default = 0];</code>
       *
       * <pre>
       *0:正常  1：无听  2： 花猪
       * </pre>
       */
      int getStatus();
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus}
     *
     * <pre>
     *用户最终状态
     * </pre>
     */
    public static final class FinalStatus extends
        com.google.protobuf.GeneratedMessage
        implements FinalStatusOrBuilder {
      // Use FinalStatus.newBuilder() to construct.
      private FinalStatus(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private FinalStatus(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final FinalStatus defaultInstance;
      public static FinalStatus getDefaultInstance() {
        return defaultInstance;
      }

      public FinalStatus getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private FinalStatus(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                seat_ = input.readUInt32();
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  tilesInHand_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                tilesInHand_.add(input.readUInt32());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  tilesInHand_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  tilesInHand_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                bitField0_ |= 0x00000002;
                status_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            tilesInHand_ = java.util.Collections.unmodifiableList(tilesInHand_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalStatus_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalStatus_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.Builder.class);
      }

      public static com.google.protobuf.Parser<FinalStatus> PARSER =
          new com.google.protobuf.AbstractParser<FinalStatus>() {
        public FinalStatus parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new FinalStatus(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<FinalStatus> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required uint32 seat = 1;
      public static final int SEAT_FIELD_NUMBER = 1;
      private int seat_;
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public int getSeat() {
        return seat_;
      }

      // repeated uint32 tilesInHand = 2;
      public static final int TILESINHAND_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Integer> tilesInHand_;
      /**
       * <code>repeated uint32 tilesInHand = 2;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTilesInHandList() {
        return tilesInHand_;
      }
      /**
       * <code>repeated uint32 tilesInHand = 2;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public int getTilesInHandCount() {
        return tilesInHand_.size();
      }
      /**
       * <code>repeated uint32 tilesInHand = 2;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public int getTilesInHand(int index) {
        return tilesInHand_.get(index);
      }

      // required uint32 status = 3 [default = 0];
      public static final int STATUS_FIELD_NUMBER = 3;
      private int status_;
      /**
       * <code>required uint32 status = 3 [default = 0];</code>
       *
       * <pre>
       *0:正常  1：无听  2： 花猪
       * </pre>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 status = 3 [default = 0];</code>
       *
       * <pre>
       *0:正常  1：无听  2： 花猪
       * </pre>
       */
      public int getStatus() {
        return status_;
      }

      private void initFields() {
        seat_ = 0;
        tilesInHand_ = java.util.Collections.emptyList();
        status_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasSeat()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasStatus()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, seat_);
        }
        for (int i = 0; i < tilesInHand_.size(); i++) {
          output.writeUInt32(2, tilesInHand_.get(i));
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(3, status_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, seat_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < tilesInHand_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(tilesInHand_.get(i));
          }
          size += dataSize;
          size += 1 * getTilesInHandList().size();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, status_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus}
       *
       * <pre>
       *用户最终状态
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatusOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalStatus_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalStatus_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.Builder.class);
        }

        // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          seat_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          tilesInHand_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          status_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalStatus_descriptor;
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus getDefaultInstanceForType() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.getDefaultInstance();
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus build() {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus buildPartial() {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.seat_ = seat_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            tilesInHand_ = java.util.Collections.unmodifiableList(tilesInHand_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.tilesInHand_ = tilesInHand_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000002;
          }
          result.status_ = status_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus) {
            return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus other) {
          if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.getDefaultInstance()) return this;
          if (other.hasSeat()) {
            setSeat(other.getSeat());
          }
          if (!other.tilesInHand_.isEmpty()) {
            if (tilesInHand_.isEmpty()) {
              tilesInHand_ = other.tilesInHand_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTilesInHandIsMutable();
              tilesInHand_.addAll(other.tilesInHand_);
            }
            onChanged();
          }
          if (other.hasStatus()) {
            setStatus(other.getStatus());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasSeat()) {
            
            return false;
          }
          if (!hasStatus()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required uint32 seat = 1;
        private int seat_ ;
        /**
         * <code>required uint32 seat = 1;</code>
         *
         * <pre>
         *座位号
         * </pre>
         */
        public boolean hasSeat() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 seat = 1;</code>
         *
         * <pre>
         *座位号
         * </pre>
         */
        public int getSeat() {
          return seat_;
        }
        /**
         * <code>required uint32 seat = 1;</code>
         *
         * <pre>
         *座位号
         * </pre>
         */
        public Builder setSeat(int value) {
          bitField0_ |= 0x00000001;
          seat_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 seat = 1;</code>
         *
         * <pre>
         *座位号
         * </pre>
         */
        public Builder clearSeat() {
          bitField0_ = (bitField0_ & ~0x00000001);
          seat_ = 0;
          onChanged();
          return this;
        }

        // repeated uint32 tilesInHand = 2;
        private java.util.List<java.lang.Integer> tilesInHand_ = java.util.Collections.emptyList();
        private void ensureTilesInHandIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            tilesInHand_ = new java.util.ArrayList<java.lang.Integer>(tilesInHand_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated uint32 tilesInHand = 2;</code>
         *
         * <pre>
         *手牌
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getTilesInHandList() {
          return java.util.Collections.unmodifiableList(tilesInHand_);
        }
        /**
         * <code>repeated uint32 tilesInHand = 2;</code>
         *
         * <pre>
         *手牌
         * </pre>
         */
        public int getTilesInHandCount() {
          return tilesInHand_.size();
        }
        /**
         * <code>repeated uint32 tilesInHand = 2;</code>
         *
         * <pre>
         *手牌
         * </pre>
         */
        public int getTilesInHand(int index) {
          return tilesInHand_.get(index);
        }
        /**
         * <code>repeated uint32 tilesInHand = 2;</code>
         *
         * <pre>
         *手牌
         * </pre>
         */
        public Builder setTilesInHand(
            int index, int value) {
          ensureTilesInHandIsMutable();
          tilesInHand_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 tilesInHand = 2;</code>
         *
         * <pre>
         *手牌
         * </pre>
         */
        public Builder addTilesInHand(int value) {
          ensureTilesInHandIsMutable();
          tilesInHand_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 tilesInHand = 2;</code>
         *
         * <pre>
         *手牌
         * </pre>
         */
        public Builder addAllTilesInHand(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureTilesInHandIsMutable();
          super.addAll(values, tilesInHand_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 tilesInHand = 2;</code>
         *
         * <pre>
         *手牌
         * </pre>
         */
        public Builder clearTilesInHand() {
          tilesInHand_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // required uint32 status = 3 [default = 0];
        private int status_ ;
        /**
         * <code>required uint32 status = 3 [default = 0];</code>
         *
         * <pre>
         *0:正常  1：无听  2： 花猪
         * </pre>
         */
        public boolean hasStatus() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required uint32 status = 3 [default = 0];</code>
         *
         * <pre>
         *0:正常  1：无听  2： 花猪
         * </pre>
         */
        public int getStatus() {
          return status_;
        }
        /**
         * <code>required uint32 status = 3 [default = 0];</code>
         *
         * <pre>
         *0:正常  1：无听  2： 花猪
         * </pre>
         */
        public Builder setStatus(int value) {
          bitField0_ |= 0x00000004;
          status_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 status = 3 [default = 0];</code>
         *
         * <pre>
         *0:正常  1：无听  2： 花猪
         * </pre>
         */
        public Builder clearStatus() {
          bitField0_ = (bitField0_ & ~0x00000004);
          status_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus)
      }

      static {
        defaultInstance = new FinalStatus(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus)
    }

    public interface FinalWinInfoOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required uint32 seat = 1;
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      boolean hasSeat();
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      int getSeat();

      // required sint32 points = 2;
      /**
       * <code>required sint32 points = 2;</code>
       *
       * <pre>
       *番数
       * </pre>
       */
      boolean hasPoints();
      /**
       * <code>required sint32 points = 2;</code>
       *
       * <pre>
       *番数
       * </pre>
       */
      int getPoints();
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo}
     *
     * <pre>
     *最终无听，花猪赔付信息
     * </pre>
     */
    public static final class FinalWinInfo extends
        com.google.protobuf.GeneratedMessage
        implements FinalWinInfoOrBuilder {
      // Use FinalWinInfo.newBuilder() to construct.
      private FinalWinInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private FinalWinInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final FinalWinInfo defaultInstance;
      public static FinalWinInfo getDefaultInstance() {
        return defaultInstance;
      }

      public FinalWinInfo getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private FinalWinInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                seat_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                points_ = input.readSInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalWinInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalWinInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.Builder.class);
      }

      public static com.google.protobuf.Parser<FinalWinInfo> PARSER =
          new com.google.protobuf.AbstractParser<FinalWinInfo>() {
        public FinalWinInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new FinalWinInfo(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<FinalWinInfo> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required uint32 seat = 1;
      public static final int SEAT_FIELD_NUMBER = 1;
      private int seat_;
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 seat = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public int getSeat() {
        return seat_;
      }

      // required sint32 points = 2;
      public static final int POINTS_FIELD_NUMBER = 2;
      private int points_;
      /**
       * <code>required sint32 points = 2;</code>
       *
       * <pre>
       *番数
       * </pre>
       */
      public boolean hasPoints() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 points = 2;</code>
       *
       * <pre>
       *番数
       * </pre>
       */
      public int getPoints() {
        return points_;
      }

      private void initFields() {
        seat_ = 0;
        points_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasSeat()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasPoints()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, seat_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeSInt32(2, points_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, seat_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeSInt32Size(2, points_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo}
       *
       * <pre>
       *最终无听，花猪赔付信息
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalWinInfo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalWinInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.Builder.class);
        }

        // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          seat_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          points_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalWinInfo_descriptor;
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo getDefaultInstanceForType() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.getDefaultInstance();
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo build() {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo buildPartial() {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.seat_ = seat_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.points_ = points_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo) {
            return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo other) {
          if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.getDefaultInstance()) return this;
          if (other.hasSeat()) {
            setSeat(other.getSeat());
          }
          if (other.hasPoints()) {
            setPoints(other.getPoints());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasSeat()) {
            
            return false;
          }
          if (!hasPoints()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required uint32 seat = 1;
        private int seat_ ;
        /**
         * <code>required uint32 seat = 1;</code>
         *
         * <pre>
         *座位号
         * </pre>
         */
        public boolean hasSeat() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 seat = 1;</code>
         *
         * <pre>
         *座位号
         * </pre>
         */
        public int getSeat() {
          return seat_;
        }
        /**
         * <code>required uint32 seat = 1;</code>
         *
         * <pre>
         *座位号
         * </pre>
         */
        public Builder setSeat(int value) {
          bitField0_ |= 0x00000001;
          seat_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 seat = 1;</code>
         *
         * <pre>
         *座位号
         * </pre>
         */
        public Builder clearSeat() {
          bitField0_ = (bitField0_ & ~0x00000001);
          seat_ = 0;
          onChanged();
          return this;
        }

        // required sint32 points = 2;
        private int points_ ;
        /**
         * <code>required sint32 points = 2;</code>
         *
         * <pre>
         *番数
         * </pre>
         */
        public boolean hasPoints() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required sint32 points = 2;</code>
         *
         * <pre>
         *番数
         * </pre>
         */
        public int getPoints() {
          return points_;
        }
        /**
         * <code>required sint32 points = 2;</code>
         *
         * <pre>
         *番数
         * </pre>
         */
        public Builder setPoints(int value) {
          bitField0_ |= 0x00000002;
          points_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required sint32 points = 2;</code>
         *
         * <pre>
         *番数
         * </pre>
         */
        public Builder clearPoints() {
          bitField0_ = (bitField0_ & ~0x00000002);
          points_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo)
      }

      static {
        defaultInstance = new FinalWinInfo(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo)
    }

    private int bitField0_;
    // required uint64 gameId = 1;
    public static final int GAMEID_FIELD_NUMBER = 1;
    private long gameId_;
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    public boolean hasGameId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 gameId = 1;</code>
     */
    public long getGameId() {
      return gameId_;
    }

    // repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;
    public static final int FINALSTATUS_FIELD_NUMBER = 2;
    private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus> finalStatus_;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
     */
    public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus> getFinalStatusList() {
      return finalStatus_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
     */
    public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatusOrBuilder> 
        getFinalStatusOrBuilderList() {
      return finalStatus_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
     */
    public int getFinalStatusCount() {
      return finalStatus_.size();
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus getFinalStatus(int index) {
      return finalStatus_.get(index);
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatusOrBuilder getFinalStatusOrBuilder(
        int index) {
      return finalStatus_.get(index);
    }

    // repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;
    public static final int FINALWININFOS_FIELD_NUMBER = 3;
    private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo> finalWinInfos_;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
     */
    public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo> getFinalWinInfosList() {
      return finalWinInfos_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
     */
    public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfoOrBuilder> 
        getFinalWinInfosOrBuilderList() {
      return finalWinInfos_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
     */
    public int getFinalWinInfosCount() {
      return finalWinInfos_.size();
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo getFinalWinInfos(int index) {
      return finalWinInfos_.get(index);
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfoOrBuilder getFinalWinInfosOrBuilder(
        int index) {
      return finalWinInfos_.get(index);
    }

    private void initFields() {
      gameId_ = 0L;
      finalStatus_ = java.util.Collections.emptyList();
      finalWinInfos_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasGameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getFinalStatusCount(); i++) {
        if (!getFinalStatus(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getFinalWinInfosCount(); i++) {
        if (!getFinalWinInfos(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, gameId_);
      }
      for (int i = 0; i < finalStatus_.size(); i++) {
        output.writeMessage(2, finalStatus_.get(i));
      }
      for (int i = 0; i < finalWinInfos_.size(); i++) {
        output.writeMessage(3, finalWinInfos_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, gameId_);
      }
      for (int i = 0; i < finalStatus_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, finalStatus_.get(i));
      }
      for (int i = 0; i < finalWinInfos_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, finalWinInfos_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameOver}
     *
     * <pre>
     *========================================================================================
     * 亮牌
     * #define OGID_SHOW_CARD						( OGID_GAME_MESSAGE + 29 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOverOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFinalStatusFieldBuilder();
          getFinalWinInfosFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        gameId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (finalStatusBuilder_ == null) {
          finalStatus_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          finalStatusBuilder_.clear();
        }
        if (finalWinInfosBuilder_ == null) {
          finalWinInfos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          finalWinInfosBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.gameId_ = gameId_;
        if (finalStatusBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            finalStatus_ = java.util.Collections.unmodifiableList(finalStatus_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.finalStatus_ = finalStatus_;
        } else {
          result.finalStatus_ = finalStatusBuilder_.build();
        }
        if (finalWinInfosBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            finalWinInfos_ = java.util.Collections.unmodifiableList(finalWinInfos_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.finalWinInfos_ = finalWinInfos_;
        } else {
          result.finalWinInfos_ = finalWinInfosBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.getDefaultInstance()) return this;
        if (other.hasGameId()) {
          setGameId(other.getGameId());
        }
        if (finalStatusBuilder_ == null) {
          if (!other.finalStatus_.isEmpty()) {
            if (finalStatus_.isEmpty()) {
              finalStatus_ = other.finalStatus_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureFinalStatusIsMutable();
              finalStatus_.addAll(other.finalStatus_);
            }
            onChanged();
          }
        } else {
          if (!other.finalStatus_.isEmpty()) {
            if (finalStatusBuilder_.isEmpty()) {
              finalStatusBuilder_.dispose();
              finalStatusBuilder_ = null;
              finalStatus_ = other.finalStatus_;
              bitField0_ = (bitField0_ & ~0x00000002);
              finalStatusBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFinalStatusFieldBuilder() : null;
            } else {
              finalStatusBuilder_.addAllMessages(other.finalStatus_);
            }
          }
        }
        if (finalWinInfosBuilder_ == null) {
          if (!other.finalWinInfos_.isEmpty()) {
            if (finalWinInfos_.isEmpty()) {
              finalWinInfos_ = other.finalWinInfos_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureFinalWinInfosIsMutable();
              finalWinInfos_.addAll(other.finalWinInfos_);
            }
            onChanged();
          }
        } else {
          if (!other.finalWinInfos_.isEmpty()) {
            if (finalWinInfosBuilder_.isEmpty()) {
              finalWinInfosBuilder_.dispose();
              finalWinInfosBuilder_ = null;
              finalWinInfos_ = other.finalWinInfos_;
              bitField0_ = (bitField0_ & ~0x00000004);
              finalWinInfosBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFinalWinInfosFieldBuilder() : null;
            } else {
              finalWinInfosBuilder_.addAllMessages(other.finalWinInfos_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasGameId()) {
          
          return false;
        }
        for (int i = 0; i < getFinalStatusCount(); i++) {
          if (!getFinalStatus(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getFinalWinInfosCount(); i++) {
          if (!getFinalWinInfos(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 gameId = 1;
      private long gameId_ ;
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public boolean hasGameId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public long getGameId() {
        return gameId_;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public Builder setGameId(long value) {
        bitField0_ |= 0x00000001;
        gameId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 gameId = 1;</code>
       */
      public Builder clearGameId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        gameId_ = 0L;
        onChanged();
        return this;
      }

      // repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;
      private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus> finalStatus_ =
        java.util.Collections.emptyList();
      private void ensureFinalStatusIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          finalStatus_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus>(finalStatus_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatusOrBuilder> finalStatusBuilder_;

      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus> getFinalStatusList() {
        if (finalStatusBuilder_ == null) {
          return java.util.Collections.unmodifiableList(finalStatus_);
        } else {
          return finalStatusBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public int getFinalStatusCount() {
        if (finalStatusBuilder_ == null) {
          return finalStatus_.size();
        } else {
          return finalStatusBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus getFinalStatus(int index) {
        if (finalStatusBuilder_ == null) {
          return finalStatus_.get(index);
        } else {
          return finalStatusBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public Builder setFinalStatus(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus value) {
        if (finalStatusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFinalStatusIsMutable();
          finalStatus_.set(index, value);
          onChanged();
        } else {
          finalStatusBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public Builder setFinalStatus(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.Builder builderForValue) {
        if (finalStatusBuilder_ == null) {
          ensureFinalStatusIsMutable();
          finalStatus_.set(index, builderForValue.build());
          onChanged();
        } else {
          finalStatusBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public Builder addFinalStatus(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus value) {
        if (finalStatusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFinalStatusIsMutable();
          finalStatus_.add(value);
          onChanged();
        } else {
          finalStatusBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public Builder addFinalStatus(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus value) {
        if (finalStatusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFinalStatusIsMutable();
          finalStatus_.add(index, value);
          onChanged();
        } else {
          finalStatusBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public Builder addFinalStatus(
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.Builder builderForValue) {
        if (finalStatusBuilder_ == null) {
          ensureFinalStatusIsMutable();
          finalStatus_.add(builderForValue.build());
          onChanged();
        } else {
          finalStatusBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public Builder addFinalStatus(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.Builder builderForValue) {
        if (finalStatusBuilder_ == null) {
          ensureFinalStatusIsMutable();
          finalStatus_.add(index, builderForValue.build());
          onChanged();
        } else {
          finalStatusBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public Builder addAllFinalStatus(
          java.lang.Iterable<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus> values) {
        if (finalStatusBuilder_ == null) {
          ensureFinalStatusIsMutable();
          super.addAll(values, finalStatus_);
          onChanged();
        } else {
          finalStatusBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public Builder clearFinalStatus() {
        if (finalStatusBuilder_ == null) {
          finalStatus_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          finalStatusBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public Builder removeFinalStatus(int index) {
        if (finalStatusBuilder_ == null) {
          ensureFinalStatusIsMutable();
          finalStatus_.remove(index);
          onChanged();
        } else {
          finalStatusBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.Builder getFinalStatusBuilder(
          int index) {
        return getFinalStatusFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatusOrBuilder getFinalStatusOrBuilder(
          int index) {
        if (finalStatusBuilder_ == null) {
          return finalStatus_.get(index);  } else {
          return finalStatusBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatusOrBuilder> 
           getFinalStatusOrBuilderList() {
        if (finalStatusBuilder_ != null) {
          return finalStatusBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(finalStatus_);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.Builder addFinalStatusBuilder() {
        return getFinalStatusFieldBuilder().addBuilder(
            com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.Builder addFinalStatusBuilder(
          int index) {
        return getFinalStatusFieldBuilder().addBuilder(
            index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalStatus finalStatus = 2;</code>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.Builder> 
           getFinalStatusBuilderList() {
        return getFinalStatusFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatusOrBuilder> 
          getFinalStatusFieldBuilder() {
        if (finalStatusBuilder_ == null) {
          finalStatusBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatus.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalStatusOrBuilder>(
                  finalStatus_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          finalStatus_ = null;
        }
        return finalStatusBuilder_;
      }

      // repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;
      private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo> finalWinInfos_ =
        java.util.Collections.emptyList();
      private void ensureFinalWinInfosIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          finalWinInfos_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo>(finalWinInfos_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfoOrBuilder> finalWinInfosBuilder_;

      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo> getFinalWinInfosList() {
        if (finalWinInfosBuilder_ == null) {
          return java.util.Collections.unmodifiableList(finalWinInfos_);
        } else {
          return finalWinInfosBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public int getFinalWinInfosCount() {
        if (finalWinInfosBuilder_ == null) {
          return finalWinInfos_.size();
        } else {
          return finalWinInfosBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo getFinalWinInfos(int index) {
        if (finalWinInfosBuilder_ == null) {
          return finalWinInfos_.get(index);
        } else {
          return finalWinInfosBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public Builder setFinalWinInfos(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo value) {
        if (finalWinInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFinalWinInfosIsMutable();
          finalWinInfos_.set(index, value);
          onChanged();
        } else {
          finalWinInfosBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public Builder setFinalWinInfos(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.Builder builderForValue) {
        if (finalWinInfosBuilder_ == null) {
          ensureFinalWinInfosIsMutable();
          finalWinInfos_.set(index, builderForValue.build());
          onChanged();
        } else {
          finalWinInfosBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public Builder addFinalWinInfos(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo value) {
        if (finalWinInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFinalWinInfosIsMutable();
          finalWinInfos_.add(value);
          onChanged();
        } else {
          finalWinInfosBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public Builder addFinalWinInfos(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo value) {
        if (finalWinInfosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFinalWinInfosIsMutable();
          finalWinInfos_.add(index, value);
          onChanged();
        } else {
          finalWinInfosBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public Builder addFinalWinInfos(
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.Builder builderForValue) {
        if (finalWinInfosBuilder_ == null) {
          ensureFinalWinInfosIsMutable();
          finalWinInfos_.add(builderForValue.build());
          onChanged();
        } else {
          finalWinInfosBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public Builder addFinalWinInfos(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.Builder builderForValue) {
        if (finalWinInfosBuilder_ == null) {
          ensureFinalWinInfosIsMutable();
          finalWinInfos_.add(index, builderForValue.build());
          onChanged();
        } else {
          finalWinInfosBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public Builder addAllFinalWinInfos(
          java.lang.Iterable<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo> values) {
        if (finalWinInfosBuilder_ == null) {
          ensureFinalWinInfosIsMutable();
          super.addAll(values, finalWinInfos_);
          onChanged();
        } else {
          finalWinInfosBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public Builder clearFinalWinInfos() {
        if (finalWinInfosBuilder_ == null) {
          finalWinInfos_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          finalWinInfosBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public Builder removeFinalWinInfos(int index) {
        if (finalWinInfosBuilder_ == null) {
          ensureFinalWinInfosIsMutable();
          finalWinInfos_.remove(index);
          onChanged();
        } else {
          finalWinInfosBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.Builder getFinalWinInfosBuilder(
          int index) {
        return getFinalWinInfosFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfoOrBuilder getFinalWinInfosOrBuilder(
          int index) {
        if (finalWinInfosBuilder_ == null) {
          return finalWinInfos_.get(index);  } else {
          return finalWinInfosBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfoOrBuilder> 
           getFinalWinInfosOrBuilderList() {
        if (finalWinInfosBuilder_ != null) {
          return finalWinInfosBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(finalWinInfos_);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.Builder addFinalWinInfosBuilder() {
        return getFinalWinInfosFieldBuilder().addBuilder(
            com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.Builder addFinalWinInfosBuilder(
          int index) {
        return getFinalWinInfosFieldBuilder().addBuilder(
            index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameOver.FinalWinInfo finalWinInfos = 3;</code>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.Builder> 
           getFinalWinInfosBuilderList() {
        return getFinalWinInfosFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfoOrBuilder> 
          getFinalWinInfosFieldBuilder() {
        if (finalWinInfosBuilder_ == null) {
          finalWinInfosBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfo.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameOver.FinalWinInfoOrBuilder>(
                  finalWinInfos_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          finalWinInfos_ = null;
        }
        return finalWinInfosBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfGameOver)
    }

    static {
      defaultInstance = new NtfGameOver(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfGameOver)
  }

  public interface NtfGameResultOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
     */
    java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result> 
        getResultsList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result getResults(int index);
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
     */
    int getResultsCount();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
     */
    java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.ResultOrBuilder> 
        getResultsOrBuilderList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.ResultOrBuilder getResultsOrBuilder(
        int index);

    // required uint32 maxWait = 3;
    /**
     * <code>required uint32 maxWait = 3;</code>
     *
     * <pre>
     *最长等待时间，自动配桌散桌，这个值是0
     * </pre>
     */
    boolean hasMaxWait();
    /**
     * <code>required uint32 maxWait = 3;</code>
     *
     * <pre>
     *最长等待时间，自动配桌散桌，这个值是0
     * </pre>
     */
    int getMaxWait();

    // repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
     *
     * <pre>
     *输赢明细
     * </pre>
     */
    java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail> 
        getDetailsList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
     *
     * <pre>
     *输赢明细
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail getDetails(int index);
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
     *
     * <pre>
     *输赢明细
     * </pre>
     */
    int getDetailsCount();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
     *
     * <pre>
     *输赢明细
     * </pre>
     */
    java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.DetailOrBuilder> 
        getDetailsOrBuilderList();
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
     *
     * <pre>
     *输赢明细
     * </pre>
     */
    com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.DetailOrBuilder getDetailsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameResult}
   *
   * <pre>
   *========================================================================================
   * 游戏结果
   * #define OGID_GAME_RESULT						( OGID_GAME_MESSAGE + 31 )
   * </pre>
   */
  public static final class NtfGameResult extends
      com.google.protobuf.GeneratedMessage
      implements NtfGameResultOrBuilder {
    // Use NtfGameResult.newBuilder() to construct.
    private NtfGameResult(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfGameResult(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfGameResult defaultInstance;
    public static NtfGameResult getDefaultInstance() {
      return defaultInstance;
    }

    public NtfGameResult getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfGameResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                results_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result>();
                mutable_bitField0_ |= 0x00000001;
              }
              results_.add(input.readMessage(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              maxWait_ = input.readUInt32();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                details_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail>();
                mutable_bitField0_ |= 0x00000004;
              }
              details_.add(input.readMessage(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          results_ = java.util.Collections.unmodifiableList(results_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          details_ = java.util.Collections.unmodifiableList(details_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfGameResult> PARSER =
        new com.google.protobuf.AbstractParser<NtfGameResult>() {
      public NtfGameResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfGameResult(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfGameResult> getParserForType() {
      return PARSER;
    }

    public interface DetailOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required uint32 type = 1;
      /**
       * <code>required uint32 type = 1;</code>
       *
       * <pre>
       *是和还是 1和牌，2点炮 3 自摸 4 别人自摸,5 别人无听，6，自己无听，7，别人花猪，8，自己花猪
       * </pre>
       */
      boolean hasType();
      /**
       * <code>required uint32 type = 1;</code>
       *
       * <pre>
       *是和还是 1和牌，2点炮 3 自摸 4 别人自摸,5 别人无听，6，自己无听，7，别人花猪，8，自己花猪
       * </pre>
       */
      int getType();

      // required uint32 seat = 2;
      /**
       * <code>required uint32 seat = 2;</code>
       *
       * <pre>
       *如果是和牌，这是点炮者座位号，如果是点炮，这是和牌者座位号
       * </pre>
       */
      boolean hasSeat();
      /**
       * <code>required uint32 seat = 2;</code>
       *
       * <pre>
       *如果是和牌，这是点炮者座位号，如果是点炮，这是和牌者座位号
       * </pre>
       */
      int getSeat();

      // required uint32 points = 3;
      /**
       * <code>required uint32 points = 3;</code>
       *
       * <pre>
       *番数
       * </pre>
       */
      boolean hasPoints();
      /**
       * <code>required uint32 points = 3;</code>
       *
       * <pre>
       *番数
       * </pre>
       */
      int getPoints();

      // optional uint32 tile = 4;
      /**
       * <code>optional uint32 tile = 4;</code>
       *
       * <pre>
       *点炮的牌
       * </pre>
       */
      boolean hasTile();
      /**
       * <code>optional uint32 tile = 4;</code>
       *
       * <pre>
       *点炮的牌
       * </pre>
       */
      int getTile();
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail}
     */
    public static final class Detail extends
        com.google.protobuf.GeneratedMessage
        implements DetailOrBuilder {
      // Use Detail.newBuilder() to construct.
      private Detail(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Detail(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Detail defaultInstance;
      public static Detail getDefaultInstance() {
        return defaultInstance;
      }

      public Detail getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Detail(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                type_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                seat_ = input.readUInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                points_ = input.readUInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                tile_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Detail_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Detail_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.Builder.class);
      }

      public static com.google.protobuf.Parser<Detail> PARSER =
          new com.google.protobuf.AbstractParser<Detail>() {
        public Detail parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Detail(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Detail> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required uint32 type = 1;
      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_;
      /**
       * <code>required uint32 type = 1;</code>
       *
       * <pre>
       *是和还是 1和牌，2点炮 3 自摸 4 别人自摸,5 别人无听，6，自己无听，7，别人花猪，8，自己花猪
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 type = 1;</code>
       *
       * <pre>
       *是和还是 1和牌，2点炮 3 自摸 4 别人自摸,5 别人无听，6，自己无听，7，别人花猪，8，自己花猪
       * </pre>
       */
      public int getType() {
        return type_;
      }

      // required uint32 seat = 2;
      public static final int SEAT_FIELD_NUMBER = 2;
      private int seat_;
      /**
       * <code>required uint32 seat = 2;</code>
       *
       * <pre>
       *如果是和牌，这是点炮者座位号，如果是点炮，这是和牌者座位号
       * </pre>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 seat = 2;</code>
       *
       * <pre>
       *如果是和牌，这是点炮者座位号，如果是点炮，这是和牌者座位号
       * </pre>
       */
      public int getSeat() {
        return seat_;
      }

      // required uint32 points = 3;
      public static final int POINTS_FIELD_NUMBER = 3;
      private int points_;
      /**
       * <code>required uint32 points = 3;</code>
       *
       * <pre>
       *番数
       * </pre>
       */
      public boolean hasPoints() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 points = 3;</code>
       *
       * <pre>
       *番数
       * </pre>
       */
      public int getPoints() {
        return points_;
      }

      // optional uint32 tile = 4;
      public static final int TILE_FIELD_NUMBER = 4;
      private int tile_;
      /**
       * <code>optional uint32 tile = 4;</code>
       *
       * <pre>
       *点炮的牌
       * </pre>
       */
      public boolean hasTile() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 tile = 4;</code>
       *
       * <pre>
       *点炮的牌
       * </pre>
       */
      public int getTile() {
        return tile_;
      }

      private void initFields() {
        type_ = 0;
        seat_ = 0;
        points_ = 0;
        tile_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasType()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasSeat()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasPoints()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, type_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, seat_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(3, points_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeUInt32(4, tile_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, type_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, seat_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, points_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(4, tile_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.DetailOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Detail_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Detail_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.Builder.class);
        }

        // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          type_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          seat_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          points_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          tile_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Detail_descriptor;
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail getDefaultInstanceForType() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.getDefaultInstance();
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail build() {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail buildPartial() {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.type_ = type_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.seat_ = seat_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.points_ = points_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.tile_ = tile_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail) {
            return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail other) {
          if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.getDefaultInstance()) return this;
          if (other.hasType()) {
            setType(other.getType());
          }
          if (other.hasSeat()) {
            setSeat(other.getSeat());
          }
          if (other.hasPoints()) {
            setPoints(other.getPoints());
          }
          if (other.hasTile()) {
            setTile(other.getTile());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasType()) {
            
            return false;
          }
          if (!hasSeat()) {
            
            return false;
          }
          if (!hasPoints()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required uint32 type = 1;
        private int type_ ;
        /**
         * <code>required uint32 type = 1;</code>
         *
         * <pre>
         *是和还是 1和牌，2点炮 3 自摸 4 别人自摸,5 别人无听，6，自己无听，7，别人花猪，8，自己花猪
         * </pre>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 type = 1;</code>
         *
         * <pre>
         *是和还是 1和牌，2点炮 3 自摸 4 别人自摸,5 别人无听，6，自己无听，7，别人花猪，8，自己花猪
         * </pre>
         */
        public int getType() {
          return type_;
        }
        /**
         * <code>required uint32 type = 1;</code>
         *
         * <pre>
         *是和还是 1和牌，2点炮 3 自摸 4 别人自摸,5 别人无听，6，自己无听，7，别人花猪，8，自己花猪
         * </pre>
         */
        public Builder setType(int value) {
          bitField0_ |= 0x00000001;
          type_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 type = 1;</code>
         *
         * <pre>
         *是和还是 1和牌，2点炮 3 自摸 4 别人自摸,5 别人无听，6，自己无听，7，别人花猪，8，自己花猪
         * </pre>
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          type_ = 0;
          onChanged();
          return this;
        }

        // required uint32 seat = 2;
        private int seat_ ;
        /**
         * <code>required uint32 seat = 2;</code>
         *
         * <pre>
         *如果是和牌，这是点炮者座位号，如果是点炮，这是和牌者座位号
         * </pre>
         */
        public boolean hasSeat() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required uint32 seat = 2;</code>
         *
         * <pre>
         *如果是和牌，这是点炮者座位号，如果是点炮，这是和牌者座位号
         * </pre>
         */
        public int getSeat() {
          return seat_;
        }
        /**
         * <code>required uint32 seat = 2;</code>
         *
         * <pre>
         *如果是和牌，这是点炮者座位号，如果是点炮，这是和牌者座位号
         * </pre>
         */
        public Builder setSeat(int value) {
          bitField0_ |= 0x00000002;
          seat_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 seat = 2;</code>
         *
         * <pre>
         *如果是和牌，这是点炮者座位号，如果是点炮，这是和牌者座位号
         * </pre>
         */
        public Builder clearSeat() {
          bitField0_ = (bitField0_ & ~0x00000002);
          seat_ = 0;
          onChanged();
          return this;
        }

        // required uint32 points = 3;
        private int points_ ;
        /**
         * <code>required uint32 points = 3;</code>
         *
         * <pre>
         *番数
         * </pre>
         */
        public boolean hasPoints() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required uint32 points = 3;</code>
         *
         * <pre>
         *番数
         * </pre>
         */
        public int getPoints() {
          return points_;
        }
        /**
         * <code>required uint32 points = 3;</code>
         *
         * <pre>
         *番数
         * </pre>
         */
        public Builder setPoints(int value) {
          bitField0_ |= 0x00000004;
          points_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 points = 3;</code>
         *
         * <pre>
         *番数
         * </pre>
         */
        public Builder clearPoints() {
          bitField0_ = (bitField0_ & ~0x00000004);
          points_ = 0;
          onChanged();
          return this;
        }

        // optional uint32 tile = 4;
        private int tile_ ;
        /**
         * <code>optional uint32 tile = 4;</code>
         *
         * <pre>
         *点炮的牌
         * </pre>
         */
        public boolean hasTile() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional uint32 tile = 4;</code>
         *
         * <pre>
         *点炮的牌
         * </pre>
         */
        public int getTile() {
          return tile_;
        }
        /**
         * <code>optional uint32 tile = 4;</code>
         *
         * <pre>
         *点炮的牌
         * </pre>
         */
        public Builder setTile(int value) {
          bitField0_ |= 0x00000008;
          tile_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 tile = 4;</code>
         *
         * <pre>
         *点炮的牌
         * </pre>
         */
        public Builder clearTile() {
          bitField0_ = (bitField0_ & ~0x00000008);
          tile_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail)
      }

      static {
        defaultInstance = new Detail(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail)
    }

    public interface ResultOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required uint32 seat = 1;
      /**
       * <code>required uint32 seat = 1;</code>
       */
      boolean hasSeat();
      /**
       * <code>required uint32 seat = 1;</code>
       */
      int getSeat();

      // required sint32 winPoints = 2;
      /**
       * <code>required sint32 winPoints = 2;</code>
       *
       * <pre>
       *总输赢番数
       * </pre>
       */
      boolean hasWinPoints();
      /**
       * <code>required sint32 winPoints = 2;</code>
       *
       * <pre>
       *总输赢番数
       * </pre>
       */
      int getWinPoints();
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result}
     */
    public static final class Result extends
        com.google.protobuf.GeneratedMessage
        implements ResultOrBuilder {
      // Use Result.newBuilder() to construct.
      private Result(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Result(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Result defaultInstance;
      public static Result getDefaultInstance() {
        return defaultInstance;
      }

      public Result getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Result(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                seat_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                winPoints_ = input.readSInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Result_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Result_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.Builder.class);
      }

      public static com.google.protobuf.Parser<Result> PARSER =
          new com.google.protobuf.AbstractParser<Result>() {
        public Result parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Result(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Result> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required uint32 seat = 1;
      public static final int SEAT_FIELD_NUMBER = 1;
      private int seat_;
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public int getSeat() {
        return seat_;
      }

      // required sint32 winPoints = 2;
      public static final int WINPOINTS_FIELD_NUMBER = 2;
      private int winPoints_;
      /**
       * <code>required sint32 winPoints = 2;</code>
       *
       * <pre>
       *总输赢番数
       * </pre>
       */
      public boolean hasWinPoints() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 winPoints = 2;</code>
       *
       * <pre>
       *总输赢番数
       * </pre>
       */
      public int getWinPoints() {
        return winPoints_;
      }

      private void initFields() {
        seat_ = 0;
        winPoints_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasSeat()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasWinPoints()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, seat_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeSInt32(2, winPoints_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, seat_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeSInt32Size(2, winPoints_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.ResultOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Result_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Result_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.Builder.class);
        }

        // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          seat_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          winPoints_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Result_descriptor;
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result getDefaultInstanceForType() {
          return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.getDefaultInstance();
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result build() {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result buildPartial() {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.seat_ = seat_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.winPoints_ = winPoints_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result) {
            return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result other) {
          if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.getDefaultInstance()) return this;
          if (other.hasSeat()) {
            setSeat(other.getSeat());
          }
          if (other.hasWinPoints()) {
            setWinPoints(other.getWinPoints());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasSeat()) {
            
            return false;
          }
          if (!hasWinPoints()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required uint32 seat = 1;
        private int seat_ ;
        /**
         * <code>required uint32 seat = 1;</code>
         */
        public boolean hasSeat() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 seat = 1;</code>
         */
        public int getSeat() {
          return seat_;
        }
        /**
         * <code>required uint32 seat = 1;</code>
         */
        public Builder setSeat(int value) {
          bitField0_ |= 0x00000001;
          seat_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 seat = 1;</code>
         */
        public Builder clearSeat() {
          bitField0_ = (bitField0_ & ~0x00000001);
          seat_ = 0;
          onChanged();
          return this;
        }

        // required sint32 winPoints = 2;
        private int winPoints_ ;
        /**
         * <code>required sint32 winPoints = 2;</code>
         *
         * <pre>
         *总输赢番数
         * </pre>
         */
        public boolean hasWinPoints() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required sint32 winPoints = 2;</code>
         *
         * <pre>
         *总输赢番数
         * </pre>
         */
        public int getWinPoints() {
          return winPoints_;
        }
        /**
         * <code>required sint32 winPoints = 2;</code>
         *
         * <pre>
         *总输赢番数
         * </pre>
         */
        public Builder setWinPoints(int value) {
          bitField0_ |= 0x00000002;
          winPoints_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required sint32 winPoints = 2;</code>
         *
         * <pre>
         *总输赢番数
         * </pre>
         */
        public Builder clearWinPoints() {
          bitField0_ = (bitField0_ & ~0x00000002);
          winPoints_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result)
      }

      static {
        defaultInstance = new Result(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result)
    }

    private int bitField0_;
    // repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;
    public static final int RESULTS_FIELD_NUMBER = 2;
    private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result> results_;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
     */
    public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result> getResultsList() {
      return results_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
     */
    public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.ResultOrBuilder> 
        getResultsOrBuilderList() {
      return results_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
     */
    public int getResultsCount() {
      return results_.size();
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result getResults(int index) {
      return results_.get(index);
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.ResultOrBuilder getResultsOrBuilder(
        int index) {
      return results_.get(index);
    }

    // required uint32 maxWait = 3;
    public static final int MAXWAIT_FIELD_NUMBER = 3;
    private int maxWait_;
    /**
     * <code>required uint32 maxWait = 3;</code>
     *
     * <pre>
     *最长等待时间，自动配桌散桌，这个值是0
     * </pre>
     */
    public boolean hasMaxWait() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 maxWait = 3;</code>
     *
     * <pre>
     *最长等待时间，自动配桌散桌，这个值是0
     * </pre>
     */
    public int getMaxWait() {
      return maxWait_;
    }

    // repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;
    public static final int DETAILS_FIELD_NUMBER = 4;
    private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail> details_;
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
     *
     * <pre>
     *输赢明细
     * </pre>
     */
    public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail> getDetailsList() {
      return details_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
     *
     * <pre>
     *输赢明细
     * </pre>
     */
    public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.DetailOrBuilder> 
        getDetailsOrBuilderList() {
      return details_;
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
     *
     * <pre>
     *输赢明细
     * </pre>
     */
    public int getDetailsCount() {
      return details_.size();
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
     *
     * <pre>
     *输赢明细
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail getDetails(int index) {
      return details_.get(index);
    }
    /**
     * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
     *
     * <pre>
     *输赢明细
     * </pre>
     */
    public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.DetailOrBuilder getDetailsOrBuilder(
        int index) {
      return details_.get(index);
    }

    private void initFields() {
      results_ = java.util.Collections.emptyList();
      maxWait_ = 0;
      details_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasMaxWait()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getResultsCount(); i++) {
        if (!getResults(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getDetailsCount(); i++) {
        if (!getDetails(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < results_.size(); i++) {
        output.writeMessage(2, results_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(3, maxWait_);
      }
      for (int i = 0; i < details_.size(); i++) {
        output.writeMessage(4, details_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < results_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, results_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, maxWait_);
      }
      for (int i = 0; i < details_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, details_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfGameResult}
     *
     * <pre>
     *========================================================================================
     * 游戏结果
     * #define OGID_GAME_RESULT						( OGID_GAME_MESSAGE + 31 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getResultsFieldBuilder();
          getDetailsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (resultsBuilder_ == null) {
          results_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          resultsBuilder_.clear();
        }
        maxWait_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (detailsBuilder_ == null) {
          details_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          detailsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (resultsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            results_ = java.util.Collections.unmodifiableList(results_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.results_ = results_;
        } else {
          result.results_ = resultsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.maxWait_ = maxWait_;
        if (detailsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            details_ = java.util.Collections.unmodifiableList(details_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.details_ = details_;
        } else {
          result.details_ = detailsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.getDefaultInstance()) return this;
        if (resultsBuilder_ == null) {
          if (!other.results_.isEmpty()) {
            if (results_.isEmpty()) {
              results_ = other.results_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureResultsIsMutable();
              results_.addAll(other.results_);
            }
            onChanged();
          }
        } else {
          if (!other.results_.isEmpty()) {
            if (resultsBuilder_.isEmpty()) {
              resultsBuilder_.dispose();
              resultsBuilder_ = null;
              results_ = other.results_;
              bitField0_ = (bitField0_ & ~0x00000001);
              resultsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getResultsFieldBuilder() : null;
            } else {
              resultsBuilder_.addAllMessages(other.results_);
            }
          }
        }
        if (other.hasMaxWait()) {
          setMaxWait(other.getMaxWait());
        }
        if (detailsBuilder_ == null) {
          if (!other.details_.isEmpty()) {
            if (details_.isEmpty()) {
              details_ = other.details_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureDetailsIsMutable();
              details_.addAll(other.details_);
            }
            onChanged();
          }
        } else {
          if (!other.details_.isEmpty()) {
            if (detailsBuilder_.isEmpty()) {
              detailsBuilder_.dispose();
              detailsBuilder_ = null;
              details_ = other.details_;
              bitField0_ = (bitField0_ & ~0x00000004);
              detailsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDetailsFieldBuilder() : null;
            } else {
              detailsBuilder_.addAllMessages(other.details_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMaxWait()) {
          
          return false;
        }
        for (int i = 0; i < getResultsCount(); i++) {
          if (!getResults(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getDetailsCount(); i++) {
          if (!getDetails(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;
      private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result> results_ =
        java.util.Collections.emptyList();
      private void ensureResultsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          results_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result>(results_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.ResultOrBuilder> resultsBuilder_;

      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result> getResultsList() {
        if (resultsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(results_);
        } else {
          return resultsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public int getResultsCount() {
        if (resultsBuilder_ == null) {
          return results_.size();
        } else {
          return resultsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result getResults(int index) {
        if (resultsBuilder_ == null) {
          return results_.get(index);
        } else {
          return resultsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public Builder setResults(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result value) {
        if (resultsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResultsIsMutable();
          results_.set(index, value);
          onChanged();
        } else {
          resultsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public Builder setResults(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.Builder builderForValue) {
        if (resultsBuilder_ == null) {
          ensureResultsIsMutable();
          results_.set(index, builderForValue.build());
          onChanged();
        } else {
          resultsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public Builder addResults(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result value) {
        if (resultsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResultsIsMutable();
          results_.add(value);
          onChanged();
        } else {
          resultsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public Builder addResults(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result value) {
        if (resultsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResultsIsMutable();
          results_.add(index, value);
          onChanged();
        } else {
          resultsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public Builder addResults(
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.Builder builderForValue) {
        if (resultsBuilder_ == null) {
          ensureResultsIsMutable();
          results_.add(builderForValue.build());
          onChanged();
        } else {
          resultsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public Builder addResults(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.Builder builderForValue) {
        if (resultsBuilder_ == null) {
          ensureResultsIsMutable();
          results_.add(index, builderForValue.build());
          onChanged();
        } else {
          resultsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public Builder addAllResults(
          java.lang.Iterable<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result> values) {
        if (resultsBuilder_ == null) {
          ensureResultsIsMutable();
          super.addAll(values, results_);
          onChanged();
        } else {
          resultsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public Builder clearResults() {
        if (resultsBuilder_ == null) {
          results_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          resultsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public Builder removeResults(int index) {
        if (resultsBuilder_ == null) {
          ensureResultsIsMutable();
          results_.remove(index);
          onChanged();
        } else {
          resultsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.Builder getResultsBuilder(
          int index) {
        return getResultsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.ResultOrBuilder getResultsOrBuilder(
          int index) {
        if (resultsBuilder_ == null) {
          return results_.get(index);  } else {
          return resultsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.ResultOrBuilder> 
           getResultsOrBuilderList() {
        if (resultsBuilder_ != null) {
          return resultsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(results_);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.Builder addResultsBuilder() {
        return getResultsFieldBuilder().addBuilder(
            com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.Builder addResultsBuilder(
          int index) {
        return getResultsFieldBuilder().addBuilder(
            index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Result results = 2;</code>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.Builder> 
           getResultsBuilderList() {
        return getResultsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.ResultOrBuilder> 
          getResultsFieldBuilder() {
        if (resultsBuilder_ == null) {
          resultsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Result.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.ResultOrBuilder>(
                  results_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          results_ = null;
        }
        return resultsBuilder_;
      }

      // required uint32 maxWait = 3;
      private int maxWait_ ;
      /**
       * <code>required uint32 maxWait = 3;</code>
       *
       * <pre>
       *最长等待时间，自动配桌散桌，这个值是0
       * </pre>
       */
      public boolean hasMaxWait() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 maxWait = 3;</code>
       *
       * <pre>
       *最长等待时间，自动配桌散桌，这个值是0
       * </pre>
       */
      public int getMaxWait() {
        return maxWait_;
      }
      /**
       * <code>required uint32 maxWait = 3;</code>
       *
       * <pre>
       *最长等待时间，自动配桌散桌，这个值是0
       * </pre>
       */
      public Builder setMaxWait(int value) {
        bitField0_ |= 0x00000002;
        maxWait_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 maxWait = 3;</code>
       *
       * <pre>
       *最长等待时间，自动配桌散桌，这个值是0
       * </pre>
       */
      public Builder clearMaxWait() {
        bitField0_ = (bitField0_ & ~0x00000002);
        maxWait_ = 0;
        onChanged();
        return this;
      }

      // repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;
      private java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail> details_ =
        java.util.Collections.emptyList();
      private void ensureDetailsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          details_ = new java.util.ArrayList<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail>(details_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.DetailOrBuilder> detailsBuilder_;

      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail> getDetailsList() {
        if (detailsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(details_);
        } else {
          return detailsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public int getDetailsCount() {
        if (detailsBuilder_ == null) {
          return details_.size();
        } else {
          return detailsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail getDetails(int index) {
        if (detailsBuilder_ == null) {
          return details_.get(index);
        } else {
          return detailsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public Builder setDetails(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail value) {
        if (detailsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailsIsMutable();
          details_.set(index, value);
          onChanged();
        } else {
          detailsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public Builder setDetails(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.Builder builderForValue) {
        if (detailsBuilder_ == null) {
          ensureDetailsIsMutable();
          details_.set(index, builderForValue.build());
          onChanged();
        } else {
          detailsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public Builder addDetails(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail value) {
        if (detailsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailsIsMutable();
          details_.add(value);
          onChanged();
        } else {
          detailsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public Builder addDetails(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail value) {
        if (detailsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDetailsIsMutable();
          details_.add(index, value);
          onChanged();
        } else {
          detailsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public Builder addDetails(
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.Builder builderForValue) {
        if (detailsBuilder_ == null) {
          ensureDetailsIsMutable();
          details_.add(builderForValue.build());
          onChanged();
        } else {
          detailsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public Builder addDetails(
          int index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.Builder builderForValue) {
        if (detailsBuilder_ == null) {
          ensureDetailsIsMutable();
          details_.add(index, builderForValue.build());
          onChanged();
        } else {
          detailsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public Builder addAllDetails(
          java.lang.Iterable<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail> values) {
        if (detailsBuilder_ == null) {
          ensureDetailsIsMutable();
          super.addAll(values, details_);
          onChanged();
        } else {
          detailsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public Builder clearDetails() {
        if (detailsBuilder_ == null) {
          details_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          detailsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public Builder removeDetails(int index) {
        if (detailsBuilder_ == null) {
          ensureDetailsIsMutable();
          details_.remove(index);
          onChanged();
        } else {
          detailsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.Builder getDetailsBuilder(
          int index) {
        return getDetailsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.DetailOrBuilder getDetailsOrBuilder(
          int index) {
        if (detailsBuilder_ == null) {
          return details_.get(index);  } else {
          return detailsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public java.util.List<? extends com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.DetailOrBuilder> 
           getDetailsOrBuilderList() {
        if (detailsBuilder_ != null) {
          return detailsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(details_);
        }
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.Builder addDetailsBuilder() {
        return getDetailsFieldBuilder().addBuilder(
            com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.Builder addDetailsBuilder(
          int index) {
        return getDetailsFieldBuilder().addBuilder(
            index, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.getDefaultInstance());
      }
      /**
       * <code>repeated .com.ourgame.mahjong.bloodriver.message.NtfGameResult.Detail details = 4;</code>
       *
       * <pre>
       *输赢明细
       * </pre>
       */
      public java.util.List<com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.Builder> 
           getDetailsBuilderList() {
        return getDetailsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.DetailOrBuilder> 
          getDetailsFieldBuilder() {
        if (detailsBuilder_ == null) {
          detailsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.Detail.Builder, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfGameResult.DetailOrBuilder>(
                  details_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          details_ = null;
        }
        return detailsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfGameResult)
    }

    static {
      defaultInstance = new NtfGameResult(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfGameResult)
  }

  public interface CREQAbsentColorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 color = 1;
    /**
     * <code>required uint32 color = 1;</code>
     */
    boolean hasColor();
    /**
     * <code>required uint32 color = 1;</code>
     */
    int getColor();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.CREQAbsentColor}
   *
   * <pre>
   *========================================================================================
   * 定缺
   * #define OGID_ABSENT_COLOR					( OGID_GAME_MESSAGE + 33 )
   * </pre>
   */
  public static final class CREQAbsentColor extends
      com.google.protobuf.GeneratedMessage
      implements CREQAbsentColorOrBuilder {
    // Use CREQAbsentColor.newBuilder() to construct.
    private CREQAbsentColor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CREQAbsentColor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CREQAbsentColor defaultInstance;
    public static CREQAbsentColor getDefaultInstance() {
      return defaultInstance;
    }

    public CREQAbsentColor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CREQAbsentColor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              color_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CREQAbsentColor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CREQAbsentColor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor.Builder.class);
    }

    public static com.google.protobuf.Parser<CREQAbsentColor> PARSER =
        new com.google.protobuf.AbstractParser<CREQAbsentColor>() {
      public CREQAbsentColor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CREQAbsentColor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CREQAbsentColor> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 color = 1;
    public static final int COLOR_FIELD_NUMBER = 1;
    private int color_;
    /**
     * <code>required uint32 color = 1;</code>
     */
    public boolean hasColor() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 color = 1;</code>
     */
    public int getColor() {
      return color_;
    }

    private void initFields() {
      color_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasColor()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, color_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, color_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.CREQAbsentColor}
     *
     * <pre>
     *========================================================================================
     * 定缺
     * #define OGID_ABSENT_COLOR					( OGID_GAME_MESSAGE + 33 )
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CREQAbsentColor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CREQAbsentColor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        color_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_CREQAbsentColor_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.color_ = color_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor.getDefaultInstance()) return this;
        if (other.hasColor()) {
          setColor(other.getColor());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasColor()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.CREQAbsentColor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 color = 1;
      private int color_ ;
      /**
       * <code>required uint32 color = 1;</code>
       */
      public boolean hasColor() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 color = 1;</code>
       */
      public int getColor() {
        return color_;
      }
      /**
       * <code>required uint32 color = 1;</code>
       */
      public Builder setColor(int value) {
        bitField0_ |= 0x00000001;
        color_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 color = 1;</code>
       */
      public Builder clearColor() {
        bitField0_ = (bitField0_ & ~0x00000001);
        color_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.CREQAbsentColor)
    }

    static {
      defaultInstance = new CREQAbsentColor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.CREQAbsentColor)
  }

  public interface NtfAbsentColorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 seat = 1;
    /**
     * <code>required uint32 seat = 1;</code>
     */
    boolean hasSeat();
    /**
     * <code>required uint32 seat = 1;</code>
     */
    int getSeat();

    // required uint32 color = 2;
    /**
     * <code>required uint32 color = 2;</code>
     */
    boolean hasColor();
    /**
     * <code>required uint32 color = 2;</code>
     */
    int getColor();
  }
  /**
   * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfAbsentColor}
   */
  public static final class NtfAbsentColor extends
      com.google.protobuf.GeneratedMessage
      implements NtfAbsentColorOrBuilder {
    // Use NtfAbsentColor.newBuilder() to construct.
    private NtfAbsentColor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NtfAbsentColor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NtfAbsentColor defaultInstance;
    public static NtfAbsentColor getDefaultInstance() {
      return defaultInstance;
    }

    public NtfAbsentColor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NtfAbsentColor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seat_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              color_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfAbsentColor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfAbsentColor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor.Builder.class);
    }

    public static com.google.protobuf.Parser<NtfAbsentColor> PARSER =
        new com.google.protobuf.AbstractParser<NtfAbsentColor>() {
      public NtfAbsentColor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NtfAbsentColor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NtfAbsentColor> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private int seat_;
    /**
     * <code>required uint32 seat = 1;</code>
     */
    public boolean hasSeat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 seat = 1;</code>
     */
    public int getSeat() {
      return seat_;
    }

    // required uint32 color = 2;
    public static final int COLOR_FIELD_NUMBER = 2;
    private int color_;
    /**
     * <code>required uint32 color = 2;</code>
     */
    public boolean hasColor() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 color = 2;</code>
     */
    public int getColor() {
      return color_;
    }

    private void initFields() {
      seat_ = 0;
      color_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasColor()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, color_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, seat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, color_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.ourgame.mahjong.bloodriver.message.NtfAbsentColor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfAbsentColor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfAbsentColor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor.class, com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor.Builder.class);
      }

      // Construct using com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        color_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.internal_static_com_ourgame_mahjong_bloodriver_message_NtfAbsentColor_descriptor;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor getDefaultInstanceForType() {
        return com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor.getDefaultInstance();
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor build() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor buildPartial() {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor result = new com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seat_ = seat_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.color_ = color_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor) {
          return mergeFrom((com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor other) {
        if (other == com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasColor()) {
          setColor(other.getColor());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSeat()) {
          
          return false;
        }
        if (!hasColor()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourgame.mahjong.bloodriver.message.MJBloodRiverMessage.NtfAbsentColor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 seat = 1;
      private int seat_ ;
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public int getSeat() {
        return seat_;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public Builder setSeat(int value) {
        bitField0_ |= 0x00000001;
        seat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 seat = 1;</code>
       */
      public Builder clearSeat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seat_ = 0;
        onChanged();
        return this;
      }

      // required uint32 color = 2;
      private int color_ ;
      /**
       * <code>required uint32 color = 2;</code>
       */
      public boolean hasColor() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 color = 2;</code>
       */
      public int getColor() {
        return color_;
      }
      /**
       * <code>required uint32 color = 2;</code>
       */
      public Builder setColor(int value) {
        bitField0_ |= 0x00000002;
        color_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 color = 2;</code>
       */
      public Builder clearColor() {
        bitField0_ = (bitField0_ & ~0x00000002);
        color_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.ourgame.mahjong.bloodriver.message.NtfAbsentColor)
    }

    static {
      defaultInstance = new NtfAbsentColor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.ourgame.mahjong.bloodriver.message.NtfAbsentColor)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_Meld_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_Meld_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_Set_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_Set_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_Player_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_Player_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_CurrentTileInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_CurrentTileInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_CReqEnterGame_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_CReqEnterGame_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_SAckEnterGame_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_SAckEnterGame_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfStartGame_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfStartGame_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfResumeGame_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfResumeGame_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfCastDice_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfCastDice_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_TileAmount_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_TileAmount_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_CReqSwap_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_CReqSwap_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NTFSwapPrepared_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NTFSwapPrepared_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_SAckSwap_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_SAckSwap_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfDiscard_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfDiscard_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfDraw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfDraw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_CReqAct_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_CReqAct_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfAct_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfAct_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_WinInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_WinInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameStatus_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameStatus_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_CReqUserTrust_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_CReqUserTrust_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfUserTrust_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfUserTrust_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalStatus_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalStatus_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalWinInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalWinInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Detail_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Detail_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Result_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Result_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_CREQAbsentColor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_CREQAbsentColor_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_ourgame_mahjong_bloodriver_message_NtfAbsentColor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_ourgame_mahjong_bloodriver_message_NtfAbsentColor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031MJBloodRiverMessage.proto\022&com.ourgame" +
      ".mahjong.bloodriver.message\"N\n\004Meld\022\020\n\010m" +
      "eldType\030\001 \002(\r\022\020\n\010provider\030\002 \002(\r\022\020\n\010lastT" +
      "ile\030\003 \002(\r\022\020\n\010rootTile\030\004 \003(\r\"\225\001\n\003Set\022\014\n\004s" +
      "eat\030\001 \002(\r\022\017\n\007winType\030\002 \002(\r\022;\n\005melds\030\003 \003(" +
      "\0132,.com.ourgame.mahjong.bloodriver.messa" +
      "ge.Meld\022\020\n\010winUnits\030\004 \002(\r\022\020\n\010fanTypes\030\005 " +
      "\003(\r\022\016\n\006params\030\006 \001(\r\"?\n\006Player\022\n\n\002id\030\001 \002(" +
      "\004\022\014\n\004name\030\002 \002(\t\022\r\n\005score\030\003 \002(\r\022\014\n\004seat\030\004" +
      " \001(\r\"\306\001\n\017CurrentTileInfo\022\014\n\004seat\030\001 \002(\r\022\024",
      "\n\014inhandAmount\030\002 \002(\r\022?\n\tshowTiles\030\003 \003(\0132" +
      ",.com.ourgame.mahjong.bloodriver.message" +
      ".Meld\022\026\n\016discardedTiles\030\004 \003(\r\022\023\n\013inhandT" +
      "iles\030\005 \003(\r\022\020\n\010lastTile\030\006 \001(\r\022\017\n\007flowers\030" +
      "\007 \001(\r\"\037\n\rCReqEnterGame\022\016\n\006gameId\030\001 \002(\004\"C" +
      "\n\rSAckEnterGame\022\016\n\006gameId\030\001 \002(\004\022\016\n\006resul" +
      "t\030\002 \002(\r\022\022\n\nfailReason\030\003 \001(\t\"\303\001\n\014NtfStart" +
      "Game\022\016\n\006gameId\030\001 \002(\004\022\020\n\010gameType\030\002 \002(\r\022?" +
      "\n\007players\030\003 \003(\0132..com.ourgame.mahjong.bl" +
      "oodriver.message.Player\022\016\n\006dealer\030\004 \002(\r\022",
      "\022\n\nbasicScore\030\005 \002(\r\022\r\n\005stage\030\006 \002(\r\022\r\n\005ro" +
      "und\030\007 \002(\r\022\016\n\006serial\030\010 \002(\r\"a\n\rNtfResumeGa" +
      "me\022\016\n\006dealer\030\001 \002(\r\022\022\n\nbasicScore\030\002 \002(\r\022\r" +
      "\n\005stage\030\003 \002(\r\022\r\n\005round\030\004 \002(\r\022\016\n\006serial\030\005" +
      " \002(\r\"9\n\013NtfCastDice\022\014\n\004seat\030\001 \002(\r\022\014\n\004typ" +
      "e\030\002 \002(\r\022\016\n\006points\030\003 \003(\r\"\317\001\n\010NtfDeals\022\021\n\t" +
      "startSeat\030\001 \002(\r\022\023\n\013startFrusta\030\002 \002(\r\022\r\n\005" +
      "tiles\030\003 \003(\r\022K\n\006amouts\030\004 \003(\0132;.com.ourgam" +
      "e.mahjong.bloodriver.message.NtfDeals.Ti" +
      "leAmount\022\023\n\013waitingTime\030\005 \002(\r\032*\n\nTileAmo",
      "unt\022\014\n\004seat\030\001 \002(\r\022\016\n\006amount\030\002 \002(\r\"\031\n\010CRe" +
      "qSwap\022\r\n\005tiles\030\001 \003(\r\".\n\017NTFSwapPrepared\022" +
      "\014\n\004seat\030\001 \002(\r\022\r\n\005tiles\030\002 \003(\r\"O\n\010SAckSwap" +
      "\022\020\n\010oldTiles\030\001 \003(\r\022\020\n\010newTiles\030\002 \003(\r\022\016\n\006" +
      "action\030\003 \001(\r\022\017\n\007actTime\030\004 \001(\r\"I\n\nNtfDisc" +
      "ard\022\014\n\004tile\030\001 \002(\r\022\014\n\004seat\030\002 \002(\r\022\016\n\006actio" +
      "n\030\003 \001(\r\022\017\n\007actTime\030\004 \001(\r\"]\n\007NtfDraw\022\014\n\004s" +
      "eat\030\001 \002(\r\022\023\n\005front\030\002 \002(\010:\004true\022\016\n\006tileId" +
      "\030\003 \001(\r\022\016\n\006action\030\004 \001(\r\022\017\n\007actTime\030\005 \001(\r\"" +
      "\221\001\n\007CReqAct\022\014\n\004seat\030\001 \002(\r\022?\n\003act\030\002 \002(\01622",
      ".com.ourgame.mahjong.bloodriver.message." +
      "ActionType\022\020\n\010provider\030\003 \001(\r\022\022\n\ntargetTi" +
      "le\030\004 \001(\r\022\021\n\trootTiles\030\005 \003(\r\"\261\001\n\006NtfAct\022\014" +
      "\n\004seat\030\001 \002(\r\022?\n\003act\030\002 \002(\01622.com.ourgame." +
      "mahjong.bloodriver.message.ActionType\022\020\n" +
      "\010provider\030\003 \001(\r\022\022\n\ntargetTile\030\004 \001(\r\022\021\n\tr" +
      "ootTiles\030\005 \003(\r\022\016\n\006action\030\006 \001(\r\022\017\n\007actTim" +
      "e\030\007 \001(\r\"\263\001\n\006NtfWin\022\017\n\007winType\030\001 \002(\r\022\017\n\007w" +
      "inTile\030\002 \002(\r\022H\n\010winInfos\030\003 \003(\01326.com.our" +
      "game.mahjong.bloodriver.message.NtfWin.W",
      "inInfo\032=\n\007WinInfo\022\022\n\nwinnerSeat\030\001 \002(\r\022\021\n" +
      "\tloserSeat\030\002 \002(\r\022\013\n\003fan\030\003 \002(\r\"\347\002\n\rNtfGam" +
      "eStatus\022\016\n\006gameId\030\001 \002(\004\022\020\n\010gameType\030\002 \002(" +
      "\r\022?\n\007players\030\003 \003(\0132..com.ourgame.mahjong" +
      ".bloodriver.message.Player\022\016\n\006dealer\030\004 \002" +
      "(\r\022\022\n\nbasicScore\030\005 \002(\r\022\r\n\005stage\030\006 \002(\r\022\r\n" +
      "\005round\030\007 \002(\r\022\016\n\006serial\030\010 \002(\r\022\021\n\tstartSea" +
      "t\030\t \002(\r\022\023\n\013startFrusta\030\n \002(\r\022\026\n\016frontDre" +
      "wTiles\030\013 \002(\r\022\025\n\rbackDrewTiles\030\014 \002(\r\022J\n\tt" +
      "ileInfos\030\r \003(\01327.com.ourgame.mahjong.blo",
      "odriver.message.CurrentTileInfo\".\n\rCReqU" +
      "serTrust\022\016\n\006gameId\030\001 \002(\004\022\r\n\005trust\030\002 \002(\005\"" +
      ";\n\014NtfUserTrust\022\016\n\006gameId\030\001 \002(\004\022\014\n\004seat\030" +
      "\002 \002(\005\022\r\n\005trust\030\003 \002(\005\"\277\002\n\013NtfGameOver\022\016\n\006" +
      "gameId\030\001 \002(\004\022T\n\013finalStatus\030\002 \003(\0132?.com." +
      "ourgame.mahjong.bloodriver.message.NtfGa" +
      "meOver.FinalStatus\022W\n\rfinalWinInfos\030\003 \003(" +
      "\0132@.com.ourgame.mahjong.bloodriver.messa" +
      "ge.NtfGameOver.FinalWinInfo\032C\n\013FinalStat" +
      "us\022\014\n\004seat\030\001 \002(\r\022\023\n\013tilesInHand\030\002 \003(\r\022\021\n",
      "\006status\030\003 \002(\r:\0010\032,\n\014FinalWinInfo\022\014\n\004seat" +
      "\030\001 \002(\r\022\016\n\006points\030\002 \002(\021\"\255\002\n\rNtfGameResult" +
      "\022M\n\007results\030\002 \003(\0132<.com.ourgame.mahjong." +
      "bloodriver.message.NtfGameResult.Result\022" +
      "\017\n\007maxWait\030\003 \002(\r\022M\n\007details\030\004 \003(\0132<.com." +
      "ourgame.mahjong.bloodriver.message.NtfGa" +
      "meResult.Detail\032B\n\006Detail\022\014\n\004type\030\001 \002(\r\022" +
      "\014\n\004seat\030\002 \002(\r\022\016\n\006points\030\003 \002(\r\022\014\n\004tile\030\004 " +
      "\001(\r\032)\n\006Result\022\014\n\004seat\030\001 \002(\r\022\021\n\twinPoints" +
      "\030\002 \002(\021\" \n\017CREQAbsentColor\022\r\n\005color\030\001 \002(\r",
      "\"-\n\016NtfAbsentColor\022\014\n\004seat\030\001 \002(\r\022\r\n\005colo" +
      "r\030\002 \002(\r*\232\001\n\010MeldType\022\r\n\tMELD_PAIR\020\001\022\014\n\010M" +
      "ELD_CHI\020\002\022\r\n\tMELD_PENG\020\003\022\022\n\016MELD_MING_GA" +
      "NG\020\004\022\020\n\014MELD_BU_GANG\020\005\022\020\n\014MELD_AN_GANG\020\006" +
      "\022\025\n\021MELD_IN_HAND_SHUN\020\007\022\023\n\017MELD_IN_HAND_" +
      "KE\020\010*\241\001\n\nActionType\022\016\n\nACT_GIVEUP\020\000\022\017\n\013A" +
      "CT_DISCARD\020\001\022\013\n\007ACT_CHI\020\002\022\014\n\010ACT_PENG\020\004\022" +
      "\014\n\010ACT_GANG\020\010\022\016\n\nACT_BUGANG\020\020\022\016\n\nACT_ANG" +
      "ANG\020 \022\013\n\007ACT_WIN\020@\022\r\n\010ACT_TING\020\200\001\022\r\n\010ACT" +
      "_SHOW\020\200\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_ourgame_mahjong_bloodriver_message_Meld_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_ourgame_mahjong_bloodriver_message_Meld_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_Meld_descriptor,
              new java.lang.String[] { "MeldType", "Provider", "LastTile", "RootTile", });
          internal_static_com_ourgame_mahjong_bloodriver_message_Set_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_ourgame_mahjong_bloodriver_message_Set_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_Set_descriptor,
              new java.lang.String[] { "Seat", "WinType", "Melds", "WinUnits", "FanTypes", "Params", });
          internal_static_com_ourgame_mahjong_bloodriver_message_Player_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_com_ourgame_mahjong_bloodriver_message_Player_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_Player_descriptor,
              new java.lang.String[] { "Id", "Name", "Score", "Seat", });
          internal_static_com_ourgame_mahjong_bloodriver_message_CurrentTileInfo_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_com_ourgame_mahjong_bloodriver_message_CurrentTileInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_CurrentTileInfo_descriptor,
              new java.lang.String[] { "Seat", "InhandAmount", "ShowTiles", "DiscardedTiles", "InhandTiles", "LastTile", "Flowers", });
          internal_static_com_ourgame_mahjong_bloodriver_message_CReqEnterGame_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_com_ourgame_mahjong_bloodriver_message_CReqEnterGame_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_CReqEnterGame_descriptor,
              new java.lang.String[] { "GameId", });
          internal_static_com_ourgame_mahjong_bloodriver_message_SAckEnterGame_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_com_ourgame_mahjong_bloodriver_message_SAckEnterGame_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_SAckEnterGame_descriptor,
              new java.lang.String[] { "GameId", "Result", "FailReason", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfStartGame_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfStartGame_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfStartGame_descriptor,
              new java.lang.String[] { "GameId", "GameType", "Players", "Dealer", "BasicScore", "Stage", "Round", "Serial", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfResumeGame_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfResumeGame_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfResumeGame_descriptor,
              new java.lang.String[] { "Dealer", "BasicScore", "Stage", "Round", "Serial", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfCastDice_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfCastDice_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfCastDice_descriptor,
              new java.lang.String[] { "Seat", "Type", "Points", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_descriptor,
              new java.lang.String[] { "StartSeat", "StartFrusta", "Tiles", "Amouts", "WaitingTime", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_TileAmount_descriptor =
            internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_descriptor.getNestedTypes().get(0);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_TileAmount_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfDeals_TileAmount_descriptor,
              new java.lang.String[] { "Seat", "Amount", });
          internal_static_com_ourgame_mahjong_bloodriver_message_CReqSwap_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_com_ourgame_mahjong_bloodriver_message_CReqSwap_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_CReqSwap_descriptor,
              new java.lang.String[] { "Tiles", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NTFSwapPrepared_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_com_ourgame_mahjong_bloodriver_message_NTFSwapPrepared_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NTFSwapPrepared_descriptor,
              new java.lang.String[] { "Seat", "Tiles", });
          internal_static_com_ourgame_mahjong_bloodriver_message_SAckSwap_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_com_ourgame_mahjong_bloodriver_message_SAckSwap_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_SAckSwap_descriptor,
              new java.lang.String[] { "OldTiles", "NewTiles", "Action", "ActTime", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfDiscard_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfDiscard_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfDiscard_descriptor,
              new java.lang.String[] { "Tile", "Seat", "Action", "ActTime", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfDraw_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfDraw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfDraw_descriptor,
              new java.lang.String[] { "Seat", "Front", "TileId", "Action", "ActTime", });
          internal_static_com_ourgame_mahjong_bloodriver_message_CReqAct_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_com_ourgame_mahjong_bloodriver_message_CReqAct_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_CReqAct_descriptor,
              new java.lang.String[] { "Seat", "Act", "Provider", "TargetTile", "RootTiles", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfAct_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfAct_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfAct_descriptor,
              new java.lang.String[] { "Seat", "Act", "Provider", "TargetTile", "RootTiles", "Action", "ActTime", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_descriptor =
            getDescriptor().getMessageTypes().get(17);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_descriptor,
              new java.lang.String[] { "WinType", "WinTile", "WinInfos", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_WinInfo_descriptor =
            internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_descriptor.getNestedTypes().get(0);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_WinInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfWin_WinInfo_descriptor,
              new java.lang.String[] { "WinnerSeat", "LoserSeat", "Fan", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameStatus_descriptor =
            getDescriptor().getMessageTypes().get(18);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameStatus_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameStatus_descriptor,
              new java.lang.String[] { "GameId", "GameType", "Players", "Dealer", "BasicScore", "Stage", "Round", "Serial", "StartSeat", "StartFrusta", "FrontDrewTiles", "BackDrewTiles", "TileInfos", });
          internal_static_com_ourgame_mahjong_bloodriver_message_CReqUserTrust_descriptor =
            getDescriptor().getMessageTypes().get(19);
          internal_static_com_ourgame_mahjong_bloodriver_message_CReqUserTrust_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_CReqUserTrust_descriptor,
              new java.lang.String[] { "GameId", "Trust", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfUserTrust_descriptor =
            getDescriptor().getMessageTypes().get(20);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfUserTrust_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfUserTrust_descriptor,
              new java.lang.String[] { "GameId", "Seat", "Trust", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_descriptor =
            getDescriptor().getMessageTypes().get(21);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_descriptor,
              new java.lang.String[] { "GameId", "FinalStatus", "FinalWinInfos", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalStatus_descriptor =
            internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_descriptor.getNestedTypes().get(0);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalStatus_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalStatus_descriptor,
              new java.lang.String[] { "Seat", "TilesInHand", "Status", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalWinInfo_descriptor =
            internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_descriptor.getNestedTypes().get(1);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalWinInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameOver_FinalWinInfo_descriptor,
              new java.lang.String[] { "Seat", "Points", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_descriptor =
            getDescriptor().getMessageTypes().get(22);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_descriptor,
              new java.lang.String[] { "Results", "MaxWait", "Details", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Detail_descriptor =
            internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_descriptor.getNestedTypes().get(0);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Detail_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Detail_descriptor,
              new java.lang.String[] { "Type", "Seat", "Points", "Tile", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Result_descriptor =
            internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_descriptor.getNestedTypes().get(1);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Result_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfGameResult_Result_descriptor,
              new java.lang.String[] { "Seat", "WinPoints", });
          internal_static_com_ourgame_mahjong_bloodriver_message_CREQAbsentColor_descriptor =
            getDescriptor().getMessageTypes().get(23);
          internal_static_com_ourgame_mahjong_bloodriver_message_CREQAbsentColor_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_CREQAbsentColor_descriptor,
              new java.lang.String[] { "Color", });
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfAbsentColor_descriptor =
            getDescriptor().getMessageTypes().get(24);
          internal_static_com_ourgame_mahjong_bloodriver_message_NtfAbsentColor_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_ourgame_mahjong_bloodriver_message_NtfAbsentColor_descriptor,
              new java.lang.String[] { "Seat", "Color", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
