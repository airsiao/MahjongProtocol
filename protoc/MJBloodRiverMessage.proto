package com.ourgame.mahjong.bloodriver.message;

//========================================================================================
// 麻将游戏服务消息结构定义
// 创建：郭英奎、刘潇
// OGID_BASE_MESSAGE = 0X00000000
// OGID_GAME_MESSAGE = OGID_BASE_MESSAGE + 1200
// CLENT	= 0X00000000
// SERVER	= 0X00000001
//========================================================================================

// 一副牌的成牌类型
enum MeldType{
	MELD_PAIR = 1;							//对子，将牌或7对
	MELD_CHI = 2;							//吃牌
	MELD_PENG = 3;							//碰牌
	MELD_MING_GANG = 4;						//普通明杠，手里三种，别人打出一张
	MELD_BU_GANG = 5;						//补杠，先碰，再抓到一张
	MELD_AN_GANG = 6;						//暗杠
	MELD_IN_HAND_SHUN = 7;					//手中的成牌，顺牌
	MELD_IN_HAND_KE = 8;					//手中的成牌，刻牌
}

// 动作
enum ActionType{
	ACT_GIVEUP = 0;							//放弃
	ACT_DISCARD = 1;						//打出一张牌
	ACT_CHI = 2;							//吃牌
	ACT_PENG = 4;							//碰牌
	ACT_GANG = 8;							//杠牌
	ACT_BUGANG = 16;						//补杠
	ACT_ANGANG = 32;						//暗杠
	ACT_WIN = 64;							//和牌
	ACT_TING = 128;							//听牌
	ACT_SHOW = 256;							//明牌
}

// 一副牌，吃碰杠
message Meld{
	required uint32 meldType = 1;			//类型
	required uint32 provider = 2;			//打出最后一张牌的玩家座位号
	required uint32 lastTile = 3;			//最后一张牌
	repeated uint32 rootTile = 4;			//手中牌
}

// 和牌时的牌
message Set{
	required uint32 seat = 1;				//座位号
	required uint32 winType = 2;			//和牌方式，游戏自己定义
	repeated Meld melds = 3;				//牌
	required uint32 winUnits = 4;			//总番数
	repeated uint32 fanTypes = 5;			//番型
	optional uint32 params = 6;				//其他参数，抢杠，海底捞，绝张等
}

// 玩家信息
message Player{
	required uint64 id = 1;					//id
	required string name = 2;				//名字
	required uint32 score = 3;				//积分
	optional uint32 seat = 4;				//座位号
}

// 历史消息
message CurrentTileInfo{
	required uint32 seat = 1;				//座位号
	required uint32 inhandAmount = 2;		//手中牌数量
	repeated Meld  showTiles = 3;			//吃碰杠
	repeated uint32 discardedTiles = 4;		//打出的牌
	repeated uint32 inhandTiles	= 5;		//手中的牌
	optional uint32 lastTile = 6;
	optional uint32 flowers = 7;			//花牌
}


//========================================================================================
// 进入游戏
// #define OGID_GAME_ENTER						( OGID_GAME_MESSAGE + 1 )
message CReqEnterGame{
	required uint64 gameId = 1;
}

message SAckEnterGame{
	required uint64 gameId = 1;
	required uint32 result = 2;					//结果，0为成功
	optional string failReason = 3;				//失败原因
}

//========================================================================================
// 游戏开始
// #define OGID_GAME_START						( OGID_GAME_MESSAGE + 3 )
message NtfStartGame{
	required uint64 gameId = 1;					//游戏ID
	required uint32 gameType = 2;				//麻将种类
	repeated Player players = 3;				//玩家
	required uint32 dealer = 4;					//庄家座位号
	required uint32 basicScore = 5;				//基础分，每番多少分
	required uint32 stage = 6;					//阶段号
	required uint32 round = 7;					//第几圈
	required uint32 serial = 8;					//第几局
}

//========================================================================================
// 重新开始游戏
// #define OGID_GAME_RESUME						( OGID_GAME_MESSAGE + 5 )
message NtfResumeGame{
	required uint32 dealer = 1;					//庄家座位号
	required uint32 basicScore = 2;				//基础分，每番多少分
	required uint32 stage = 3;					//阶段号
	required uint32 round = 4;					//第几圈
	required uint32 serial = 5;					//第几局
}

//========================================================================================
// 掷骰子
// #define OGID_DICE							( OGID_GAME_MESSAGE + 7 )
message NtfCastDice{
	required uint32 seat = 1;					//座位号
	required uint32 type = 2;					//打色子的类型，作用，区分第几次
	repeated uint32 points = 3;					//色子的点数
}

//========================================================================================
// 开门发牌，服务器一次性发出所有牌，客户端做动画处理
// #define OGID_DEAL							( OGID_GAME_MESSAGE + 9 )
message NtfDeals{
	message TileAmount{
		required uint32 seat = 1;
		required uint32 amount = 2;
	}
	required uint32 startSeat = 1;				//从哪一家门前抓牌
	required uint32 startFrusta = 2;			//从第几墩开始抓牌
	repeated uint32 tiles = 3;					//抓到的牌
	repeated TileAmount amouts = 4;				//其余人的牌张数
	required uint32 waitingTime = 5;			//等候准备换牌的时间
}

//========================================================================================
// 换三张牌
// #define OGID_SWAP							( OGID_GAME_MESSAGE + 11 )
// 客户端发送准备交换的三张牌
message CReqSwap{
	repeated uint32 tiles = 1;
}
// 有玩家准备好换牌
message NTFSwapPrepared{
	required uint32 seat = 1;					//座位号
	repeated uint32 tiles = 2;					//本人发送拿出的3张牌，其他人收到3个0
}

//========================================================================================
// 换三张牌
// #define OGID_SWAP_RESULT						( OGID_GAME_MESSAGE + 13 )
// 服务器返回换回的三张牌
message SAckSwap{
	repeated uint32 oldTiles  = 1;
	repeated uint32 newTiles = 2;
	optional uint32 action = 3;
	optional uint32 actTime = 4;
}

//========================================================================================
// 有人打牌
// #define OGID_DISCARD							( OGID_GAME_MESSAGE + 15 )
message NtfDiscard{
	required uint32 tile = 1;
	required uint32 seat = 2;
	optional uint32 action = 3;
	optional uint32 actTime = 4;
}

//========================================================================================
// 抓牌
// #define OGID_DRAW							( OGID_GAME_MESSAGE + 17 )
message NtfDraw{
	required uint32 seat = 1;					//抓牌者座位号
	required bool front = 2 [default = true];	//从前边抓还是后面抓牌
	optional uint32 tileId = 3;					//自己抓牌时，抓的牌的ID
	optional uint32 action = 4;
	optional uint32 actTime = 5;
}

//========================================================================================
// 动作请求
// #define OGID_ACTION							( OGID_GAME_MESSAGE + 19 )
message CReqAct{
	required uint32 seat = 1;
	required ActionType act = 2;				//放弃，吃，碰，杠，听
	optional uint32 provider = 3;
	optional uint32 targetTile = 4;
	repeated uint32 rootTiles = 5;
}
message NtfAct{
	required uint32 seat = 1;
	required ActionType act = 2;				//放弃，吃，碰，杠，听
	optional uint32 provider = 3;
	optional uint32 targetTile = 4;
	repeated uint32 rootTiles = 5;
	optional uint32 action = 6;
	optional uint32 actTime = 7;
}

//========================================================================================
// 有玩家胡牌
// #define OGID_PLAYER_WIN						( OGID_GAME_MESSAGE + 21 )
message NtfWin{
	//和牌结果
	message WinInfo{
		required uint32 winnerSeat = 1;
		required uint32 loserSeat = 2;
		required uint32 fan = 3;
	}
	required uint32 winType = 1;				//0：正常一人点炮一人和，1：自摸，2:一炮多响
	required uint32 winTile = 2;
	repeated WinInfo winInfos = 3;
}

//========================================================================================
// 断线重连
// #define OGID_GAME_STATUS						( OGID_GAME_MESSAGE + 25 )
message NtfGameStatus{
	required uint64 gameId = 1;					//游戏ID
	required uint32 gameType = 2;				//麻将种类
	repeated Player players = 3;				//玩家
	required uint32 dealer = 4;					//庄家座位号
	required uint32 basicScore = 5;				//基础分，每番多少分
	required uint32 stage = 6;					//阶段号
	required uint32 round = 7;					//第几圈
	required uint32 serial = 8;					//第几局
	required uint32 startSeat = 9;				//开门的座位号
	required uint32 startFrusta = 10;			//开门的墩数
	required uint32 frontDrewTiles = 11;		//前边抓过多少张牌
	required uint32 backDrewTiles = 12;			//后边抓过多少张牌
	repeated CurrentTileInfo tileInfos = 13;	//用户牌的信息
}

//========================================================================================
// 托管
// #define OGID_GAME_HOSTING					( OGID_GAME_MESSAGE + 27 )
message CReqUserTrust{
	required uint64 gameId = 1;
	required int32 trust = 2;					//0为解除托管,1手动托管，2超时自动托管，4断线自动托管
}
message NtfUserTrust{
	required uint64 gameId = 1;
	required int32 seat = 2;					//座位号
	required int32 trust = 3;
}

//========================================================================================
// 亮牌
// #define OGID_SHOW_CARD						( OGID_GAME_MESSAGE + 29 )
message NtfGameOver{
	//用户最终状态
	message FinalStatus{
		required uint32 seat = 1;				//座位号
		repeated uint32 tilesInHand = 2;		//手牌
		required uint32 status = 3[default=0]; 	//0:正常  1：无听  2： 花猪
	}
	//最终无听，花猪赔付信息
	message FinalWinInfo{
		required uint32 seat = 1;				//座位号
		required sint32 points = 2; 			//番数
	}
	required uint64 gameId = 1;
	repeated FinalStatus finalStatus = 2;
	repeated FinalWinInfo finalWinInfos = 3;
}

//========================================================================================
// 游戏结果
// #define OGID_GAME_RESULT						( OGID_GAME_MESSAGE + 31 )
message NtfGameResult{
	message Detail{
		required uint32 type = 1;				//是和还是 1和牌，2点炮 3 自摸 4 别人自摸,5 别人无听，6，自己无听，7，别人花猪，8，自己花猪
		required uint32 seat = 2;				//如果是和牌，这是点炮者座位号，如果是点炮，这是和牌者座位号
		required uint32 points = 3; 			//番数
		optional uint32 tile = 4;  				//点炮的牌
	}
	message Result{
		required uint32 seat = 1;
		required sint32 winPoints = 2;							//总输赢番数
	}
	repeated Result results = 2;
	required uint32 maxWait = 3;				//最长等待时间，自动配桌散桌，这个值是0
	repeated Detail details = 4;				//输赢明细
}

//========================================================================================
// 定缺
// #define OGID_ABSENT_COLOR					( OGID_GAME_MESSAGE + 33 )
message CREQAbsentColor{
	required uint32 color = 1;
}
message NtfAbsentColor{
	required uint32 seat = 1;
	required uint32 color = 2;
}